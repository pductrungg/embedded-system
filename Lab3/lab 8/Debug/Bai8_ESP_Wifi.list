
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008794  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000309c  08008924  08008924  00018924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9c0  0800b9c0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9c0  0800b9c0  0001b9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9c8  0800b9c8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9c8  0800b9c8  0001b9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9cc  0800b9cc  0001b9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b9d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000003c0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000438  20000438  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021f72  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044e4  00000000  00000000  0004201a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  00046500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014f8  00000000  00000000  00047bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c6e  00000000  00000000  000490a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fc9c  00000000  00000000  0006fd16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e01ff  00000000  00000000  0008f9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016fbb1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000619c  00000000  00000000  0016fc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800890c 	.word	0x0800890c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800890c 	.word	0x0800890c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <test_Adc>:
#include "ada_update.h"

uint8_t count_adc = 0;

void test_Adc() {
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b0b3      	sub	sp, #204	; 0xcc
 8000db8:	af04      	add	r7, sp, #16
    count_adc = (count_adc + 1) % 200;
 8000dba:	4bc4      	ldr	r3, [pc, #784]	; (80010cc <test_Adc+0x318>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	4ac3      	ldr	r2, [pc, #780]	; (80010d0 <test_Adc+0x31c>)
 8000dc2:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc6:	1191      	asrs	r1, r2, #6
 8000dc8:	17da      	asrs	r2, r3, #31
 8000dca:	1a8a      	subs	r2, r1, r2
 8000dcc:	21c8      	movs	r1, #200	; 0xc8
 8000dce:	fb01 f202 	mul.w	r2, r1, r2
 8000dd2:	1a9a      	subs	r2, r3, r2
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	4bbd      	ldr	r3, [pc, #756]	; (80010cc <test_Adc+0x318>)
 8000dd8:	701a      	strb	r2, [r3, #0]
	test_Esp();
 8000dda:	f001 fb2b 	bl	8002434 <test_Esp>
	lightProcess();
 8000dde:	f001 faf3 	bl	80023c8 <lightProcess>

    if (count_adc == 0) {
 8000de2:	4bba      	ldr	r3, [pc, #744]	; (80010cc <test_Adc+0x318>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 816c 	bne.w	80010c4 <test_Adc+0x310>
        // Read sensor values

        sensor_Read();
 8000dec:	f001 fc28 	bl	8002640 <sensor_Read>

        // Voltage
        lcd_ShowStr(10, 100, "Voltage:", RED, BLACK, 16, 0);
 8000df0:	2300      	movs	r3, #0
 8000df2:	9302      	str	r3, [sp, #8]
 8000df4:	2310      	movs	r3, #16
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e00:	4ab4      	ldr	r2, [pc, #720]	; (80010d4 <test_Adc+0x320>)
 8000e02:	2164      	movs	r1, #100	; 0x64
 8000e04:	200a      	movs	r0, #10
 8000e06:	f001 f9ef 	bl	80021e8 <lcd_ShowStr>
        lcd_ShowFloatNum(130, 100, sensor_GetVoltage(), 4, RED, BLACK, 16);
 8000e0a:	f001 fc41 	bl	8002690 <sensor_GetVoltage>
 8000e0e:	eef0 7a40 	vmov.f32	s15, s0
 8000e12:	2310      	movs	r3, #16
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	2300      	movs	r3, #0
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e1e:	2204      	movs	r2, #4
 8000e20:	eeb0 0a67 	vmov.f32	s0, s15
 8000e24:	2164      	movs	r1, #100	; 0x64
 8000e26:	2082      	movs	r0, #130	; 0x82
 8000e28:	f000 ffd2 	bl	8001dd0 <lcd_ShowFloatNum>
        int voltageInt = (int)(sensor_GetVoltage() * 100); // Scale float to int (2 decimal places)
 8000e2c:	f001 fc30 	bl	8002690 <sensor_GetVoltage>
 8000e30:	eef0 7a40 	vmov.f32	s15, s0
 8000e34:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80010d8 <test_Adc+0x324>
 8000e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e40:	ee17 3a90 	vmov	r3, s15
 8000e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        char voltageStr[30];
        snprintf(voltageStr, sizeof(voltageStr), "!VOLTAGE:%d.%02d#\n", voltageInt / 100, voltageInt % 100);
 8000e48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e4c:	4aa0      	ldr	r2, [pc, #640]	; (80010d0 <test_Adc+0x31c>)
 8000e4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e52:	1152      	asrs	r2, r2, #5
 8000e54:	17db      	asrs	r3, r3, #31
 8000e56:	1ad4      	subs	r4, r2, r3
 8000e58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000e5c:	4b9c      	ldr	r3, [pc, #624]	; (80010d0 <test_Adc+0x31c>)
 8000e5e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e62:	1159      	asrs	r1, r3, #5
 8000e64:	17d3      	asrs	r3, r2, #31
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	2164      	movs	r1, #100	; 0x64
 8000e6a:	fb01 f303 	mul.w	r3, r1, r3
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	4623      	mov	r3, r4
 8000e78:	4a98      	ldr	r2, [pc, #608]	; (80010dc <test_Adc+0x328>)
 8000e7a:	211e      	movs	r1, #30
 8000e7c:	f007 f904 	bl	8008088 <sniprintf>
        uart_EspSendBytes(voltageStr, strlen(voltageStr));
 8000e80:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f9a3 	bl	80001d0 <strlen>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 ffd1 	bl	8002e3c <uart_EspSendBytes>

        // Current
        lcd_ShowStr(10, 120, "Current:", RED, BLACK, 16, 0);
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000eaa:	4a8d      	ldr	r2, [pc, #564]	; (80010e0 <test_Adc+0x32c>)
 8000eac:	2178      	movs	r1, #120	; 0x78
 8000eae:	200a      	movs	r0, #10
 8000eb0:	f001 f99a 	bl	80021e8 <lcd_ShowStr>
        lcd_ShowFloatNum(130, 120, sensor_GetCurrent(), 4, RED, BLACK, 16);
 8000eb4:	f001 fc28 	bl	8002708 <sensor_GetCurrent>
 8000eb8:	eef0 7a40 	vmov.f32	s15, s0
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ec8:	2204      	movs	r2, #4
 8000eca:	eeb0 0a67 	vmov.f32	s0, s15
 8000ece:	2178      	movs	r1, #120	; 0x78
 8000ed0:	2082      	movs	r0, #130	; 0x82
 8000ed2:	f000 ff7d 	bl	8001dd0 <lcd_ShowFloatNum>
        int currentInt = (int)(sensor_GetCurrent() * 100); // Scale float to int (2 decimal places)
 8000ed6:	f001 fc17 	bl	8002708 <sensor_GetCurrent>
 8000eda:	eef0 7a40 	vmov.f32	s15, s0
 8000ede:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80010d8 <test_Adc+0x324>
 8000ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eea:	ee17 3a90 	vmov	r3, s15
 8000eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        char currentStr[30];
        snprintf(currentStr, sizeof(currentStr), "!CURRENT:%d.%02d#\n", currentInt / 100, currentInt % 100);
 8000ef2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000ef6:	4a76      	ldr	r2, [pc, #472]	; (80010d0 <test_Adc+0x31c>)
 8000ef8:	fb82 1203 	smull	r1, r2, r2, r3
 8000efc:	1152      	asrs	r2, r2, #5
 8000efe:	17db      	asrs	r3, r3, #31
 8000f00:	1ad4      	subs	r4, r2, r3
 8000f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000f06:	4b72      	ldr	r3, [pc, #456]	; (80010d0 <test_Adc+0x31c>)
 8000f08:	fb83 1302 	smull	r1, r3, r3, r2
 8000f0c:	1159      	asrs	r1, r3, #5
 8000f0e:	17d3      	asrs	r3, r2, #31
 8000f10:	1acb      	subs	r3, r1, r3
 8000f12:	2164      	movs	r1, #100	; 0x64
 8000f14:	fb01 f303 	mul.w	r3, r1, r3
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	4623      	mov	r3, r4
 8000f22:	4a70      	ldr	r2, [pc, #448]	; (80010e4 <test_Adc+0x330>)
 8000f24:	211e      	movs	r1, #30
 8000f26:	f007 f8af 	bl	8008088 <sniprintf>
        uart_EspSendBytes(currentStr, strlen(currentStr));
 8000f2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff f94e 	bl	80001d0 <strlen>
 8000f34:	4603      	mov	r3, r0
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 ff7c 	bl	8002e3c <uart_EspSendBytes>

        // Light
        lcd_ShowStr(10, 140, "Light:", RED, BLACK, 16, 0);
 8000f44:	2300      	movs	r3, #0
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2310      	movs	r3, #16
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f54:	4a64      	ldr	r2, [pc, #400]	; (80010e8 <test_Adc+0x334>)
 8000f56:	218c      	movs	r1, #140	; 0x8c
 8000f58:	200a      	movs	r0, #10
 8000f5a:	f001 f945 	bl	80021e8 <lcd_ShowStr>
        lcd_ShowIntNum(130, 140, sensor_GetLight(), 4, RED, BLACK, 16);
 8000f5e:	f001 fb7d 	bl	800265c <sensor_GetLight>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	2310      	movs	r3, #16
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2304      	movs	r3, #4
 8000f76:	218c      	movs	r1, #140	; 0x8c
 8000f78:	2082      	movs	r0, #130	; 0x82
 8000f7a:	f000 feab 	bl	8001cd4 <lcd_ShowIntNum>
        int lightVal = sensor_GetLight(); // No scaling needed
 8000f7e:	f001 fb6d 	bl	800265c <sensor_GetLight>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        char lightStr[30];
        snprintf(lightStr, sizeof(lightStr), "!LIGHT:%d#\n", lightVal);
 8000f88:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f90:	4a56      	ldr	r2, [pc, #344]	; (80010ec <test_Adc+0x338>)
 8000f92:	211e      	movs	r1, #30
 8000f94:	f007 f878 	bl	8008088 <sniprintf>
        uart_EspSendBytes(lightStr, strlen(lightStr));
 8000f98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f917 	bl	80001d0 <strlen>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 ff45 	bl	8002e3c <uart_EspSendBytes>

        // Potentiometer
        lcd_ShowStr(10, 160, "Potentiometer:", RED, BLACK, 16, 0);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	2310      	movs	r3, #16
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000fc2:	4a4b      	ldr	r2, [pc, #300]	; (80010f0 <test_Adc+0x33c>)
 8000fc4:	21a0      	movs	r1, #160	; 0xa0
 8000fc6:	200a      	movs	r0, #10
 8000fc8:	f001 f90e 	bl	80021e8 <lcd_ShowStr>
        lcd_ShowIntNum(130, 160, sensor_GetPotentiometer(), 4, RED, BLACK, 16);
 8000fcc:	f001 fb52 	bl	8002674 <sensor_GetPotentiometer>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	21a0      	movs	r1, #160	; 0xa0
 8000fe6:	2082      	movs	r0, #130	; 0x82
 8000fe8:	f000 fe74 	bl	8001cd4 <lcd_ShowIntNum>
        int potValue = sensor_GetPotentiometer(); // No scaling needed
 8000fec:	f001 fb42 	bl	8002674 <sensor_GetPotentiometer>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        char potStr[30];
        snprintf(potStr, sizeof(potStr), "!POTENTIOMETER:%d#\n", potValue);
 8000ff6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000ffa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ffe:	4a3d      	ldr	r2, [pc, #244]	; (80010f4 <test_Adc+0x340>)
 8001000:	211e      	movs	r1, #30
 8001002:	f007 f841 	bl	8008088 <sniprintf>
        uart_EspSendBytes(potStr, strlen(potStr));
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff f8e0 	bl	80001d0 <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	b29a      	uxth	r2, r3
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f001 ff0e 	bl	8002e3c <uart_EspSendBytes>

        // Temperature
        lcd_ShowStr(10, 180, "Temperature:", RED, BLACK, 16, 0);
 8001020:	2300      	movs	r3, #0
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2310      	movs	r3, #16
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	2300      	movs	r3, #0
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001030:	4a31      	ldr	r2, [pc, #196]	; (80010f8 <test_Adc+0x344>)
 8001032:	21b4      	movs	r1, #180	; 0xb4
 8001034:	200a      	movs	r0, #10
 8001036:	f001 f8d7 	bl	80021e8 <lcd_ShowStr>
        lcd_ShowFloatNum(130, 180, sensor_GetTemperature(), 4, RED, BLACK, 16);
 800103a:	f001 fbc1 	bl	80027c0 <sensor_GetTemperature>
 800103e:	eef0 7a40 	vmov.f32	s15, s0
 8001042:	2310      	movs	r3, #16
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	2300      	movs	r3, #0
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800104e:	2204      	movs	r2, #4
 8001050:	eeb0 0a67 	vmov.f32	s0, s15
 8001054:	21b4      	movs	r1, #180	; 0xb4
 8001056:	2082      	movs	r0, #130	; 0x82
 8001058:	f000 feba 	bl	8001dd0 <lcd_ShowFloatNum>
        int tempInt = (int)(sensor_GetTemperature() * 100); // Scale float to int (2 decimal places)
 800105c:	f001 fbb0 	bl	80027c0 <sensor_GetTemperature>
 8001060:	eef0 7a40 	vmov.f32	s15, s0
 8001064:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80010d8 <test_Adc+0x324>
 8001068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001070:	ee17 3a90 	vmov	r3, s15
 8001074:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        char tempStr[30];
        snprintf(tempStr, sizeof(tempStr), "!TEMPERATURE:%d.%02d#\n", tempInt / 100, tempInt % 100);
 8001078:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <test_Adc+0x31c>)
 800107e:	fb82 1203 	smull	r1, r2, r2, r3
 8001082:	1152      	asrs	r2, r2, #5
 8001084:	17db      	asrs	r3, r3, #31
 8001086:	1ad4      	subs	r4, r2, r3
 8001088:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <test_Adc+0x31c>)
 800108e:	fb83 1302 	smull	r1, r3, r3, r2
 8001092:	1159      	asrs	r1, r3, #5
 8001094:	17d3      	asrs	r3, r2, #31
 8001096:	1acb      	subs	r3, r1, r3
 8001098:	2164      	movs	r1, #100	; 0x64
 800109a:	fb01 f303 	mul.w	r3, r1, r3
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	1d38      	adds	r0, r7, #4
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	4623      	mov	r3, r4
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <test_Adc+0x348>)
 80010a8:	211e      	movs	r1, #30
 80010aa:	f006 ffed 	bl	8008088 <sniprintf>
        uart_EspSendBytes(tempStr, strlen(tempStr));
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f88d 	bl	80001d0 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 febc 	bl	8002e3c <uart_EspSendBytes>
    }
}
 80010c4:	bf00      	nop
 80010c6:	37bc      	adds	r7, #188	; 0xbc
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	20000094 	.word	0x20000094
 80010d0:	51eb851f 	.word	0x51eb851f
 80010d4:	08008924 	.word	0x08008924
 80010d8:	42c80000 	.word	0x42c80000
 80010dc:	08008930 	.word	0x08008930
 80010e0:	08008944 	.word	0x08008944
 80010e4:	08008950 	.word	0x08008950
 80010e8:	08008964 	.word	0x08008964
 80010ec:	0800896c 	.word	0x0800896c
 80010f0:	08008978 	.word	0x08008978
 80010f4:	08008988 	.word	0x08008988
 80010f8:	0800899c 	.word	0x0800899c
 80010fc:	080089ac 	.word	0x080089ac

08001100 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001112:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <MX_ADC1_Init+0x108>)
 8001114:	4a3d      	ldr	r2, [pc, #244]	; (800120c <MX_ADC1_Init+0x10c>)
 8001116:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001118:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <MX_ADC1_Init+0x108>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800111e:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <MX_ADC1_Init+0x108>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001124:	4b38      	ldr	r3, [pc, #224]	; (8001208 <MX_ADC1_Init+0x108>)
 8001126:	2201      	movs	r2, #1
 8001128:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800112a:	4b37      	ldr	r3, [pc, #220]	; (8001208 <MX_ADC1_Init+0x108>)
 800112c:	2200      	movs	r2, #0
 800112e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001130:	4b35      	ldr	r3, [pc, #212]	; (8001208 <MX_ADC1_Init+0x108>)
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001138:	4b33      	ldr	r3, [pc, #204]	; (8001208 <MX_ADC1_Init+0x108>)
 800113a:	2200      	movs	r2, #0
 800113c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <MX_ADC1_Init+0x108>)
 8001140:	4a33      	ldr	r2, [pc, #204]	; (8001210 <MX_ADC1_Init+0x110>)
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <MX_ADC1_Init+0x108>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800114a:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <MX_ADC1_Init+0x108>)
 800114c:	2205      	movs	r2, #5
 800114e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <MX_ADC1_Init+0x108>)
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001158:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <MX_ADC1_Init+0x108>)
 800115a:	2201      	movs	r2, #1
 800115c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115e:	482a      	ldr	r0, [pc, #168]	; (8001208 <MX_ADC1_Init+0x108>)
 8001160:	f002 f878 	bl	8003254 <HAL_ADC_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800116a:	f001 fa63 	bl	8002634 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800116e:	2308      	movs	r3, #8
 8001170:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001172:	2301      	movs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4822      	ldr	r0, [pc, #136]	; (8001208 <MX_ADC1_Init+0x108>)
 8001180:	f002 f9da 	bl	8003538 <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800118a:	f001 fa53 	bl	8002634 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800118e:	2309      	movs	r3, #9
 8001190:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001192:	2302      	movs	r3, #2
 8001194:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	481b      	ldr	r0, [pc, #108]	; (8001208 <MX_ADC1_Init+0x108>)
 800119c:	f002 f9cc 	bl	8003538 <HAL_ADC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80011a6:	f001 fa45 	bl	8002634 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011aa:	230a      	movs	r3, #10
 80011ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011ae:	2303      	movs	r3, #3
 80011b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4814      	ldr	r0, [pc, #80]	; (8001208 <MX_ADC1_Init+0x108>)
 80011b8:	f002 f9be 	bl	8003538 <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80011c2:	f001 fa37 	bl	8002634 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011c6:	230b      	movs	r3, #11
 80011c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80011ca:	2304      	movs	r3, #4
 80011cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_ADC1_Init+0x108>)
 80011d4:	f002 f9b0 	bl	8003538 <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80011de:	f001 fa29 	bl	8002634 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011e2:	230c      	movs	r3, #12
 80011e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80011e6:	2305      	movs	r3, #5
 80011e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_ADC1_Init+0x108>)
 80011f0:	f002 f9a2 	bl	8003538 <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80011fa:	f001 fa1b 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200000b8 	.word	0x200000b8
 800120c:	40012000 	.word	0x40012000
 8001210:	0f000001 	.word	0x0f000001

08001214 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a3c      	ldr	r2, [pc, #240]	; (8001324 <HAL_ADC_MspInit+0x110>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d171      	bne.n	800131a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_ADC_MspInit+0x114>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a3a      	ldr	r2, [pc, #232]	; (8001328 <HAL_ADC_MspInit+0x114>)
 8001240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b38      	ldr	r3, [pc, #224]	; (8001328 <HAL_ADC_MspInit+0x114>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b34      	ldr	r3, [pc, #208]	; (8001328 <HAL_ADC_MspInit+0x114>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a33      	ldr	r2, [pc, #204]	; (8001328 <HAL_ADC_MspInit+0x114>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b31      	ldr	r3, [pc, #196]	; (8001328 <HAL_ADC_MspInit+0x114>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <HAL_ADC_MspInit+0x114>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a2c      	ldr	r2, [pc, #176]	; (8001328 <HAL_ADC_MspInit+0x114>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <HAL_ADC_MspInit+0x114>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800128a:	2307      	movs	r3, #7
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128e:	2303      	movs	r3, #3
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4823      	ldr	r0, [pc, #140]	; (800132c <HAL_ADC_MspInit+0x118>)
 800129e:	f003 f8ff 	bl	80044a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012a2:	2303      	movs	r3, #3
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a6:	2303      	movs	r3, #3
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	481e      	ldr	r0, [pc, #120]	; (8001330 <HAL_ADC_MspInit+0x11c>)
 80012b6:	f003 f8f3 	bl	80044a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012bc:	4a1e      	ldr	r2, [pc, #120]	; (8001338 <HAL_ADC_MspInit+0x124>)
 80012be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_ADC_MspInit+0x120>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <HAL_ADC_MspInit+0x120>)
 8001300:	f002 fccc 	bl	8003c9c <HAL_DMA_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800130a:	f001 f993 	bl	8002634 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_ADC_MspInit+0x120>)
 8001312:	639a      	str	r2, [r3, #56]	; 0x38
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_ADC_MspInit+0x120>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40012000 	.word	0x40012000
 8001328:	40023800 	.word	0x40023800
 800132c:	40020800 	.word	0x40020800
 8001330:	40020400 	.word	0x40020400
 8001334:	20000100 	.word	0x20000100
 8001338:	40026410 	.word	0x40026410

0800133c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	2108      	movs	r1, #8
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <button_init+0x14>)
 8001346:	f003 fa47 	bl	80047d8 <HAL_GPIO_WritePin>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40020c00 	.word	0x40020c00

08001354 <button_Scan>:

void button_Scan(){
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2108      	movs	r1, #8
 800135e:	482f      	ldr	r0, [pc, #188]	; (800141c <button_Scan+0xc8>)
 8001360:	f003 fa3a 	bl	80047d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001364:	2201      	movs	r2, #1
 8001366:	2108      	movs	r1, #8
 8001368:	482c      	ldr	r0, [pc, #176]	; (800141c <button_Scan+0xc8>)
 800136a:	f003 fa35 	bl	80047d8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800136e:	230a      	movs	r3, #10
 8001370:	2202      	movs	r2, #2
 8001372:	492b      	ldr	r1, [pc, #172]	; (8001420 <button_Scan+0xcc>)
 8001374:	482b      	ldr	r0, [pc, #172]	; (8001424 <button_Scan+0xd0>)
 8001376:	f004 f9e0 	bl	800573a <HAL_SPI_Receive>
	  int button_index = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800137e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001382:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	e03f      	b.n	800140a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db06      	blt.n	800139e <button_Scan+0x4a>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b03      	cmp	r3, #3
 8001394:	dc03      	bgt.n	800139e <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3304      	adds	r3, #4
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e018      	b.n	80013d0 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	dd07      	ble.n	80013b4 <button_Scan+0x60>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b07      	cmp	r3, #7
 80013a8:	dc04      	bgt.n	80013b4 <button_Scan+0x60>
			  button_index = 7 - i;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f1c3 0307 	rsb	r3, r3, #7
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e00d      	b.n	80013d0 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b07      	cmp	r3, #7
 80013b8:	dd06      	ble.n	80013c8 <button_Scan+0x74>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0b      	cmp	r3, #11
 80013be:	dc03      	bgt.n	80013c8 <button_Scan+0x74>
			  button_index = i + 4;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3304      	adds	r3, #4
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	e003      	b.n	80013d0 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f1c3 0317 	rsb	r3, r3, #23
 80013ce:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <button_Scan+0xcc>)
 80013d2:	881a      	ldrh	r2, [r3, #0]
 80013d4:	897b      	ldrh	r3, [r7, #10]
 80013d6:	4013      	ands	r3, r2
 80013d8:	b29b      	uxth	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <button_Scan+0x96>
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <button_Scan+0xd4>)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2100      	movs	r1, #0
 80013e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80013e8:	e009      	b.n	80013fe <button_Scan+0xaa>
		  else button_count[button_index]++;
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <button_Scan+0xd4>)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b299      	uxth	r1, r3
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <button_Scan+0xd4>)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80013fe:	897b      	ldrh	r3, [r7, #10]
 8001400:	085b      	lsrs	r3, r3, #1
 8001402:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3301      	adds	r3, #1
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	ddbc      	ble.n	800138a <button_Scan+0x36>
	  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40020c00 	.word	0x40020c00
 8001420:	20000096 	.word	0x20000096
 8001424:	2000026c 	.word	0x2000026c
 8001428:	20000160 	.word	0x20000160

0800142c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_DMA_Init+0x3c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <MX_DMA_Init+0x3c>)
 800143c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_DMA_Init+0x3c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2038      	movs	r0, #56	; 0x38
 8001454:	f002 fbeb 	bl	8003c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001458:	2038      	movs	r0, #56	; 0x38
 800145a:	f002 fc04 	bl	8003c66 <HAL_NVIC_EnableIRQ>

}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800

0800146c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08e      	sub	sp, #56	; 0x38
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001486:	463b      	mov	r3, r7
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001498:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <MX_FSMC_Init+0xec>)
 800149a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800149e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <MX_FSMC_Init+0xec>)
 80014a2:	4a2e      	ldr	r2, [pc, #184]	; (800155c <MX_FSMC_Init+0xf0>)
 80014a4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <MX_FSMC_Init+0xec>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80014ac:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <MX_FSMC_Init+0xec>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80014b2:	4b29      	ldr	r3, [pc, #164]	; (8001558 <MX_FSMC_Init+0xec>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80014b8:	4b27      	ldr	r3, [pc, #156]	; (8001558 <MX_FSMC_Init+0xec>)
 80014ba:	2210      	movs	r2, #16
 80014bc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <MX_FSMC_Init+0xec>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <MX_FSMC_Init+0xec>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <MX_FSMC_Init+0xec>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <MX_FSMC_Init+0xec>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <MX_FSMC_Init+0xec>)
 80014d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_FSMC_Init+0xec>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <MX_FSMC_Init+0xec>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_FSMC_Init+0xec>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_FSMC_Init+0xec>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <MX_FSMC_Init+0xec>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80014fe:	230f      	movs	r3, #15
 8001500:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001502:	230f      	movs	r3, #15
 8001504:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001506:	233c      	movs	r3, #60	; 0x3c
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800150e:	2310      	movs	r3, #16
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001512:	2311      	movs	r3, #17
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001516:	2300      	movs	r3, #0
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800151a:	2308      	movs	r3, #8
 800151c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800151e:	230f      	movs	r3, #15
 8001520:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001522:	2309      	movs	r3, #9
 8001524:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800152a:	2310      	movs	r3, #16
 800152c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800152e:	2311      	movs	r3, #17
 8001530:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001536:	463a      	mov	r2, r7
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <MX_FSMC_Init+0xec>)
 8001540:	f004 fcde 	bl	8005f00 <HAL_SRAM_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800154a:	f001 f873 	bl	8002634 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800154e:	bf00      	nop
 8001550:	3738      	adds	r7, #56	; 0x38
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000180 	.word	0x20000180
 800155c:	a0000104 	.word	0xa0000104

08001560 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <HAL_FSMC_MspInit+0x88>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d131      	bne.n	80015e0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_FSMC_MspInit+0x88>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_FSMC_MspInit+0x8c>)
 8001588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <HAL_FSMC_MspInit+0x8c>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6393      	str	r3, [r2, #56]	; 0x38
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_FSMC_MspInit+0x8c>)
 8001594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800159e:	f64f 7388 	movw	r3, #65416	; 0xff88
 80015a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015b0:	230c      	movs	r3, #12
 80015b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <HAL_FSMC_MspInit+0x90>)
 80015ba:	f002 ff71 	bl	80044a0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80015be:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80015c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015d0:	230c      	movs	r3, #12
 80015d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <HAL_FSMC_MspInit+0x94>)
 80015da:	f002 ff61 	bl	80044a0 <HAL_GPIO_Init>
 80015de:	e000      	b.n	80015e2 <HAL_FSMC_MspInit+0x82>
    return;
 80015e0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000098 	.word	0x20000098
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40020c00 	.word	0x40020c00

080015f8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001600:	f7ff ffae 	bl	8001560 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08e      	sub	sp, #56	; 0x38
 8001610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
 8001626:	4b8f      	ldr	r3, [pc, #572]	; (8001864 <MX_GPIO_Init+0x258>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a8e      	ldr	r2, [pc, #568]	; (8001864 <MX_GPIO_Init+0x258>)
 800162c:	f043 0310 	orr.w	r3, r3, #16
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b8c      	ldr	r3, [pc, #560]	; (8001864 <MX_GPIO_Init+0x258>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	623b      	str	r3, [r7, #32]
 800163c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	4b88      	ldr	r3, [pc, #544]	; (8001864 <MX_GPIO_Init+0x258>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a87      	ldr	r2, [pc, #540]	; (8001864 <MX_GPIO_Init+0x258>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b85      	ldr	r3, [pc, #532]	; (8001864 <MX_GPIO_Init+0x258>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	4b81      	ldr	r3, [pc, #516]	; (8001864 <MX_GPIO_Init+0x258>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a80      	ldr	r2, [pc, #512]	; (8001864 <MX_GPIO_Init+0x258>)
 8001664:	f043 0320 	orr.w	r3, r3, #32
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b7e      	ldr	r3, [pc, #504]	; (8001864 <MX_GPIO_Init+0x258>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	4b7a      	ldr	r3, [pc, #488]	; (8001864 <MX_GPIO_Init+0x258>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a79      	ldr	r2, [pc, #484]	; (8001864 <MX_GPIO_Init+0x258>)
 8001680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b77      	ldr	r3, [pc, #476]	; (8001864 <MX_GPIO_Init+0x258>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b73      	ldr	r3, [pc, #460]	; (8001864 <MX_GPIO_Init+0x258>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a72      	ldr	r2, [pc, #456]	; (8001864 <MX_GPIO_Init+0x258>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b70      	ldr	r3, [pc, #448]	; (8001864 <MX_GPIO_Init+0x258>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b6c      	ldr	r3, [pc, #432]	; (8001864 <MX_GPIO_Init+0x258>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a6b      	ldr	r2, [pc, #428]	; (8001864 <MX_GPIO_Init+0x258>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b69      	ldr	r3, [pc, #420]	; (8001864 <MX_GPIO_Init+0x258>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b65      	ldr	r3, [pc, #404]	; (8001864 <MX_GPIO_Init+0x258>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a64      	ldr	r2, [pc, #400]	; (8001864 <MX_GPIO_Init+0x258>)
 80016d4:	f043 0308 	orr.w	r3, r3, #8
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b62      	ldr	r3, [pc, #392]	; (8001864 <MX_GPIO_Init+0x258>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <MX_GPIO_Init+0x258>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a5d      	ldr	r2, [pc, #372]	; (8001864 <MX_GPIO_Init+0x258>)
 80016f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <MX_GPIO_Init+0x258>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	2170      	movs	r1, #112	; 0x70
 8001706:	4858      	ldr	r0, [pc, #352]	; (8001868 <MX_GPIO_Init+0x25c>)
 8001708:	f003 f866 	bl	80047d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8001712:	4856      	ldr	r0, [pc, #344]	; (800186c <MX_GPIO_Init+0x260>)
 8001714:	f003 f860 	bl	80047d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171e:	4854      	ldr	r0, [pc, #336]	; (8001870 <MX_GPIO_Init+0x264>)
 8001720:	f003 f85a 	bl	80047d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800172a:	4852      	ldr	r0, [pc, #328]	; (8001874 <MX_GPIO_Init+0x268>)
 800172c:	f003 f854 	bl	80047d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001736:	4850      	ldr	r0, [pc, #320]	; (8001878 <MX_GPIO_Init+0x26c>)
 8001738:	f003 f84e 	bl	80047d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	2108      	movs	r1, #8
 8001740:	484e      	ldr	r0, [pc, #312]	; (800187c <MX_GPIO_Init+0x270>)
 8001742:	f003 f849 	bl	80047d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001746:	2370      	movs	r3, #112	; 0x70
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	4842      	ldr	r0, [pc, #264]	; (8001868 <MX_GPIO_Init+0x25c>)
 800175e:	f002 fe9f 	bl	80044a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8001762:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	483c      	ldr	r0, [pc, #240]	; (800186c <MX_GPIO_Init+0x260>)
 800177c:	f002 fe90 	bl	80044a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8001780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	4619      	mov	r1, r3
 8001794:	4836      	ldr	r0, [pc, #216]	; (8001870 <MX_GPIO_Init+0x264>)
 8001796:	f002 fe83 	bl	80044a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 800179a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	482f      	ldr	r0, [pc, #188]	; (8001870 <MX_GPIO_Init+0x264>)
 80017b4:	f002 fe74 	bl	80044a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80017b8:	23c0      	movs	r3, #192	; 0xc0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	482b      	ldr	r0, [pc, #172]	; (8001878 <MX_GPIO_Init+0x26c>)
 80017cc:	f002 fe68 	bl	80044a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80017d0:	2330      	movs	r3, #48	; 0x30
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e0:	4619      	mov	r1, r3
 80017e2:	4822      	ldr	r0, [pc, #136]	; (800186c <MX_GPIO_Init+0x260>)
 80017e4:	f002 fe5c 	bl	80044a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 80017e8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	481c      	ldr	r0, [pc, #112]	; (8001874 <MX_GPIO_Init+0x268>)
 8001802:	f002 fe4d 	bl	80044a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8001806:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001810:	2301      	movs	r3, #1
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001818:	4619      	mov	r1, r3
 800181a:	4814      	ldr	r0, [pc, #80]	; (800186c <MX_GPIO_Init+0x260>)
 800181c:	f002 fe40 	bl	80044a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	480f      	ldr	r0, [pc, #60]	; (8001878 <MX_GPIO_Init+0x26c>)
 800183a:	f002 fe31 	bl	80044a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800183e:	2308      	movs	r3, #8
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001852:	4619      	mov	r1, r3
 8001854:	4809      	ldr	r0, [pc, #36]	; (800187c <MX_GPIO_Init+0x270>)
 8001856:	f002 fe23 	bl	80044a0 <HAL_GPIO_Init>

}
 800185a:	bf00      	nop
 800185c:	3738      	adds	r7, #56	; 0x38
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40021000 	.word	0x40021000
 800186c:	40020800 	.word	0x40020800
 8001870:	40021400 	.word	0x40021400
 8001874:	40021800 	.word	0x40021800
 8001878:	40020000 	.word	0x40020000
 800187c:	40020c00 	.word	0x40020c00

08001880 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_I2C1_Init+0x50>)
 8001886:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <MX_I2C1_Init+0x54>)
 8001888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_I2C1_Init+0x50>)
 800188c:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <MX_I2C1_Init+0x58>)
 800188e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_I2C1_Init+0x50>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_I2C1_Init+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_I2C1_Init+0x50>)
 800189e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <MX_I2C1_Init+0x50>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_I2C1_Init+0x50>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <MX_I2C1_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_I2C1_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_I2C1_Init+0x50>)
 80018be:	f002 ffbf 	bl	8004840 <HAL_I2C_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018c8:	f000 feb4 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200001d0 	.word	0x200001d0
 80018d4:	40005400 	.word	0x40005400
 80018d8:	000186a0 	.word	0x000186a0

080018dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_I2C_MspInit+0x84>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d12b      	bne.n	8001956 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_I2C_MspInit+0x88>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_I2C_MspInit+0x88>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_I2C_MspInit+0x88>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800191a:	23c0      	movs	r3, #192	; 0xc0
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191e:	2312      	movs	r3, #18
 8001920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800192a:	2304      	movs	r3, #4
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	480c      	ldr	r0, [pc, #48]	; (8001968 <HAL_I2C_MspInit+0x8c>)
 8001936:	f002 fdb3 	bl	80044a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_I2C_MspInit+0x88>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_I2C_MspInit+0x88>)
 8001944:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_I2C_MspInit+0x88>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40005400 	.word	0x40005400
 8001964:	40023800 	.word	0x40023800
 8001968:	40020400 	.word	0x40020400

0800196c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <LCD_WR_REG+0x1c>)
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	8013      	strh	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	600ffffe 	.word	0x600ffffe

0800198c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <LCD_WR_DATA+0x1c>)
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	8053      	strh	r3, [r2, #2]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	600ffffe 	.word	0x600ffffe

080019ac <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <LCD_RD_DATA+0x20>)
 80019b4:	885b      	ldrh	r3, [r3, #2]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	80fb      	strh	r3, [r7, #6]
	return ram;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	b29b      	uxth	r3, r3
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	600ffffe 	.word	0x600ffffe

080019d0 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4604      	mov	r4, r0
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	4623      	mov	r3, r4
 80019e0:	80fb      	strh	r3, [r7, #6]
 80019e2:	4603      	mov	r3, r0
 80019e4:	80bb      	strh	r3, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	807b      	strh	r3, [r7, #2]
 80019ea:	4613      	mov	r3, r2
 80019ec:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80019ee:	202a      	movs	r0, #42	; 0x2a
 80019f0:	f7ff ffbc 	bl	800196c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ffc6 	bl	800198c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ffc0 	bl	800198c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ffba 	bl	800198c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001a18:	887b      	ldrh	r3, [r7, #2]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ffb4 	bl	800198c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001a24:	202b      	movs	r0, #43	; 0x2b
 8001a26:	f7ff ffa1 	bl	800196c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001a2a:	88bb      	ldrh	r3, [r7, #4]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ffab 	bl	800198c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001a36:	88bb      	ldrh	r3, [r7, #4]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ffa5 	bl	800198c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001a42:	883b      	ldrh	r3, [r7, #0]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff9f 	bl	800198c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001a4e:	883b      	ldrh	r3, [r7, #0]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff99 	bl	800198c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001a5a:	202c      	movs	r0, #44	; 0x2c
 8001a5c:	f7ff ff86 	bl	800196c <LCD_WR_REG>
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd90      	pop	{r4, r7, pc}

08001a68 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <lcd_Clear+0x60>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <lcd_Clear+0x60>)
 8001a7c:	885b      	ldrh	r3, [r3, #2]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2100      	movs	r1, #0
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff ffa3 	bl	80019d0 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	81fb      	strh	r3, [r7, #14]
 8001a8e:	e011      	b.n	8001ab4 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	81bb      	strh	r3, [r7, #12]
 8001a94:	e006      	b.n	8001aa4 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff77 	bl	800198c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001a9e:	89bb      	ldrh	r3, [r7, #12]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	81bb      	strh	r3, [r7, #12]
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <lcd_Clear+0x60>)
 8001aa6:	885b      	ldrh	r3, [r3, #2]
 8001aa8:	89ba      	ldrh	r2, [r7, #12]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d3f3      	bcc.n	8001a96 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	81fb      	strh	r3, [r7, #14]
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <lcd_Clear+0x60>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	89fa      	ldrh	r2, [r7, #14]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d3e8      	bcc.n	8001a90 <lcd_Clear+0x28>
		}
	}
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000224 	.word	0x20000224

08001acc <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	80bb      	strh	r3, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001ade:	88bb      	ldrh	r3, [r7, #4]
 8001ae0:	88fa      	ldrh	r2, [r7, #6]
 8001ae2:	88b9      	ldrh	r1, [r7, #4]
 8001ae4:	88f8      	ldrh	r0, [r7, #6]
 8001ae6:	f7ff ff73 	bl	80019d0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff4d 	bl	800198c <LCD_WR_DATA>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4604      	mov	r4, r0
 8001b04:	4608      	mov	r0, r1
 8001b06:	4611      	mov	r1, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4623      	mov	r3, r4
 8001b0c:	80fb      	strh	r3, [r7, #6]
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80bb      	strh	r3, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]
 8001b16:	4613      	mov	r3, r2
 8001b18:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001b22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b26:	085b      	lsrs	r3, r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	461a      	mov	r2, r3
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bf14      	ite	ne
 8001b3e:	2301      	movne	r3, #1
 8001b40:	2300      	moveq	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	fb12 f303 	smulbb	r3, r2, r3
 8001b52:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	3b20      	subs	r3, #32
 8001b58:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	4413      	add	r3, r2
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29c      	uxth	r4, r3
 8001b68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	88b9      	ldrh	r1, [r7, #4]
 8001b7a:	88f8      	ldrh	r0, [r7, #6]
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	f7ff ff27 	bl	80019d0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	827b      	strh	r3, [r7, #18]
 8001b86:	e07a      	b.n	8001c7e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001b88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b8c:	2b0c      	cmp	r3, #12
 8001b8e:	d028      	beq.n	8001be2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001b90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b94:	2b10      	cmp	r3, #16
 8001b96:	d108      	bne.n	8001baa <lcd_ShowChar+0xae>
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	8a7b      	ldrh	r3, [r7, #18]
 8001b9c:	493c      	ldr	r1, [pc, #240]	; (8001c90 <lcd_ShowChar+0x194>)
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	440a      	add	r2, r1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	75fb      	strb	r3, [r7, #23]
 8001ba8:	e01b      	b.n	8001be2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001baa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bae:	2b18      	cmp	r3, #24
 8001bb0:	d10b      	bne.n	8001bca <lcd_ShowChar+0xce>
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	8a79      	ldrh	r1, [r7, #18]
 8001bb6:	4837      	ldr	r0, [pc, #220]	; (8001c94 <lcd_ShowChar+0x198>)
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4403      	add	r3, r0
 8001bc2:	440b      	add	r3, r1
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	75fb      	strb	r3, [r7, #23]
 8001bc8:	e00b      	b.n	8001be2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001bca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	d15a      	bne.n	8001c88 <lcd_ShowChar+0x18c>
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	8a7b      	ldrh	r3, [r7, #18]
 8001bd6:	4930      	ldr	r1, [pc, #192]	; (8001c98 <lcd_ShowChar+0x19c>)
 8001bd8:	0192      	lsls	r2, r2, #6
 8001bda:	440a      	add	r2, r1
 8001bdc:	4413      	add	r3, r2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	75bb      	strb	r3, [r7, #22]
 8001be6:	e044      	b.n	8001c72 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001be8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d120      	bne.n	8001c32 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001bf0:	7dfa      	ldrb	r2, [r7, #23]
 8001bf2:	7dbb      	ldrb	r3, [r7, #22]
 8001bf4:	fa42 f303 	asr.w	r3, r2, r3
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <lcd_ShowChar+0x10e>
 8001c00:	883b      	ldrh	r3, [r7, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fec2 	bl	800198c <LCD_WR_DATA>
 8001c08:	e003      	b.n	8001c12 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001c0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff febd 	bl	800198c <LCD_WR_DATA>
				m++;
 8001c12:	7d7b      	ldrb	r3, [r7, #21]
 8001c14:	3301      	adds	r3, #1
 8001c16:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001c18:	7d7b      	ldrb	r3, [r7, #21]
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c20:	fb02 f201 	mul.w	r2, r2, r1
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d11f      	bne.n	8001c6c <lcd_ShowChar+0x170>
				{
					m=0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	757b      	strb	r3, [r7, #21]
					break;
 8001c30:	e022      	b.n	8001c78 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001c32:	7dfa      	ldrb	r2, [r7, #23]
 8001c34:	7dbb      	ldrb	r3, [r7, #22]
 8001c36:	fa42 f303 	asr.w	r3, r2, r3
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <lcd_ShowChar+0x152>
 8001c42:	883a      	ldrh	r2, [r7, #0]
 8001c44:	88b9      	ldrh	r1, [r7, #4]
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff3f 	bl	8001acc <lcd_DrawPoint>
				x++;
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	3301      	adds	r3, #1
 8001c52:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001c54:	88fa      	ldrh	r2, [r7, #6]
 8001c56:	8a3b      	ldrh	r3, [r7, #16]
 8001c58:	1ad2      	subs	r2, r2, r3
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d105      	bne.n	8001c6c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001c60:	8a3b      	ldrh	r3, [r7, #16]
 8001c62:	80fb      	strh	r3, [r7, #6]
					y++;
 8001c64:	88bb      	ldrh	r3, [r7, #4]
 8001c66:	3301      	adds	r3, #1
 8001c68:	80bb      	strh	r3, [r7, #4]
					break;
 8001c6a:	e005      	b.n	8001c78 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001c6c:	7dbb      	ldrb	r3, [r7, #22]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	75bb      	strb	r3, [r7, #22]
 8001c72:	7dbb      	ldrb	r3, [r7, #22]
 8001c74:	2b07      	cmp	r3, #7
 8001c76:	d9b7      	bls.n	8001be8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001c78:	8a7b      	ldrh	r3, [r7, #18]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	827b      	strh	r3, [r7, #18]
 8001c7e:	8a7a      	ldrh	r2, [r7, #18]
 8001c80:	89bb      	ldrh	r3, [r7, #12]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d380      	bcc.n	8001b88 <lcd_ShowChar+0x8c>
 8001c86:	e000      	b.n	8001c8a <lcd_ShowChar+0x18e>
		else return;
 8001c88:	bf00      	nop
				}
			}
		}
	}
}
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd90      	pop	{r4, r7, pc}
 8001c90:	080089ec 	.word	0x080089ec
 8001c94:	08008fdc 	.word	0x08008fdc
 8001c98:	0800a1ac 	.word	0x0800a1ac

08001c9c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	460a      	mov	r2, r1
 8001ca6:	71fb      	strb	r3, [r7, #7]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001cb0:	e004      	b.n	8001cbc <mypow+0x20>
 8001cb2:	79fa      	ldrb	r2, [r7, #7]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	fb02 f303 	mul.w	r3, r2, r3
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	79bb      	ldrb	r3, [r7, #6]
 8001cbe:	1e5a      	subs	r2, r3, #1
 8001cc0:	71ba      	strb	r2, [r7, #6]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f5      	bne.n	8001cb2 <mypow+0x16>
	return result;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af04      	add	r7, sp, #16
 8001cda:	4604      	mov	r4, r0
 8001cdc:	4608      	mov	r0, r1
 8001cde:	4611      	mov	r1, r2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4623      	mov	r3, r4
 8001ce4:	80fb      	strh	r3, [r7, #6]
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80bb      	strh	r3, [r7, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	807b      	strh	r3, [r7, #2]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001cf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	e059      	b.n	8001db8 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001d04:	887c      	ldrh	r4, [r7, #2]
 8001d06:	787a      	ldrb	r2, [r7, #1]
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4619      	mov	r1, r3
 8001d14:	200a      	movs	r0, #10
 8001d16:	f7ff ffc1 	bl	8001c9c <mypow>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	fbb4 f1f3 	udiv	r1, r4, r3
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <lcd_ShowIntNum+0xf8>)
 8001d22:	fba3 2301 	umull	r2, r3, r3, r1
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	1aca      	subs	r2, r1, r3
 8001d32:	4613      	mov	r3, r2
 8001d34:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001d36:	7bbb      	ldrb	r3, [r7, #14]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d121      	bne.n	8001d80 <lcd_ShowIntNum+0xac>
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	787b      	ldrb	r3, [r7, #1]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	429a      	cmp	r2, r3
 8001d44:	da1c      	bge.n	8001d80 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001d46:	7b3b      	ldrb	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d117      	bne.n	8001d7c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	7b7b      	ldrb	r3, [r7, #13]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	fb12 f303 	smulbb	r3, r2, r3
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b298      	uxth	r0, r3
 8001d60:	8c3a      	ldrh	r2, [r7, #32]
 8001d62:	88b9      	ldrh	r1, [r7, #4]
 8001d64:	2300      	movs	r3, #0
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	4613      	mov	r3, r2
 8001d74:	2220      	movs	r2, #32
 8001d76:	f7ff fec1 	bl	8001afc <lcd_ShowChar>
				continue;
 8001d7a:	e01a      	b.n	8001db2 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	7b7b      	ldrb	r3, [r7, #13]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	fb12 f303 	smulbb	r3, r2, r3
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	4413      	add	r3, r2
 8001d92:	b298      	uxth	r0, r3
 8001d94:	7b3b      	ldrb	r3, [r7, #12]
 8001d96:	3330      	adds	r3, #48	; 0x30
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	8c3c      	ldrh	r4, [r7, #32]
 8001d9c:	88b9      	ldrh	r1, [r7, #4]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9302      	str	r3, [sp, #8]
 8001da2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	4623      	mov	r3, r4
 8001dae:	f7ff fea5 	bl	8001afc <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	3301      	adds	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	787b      	ldrb	r3, [r7, #1]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d3a1      	bcc.n	8001d04 <lcd_ShowIntNum+0x30>
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd90      	pop	{r4, r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	cccccccd 	.word	0xcccccccd

08001dd0 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b08b      	sub	sp, #44	; 0x2c
 8001dd4:	af04      	add	r7, sp, #16
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	4608      	mov	r0, r1
 8001dda:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dde:	4611      	mov	r1, r2
 8001de0:	461a      	mov	r2, r3
 8001de2:	4623      	mov	r3, r4
 8001de4:	81fb      	strh	r3, [r7, #14]
 8001de6:	4603      	mov	r3, r0
 8001de8:	81bb      	strh	r3, [r7, #12]
 8001dea:	460b      	mov	r3, r1
 8001dec:	71fb      	strb	r3, [r7, #7]
 8001dee:	4613      	mov	r3, r2
 8001df0:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001df2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001dfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dfe:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001ed8 <lcd_ShowFloatNum+0x108>
 8001e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e0a:	ee17 3a90 	vmov	r3, s15
 8001e0e:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	75fb      	strb	r3, [r7, #23]
 8001e14:	e057      	b.n	8001ec6 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001e16:	8abc      	ldrh	r4, [r7, #20]
 8001e18:	79fa      	ldrb	r2, [r7, #7]
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4619      	mov	r1, r3
 8001e26:	200a      	movs	r0, #10
 8001e28:	f7ff ff38 	bl	8001c9c <mypow>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	fbb4 f1f3 	udiv	r1, r4, r3
 8001e32:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <lcd_ShowFloatNum+0x10c>)
 8001e34:	fba3 2301 	umull	r2, r3, r3, r1
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	1aca      	subs	r2, r1, r3
 8001e44:	4613      	mov	r3, r2
 8001e46:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001e48:	7dfa      	ldrb	r2, [r7, #23]
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	3b02      	subs	r3, #2
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d11d      	bne.n	8001e8e <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	3b02      	subs	r3, #2
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	7dbb      	ldrb	r3, [r7, #22]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	fb12 f303 	smulbb	r3, r2, r3
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	89fb      	ldrh	r3, [r7, #14]
 8001e64:	4413      	add	r3, r2
 8001e66:	b298      	uxth	r0, r3
 8001e68:	88ba      	ldrh	r2, [r7, #4]
 8001e6a:	89b9      	ldrh	r1, [r7, #12]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9302      	str	r3, [sp, #8]
 8001e70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	222e      	movs	r2, #46	; 0x2e
 8001e7e:	f7ff fe3d 	bl	8001afc <lcd_ShowChar>
			t++;
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	3301      	adds	r3, #1
 8001e86:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	7dbb      	ldrb	r3, [r7, #22]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	fb12 f303 	smulbb	r3, r2, r3
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	b298      	uxth	r0, r3
 8001ea2:	7cfb      	ldrb	r3, [r7, #19]
 8001ea4:	3330      	adds	r3, #48	; 0x30
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	88bc      	ldrh	r4, [r7, #4]
 8001eaa:	89b9      	ldrh	r1, [r7, #12]
 8001eac:	2300      	movs	r3, #0
 8001eae:	9302      	str	r3, [sp, #8]
 8001eb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	4623      	mov	r3, r4
 8001ebc:	f7ff fe1e 	bl	8001afc <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
 8001ec6:	7dfa      	ldrb	r2, [r7, #23]
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d3a3      	bcc.n	8001e16 <lcd_ShowFloatNum+0x46>
	}
}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	371c      	adds	r7, #28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd90      	pop	{r4, r7, pc}
 8001ed8:	42c80000 	.word	0x42c80000
 8001edc:	cccccccd 	.word	0xcccccccd

08001ee0 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <lcd_SetDir+0x44>)
 8001efc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f00:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <lcd_SetDir+0x44>)
 8001f04:	22f0      	movs	r2, #240	; 0xf0
 8001f06:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001f08:	e006      	b.n	8001f18 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <lcd_SetDir+0x44>)
 8001f0c:	22f0      	movs	r2, #240	; 0xf0
 8001f0e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <lcd_SetDir+0x44>)
 8001f12:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f16:	805a      	strh	r2, [r3, #2]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	20000224 	.word	0x20000224

08001f28 <lcd_init>:


void lcd_init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f32:	48aa      	ldr	r0, [pc, #680]	; (80021dc <lcd_init+0x2b4>)
 8001f34:	f002 fc50 	bl	80047d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f3c:	f001 f966 	bl	800320c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001f40:	2201      	movs	r2, #1
 8001f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f46:	48a5      	ldr	r0, [pc, #660]	; (80021dc <lcd_init+0x2b4>)
 8001f48:	f002 fc46 	bl	80047d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f50:	f001 f95c 	bl	800320c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7ff ffc3 	bl	8001ee0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001f5a:	20d3      	movs	r0, #211	; 0xd3
 8001f5c:	f7ff fd06 	bl	800196c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001f60:	f7ff fd24 	bl	80019ac <LCD_RD_DATA>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b9d      	ldr	r3, [pc, #628]	; (80021e0 <lcd_init+0x2b8>)
 8001f6a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001f6c:	f7ff fd1e 	bl	80019ac <LCD_RD_DATA>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461a      	mov	r2, r3
 8001f74:	4b9a      	ldr	r3, [pc, #616]	; (80021e0 <lcd_init+0x2b8>)
 8001f76:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001f78:	f7ff fd18 	bl	80019ac <LCD_RD_DATA>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4b97      	ldr	r3, [pc, #604]	; (80021e0 <lcd_init+0x2b8>)
 8001f82:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001f84:	4b96      	ldr	r3, [pc, #600]	; (80021e0 <lcd_init+0x2b8>)
 8001f86:	889b      	ldrh	r3, [r3, #4]
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	4b94      	ldr	r3, [pc, #592]	; (80021e0 <lcd_init+0x2b8>)
 8001f8e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001f90:	f7ff fd0c 	bl	80019ac <LCD_RD_DATA>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b91      	ldr	r3, [pc, #580]	; (80021e0 <lcd_init+0x2b8>)
 8001f9a:	889b      	ldrh	r3, [r3, #4]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	4b8f      	ldr	r3, [pc, #572]	; (80021e0 <lcd_init+0x2b8>)
 8001fa2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001fa4:	20cf      	movs	r0, #207	; 0xcf
 8001fa6:	f7ff fce1 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f7ff fcee 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001fb0:	20c1      	movs	r0, #193	; 0xc1
 8001fb2:	f7ff fceb 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001fb6:	2030      	movs	r0, #48	; 0x30
 8001fb8:	f7ff fce8 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001fbc:	20ed      	movs	r0, #237	; 0xed
 8001fbe:	f7ff fcd5 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001fc2:	2064      	movs	r0, #100	; 0x64
 8001fc4:	f7ff fce2 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f7ff fcdf 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001fce:	2012      	movs	r0, #18
 8001fd0:	f7ff fcdc 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001fd4:	2081      	movs	r0, #129	; 0x81
 8001fd6:	f7ff fcd9 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001fda:	20e8      	movs	r0, #232	; 0xe8
 8001fdc:	f7ff fcc6 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001fe0:	2085      	movs	r0, #133	; 0x85
 8001fe2:	f7ff fcd3 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001fe6:	2010      	movs	r0, #16
 8001fe8:	f7ff fcd0 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001fec:	207a      	movs	r0, #122	; 0x7a
 8001fee:	f7ff fccd 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001ff2:	20cb      	movs	r0, #203	; 0xcb
 8001ff4:	f7ff fcba 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001ff8:	2039      	movs	r0, #57	; 0x39
 8001ffa:	f7ff fcc7 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001ffe:	202c      	movs	r0, #44	; 0x2c
 8002000:	f7ff fcc4 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002004:	2000      	movs	r0, #0
 8002006:	f7ff fcc1 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800200a:	2034      	movs	r0, #52	; 0x34
 800200c:	f7ff fcbe 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002010:	2002      	movs	r0, #2
 8002012:	f7ff fcbb 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002016:	20f7      	movs	r0, #247	; 0xf7
 8002018:	f7ff fca8 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800201c:	2020      	movs	r0, #32
 800201e:	f7ff fcb5 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002022:	20ea      	movs	r0, #234	; 0xea
 8002024:	f7ff fca2 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff fcaf 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800202e:	2000      	movs	r0, #0
 8002030:	f7ff fcac 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002034:	20c0      	movs	r0, #192	; 0xc0
 8002036:	f7ff fc99 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800203a:	201b      	movs	r0, #27
 800203c:	f7ff fca6 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002040:	20c1      	movs	r0, #193	; 0xc1
 8002042:	f7ff fc93 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002046:	2001      	movs	r0, #1
 8002048:	f7ff fca0 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800204c:	20c5      	movs	r0, #197	; 0xc5
 800204e:	f7ff fc8d 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002052:	2030      	movs	r0, #48	; 0x30
 8002054:	f7ff fc9a 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002058:	2030      	movs	r0, #48	; 0x30
 800205a:	f7ff fc97 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800205e:	20c7      	movs	r0, #199	; 0xc7
 8002060:	f7ff fc84 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002064:	20b7      	movs	r0, #183	; 0xb7
 8002066:	f7ff fc91 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800206a:	2036      	movs	r0, #54	; 0x36
 800206c:	f7ff fc7e 	bl	800196c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002070:	2008      	movs	r0, #8
 8002072:	f7ff fc8b 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002076:	203a      	movs	r0, #58	; 0x3a
 8002078:	f7ff fc78 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800207c:	2055      	movs	r0, #85	; 0x55
 800207e:	f7ff fc85 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002082:	20b1      	movs	r0, #177	; 0xb1
 8002084:	f7ff fc72 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff fc7f 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800208e:	201a      	movs	r0, #26
 8002090:	f7ff fc7c 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002094:	20b6      	movs	r0, #182	; 0xb6
 8002096:	f7ff fc69 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800209a:	200a      	movs	r0, #10
 800209c:	f7ff fc76 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80020a0:	20a2      	movs	r0, #162	; 0xa2
 80020a2:	f7ff fc73 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80020a6:	20f2      	movs	r0, #242	; 0xf2
 80020a8:	f7ff fc60 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff fc6d 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80020b2:	2026      	movs	r0, #38	; 0x26
 80020b4:	f7ff fc5a 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7ff fc67 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80020be:	20e0      	movs	r0, #224	; 0xe0
 80020c0:	f7ff fc54 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80020c4:	200f      	movs	r0, #15
 80020c6:	f7ff fc61 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80020ca:	202a      	movs	r0, #42	; 0x2a
 80020cc:	f7ff fc5e 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80020d0:	2028      	movs	r0, #40	; 0x28
 80020d2:	f7ff fc5b 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80020d6:	2008      	movs	r0, #8
 80020d8:	f7ff fc58 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80020dc:	200e      	movs	r0, #14
 80020de:	f7ff fc55 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80020e2:	2008      	movs	r0, #8
 80020e4:	f7ff fc52 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80020e8:	2054      	movs	r0, #84	; 0x54
 80020ea:	f7ff fc4f 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80020ee:	20a9      	movs	r0, #169	; 0xa9
 80020f0:	f7ff fc4c 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80020f4:	2043      	movs	r0, #67	; 0x43
 80020f6:	f7ff fc49 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80020fa:	200a      	movs	r0, #10
 80020fc:	f7ff fc46 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002100:	200f      	movs	r0, #15
 8002102:	f7ff fc43 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002106:	2000      	movs	r0, #0
 8002108:	f7ff fc40 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800210c:	2000      	movs	r0, #0
 800210e:	f7ff fc3d 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002112:	2000      	movs	r0, #0
 8002114:	f7ff fc3a 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002118:	2000      	movs	r0, #0
 800211a:	f7ff fc37 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800211e:	20e1      	movs	r0, #225	; 0xe1
 8002120:	f7ff fc24 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002124:	2000      	movs	r0, #0
 8002126:	f7ff fc31 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800212a:	2015      	movs	r0, #21
 800212c:	f7ff fc2e 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002130:	2017      	movs	r0, #23
 8002132:	f7ff fc2b 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002136:	2007      	movs	r0, #7
 8002138:	f7ff fc28 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800213c:	2011      	movs	r0, #17
 800213e:	f7ff fc25 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002142:	2006      	movs	r0, #6
 8002144:	f7ff fc22 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002148:	202b      	movs	r0, #43	; 0x2b
 800214a:	f7ff fc1f 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800214e:	2056      	movs	r0, #86	; 0x56
 8002150:	f7ff fc1c 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002154:	203c      	movs	r0, #60	; 0x3c
 8002156:	f7ff fc19 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800215a:	2005      	movs	r0, #5
 800215c:	f7ff fc16 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002160:	2010      	movs	r0, #16
 8002162:	f7ff fc13 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002166:	200f      	movs	r0, #15
 8002168:	f7ff fc10 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800216c:	203f      	movs	r0, #63	; 0x3f
 800216e:	f7ff fc0d 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002172:	203f      	movs	r0, #63	; 0x3f
 8002174:	f7ff fc0a 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002178:	200f      	movs	r0, #15
 800217a:	f7ff fc07 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800217e:	202b      	movs	r0, #43	; 0x2b
 8002180:	f7ff fbf4 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff fc01 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800218a:	2000      	movs	r0, #0
 800218c:	f7ff fbfe 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002190:	2001      	movs	r0, #1
 8002192:	f7ff fbfb 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002196:	203f      	movs	r0, #63	; 0x3f
 8002198:	f7ff fbf8 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800219c:	202a      	movs	r0, #42	; 0x2a
 800219e:	f7ff fbe5 	bl	800196c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f7ff fbf2 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f7ff fbef 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7ff fbec 	bl	800198c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80021b4:	20ef      	movs	r0, #239	; 0xef
 80021b6:	f7ff fbe9 	bl	800198c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80021ba:	2011      	movs	r0, #17
 80021bc:	f7ff fbd6 	bl	800196c <LCD_WR_REG>
	HAL_Delay(120);
 80021c0:	2078      	movs	r0, #120	; 0x78
 80021c2:	f001 f823 	bl	800320c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80021c6:	2029      	movs	r0, #41	; 0x29
 80021c8:	f7ff fbd0 	bl	800196c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80021cc:	2201      	movs	r2, #1
 80021ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d2:	4804      	ldr	r0, [pc, #16]	; (80021e4 <lcd_init+0x2bc>)
 80021d4:	f002 fb00 	bl	80047d8 <HAL_GPIO_WritePin>
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40020800 	.word	0x40020800
 80021e0:	20000224 	.word	0x20000224
 80021e4:	40020000 	.word	0x40020000

080021e8 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b08b      	sub	sp, #44	; 0x2c
 80021ec:	af04      	add	r7, sp, #16
 80021ee:	60ba      	str	r2, [r7, #8]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	81fb      	strh	r3, [r7, #14]
 80021f6:	460b      	mov	r3, r1
 80021f8:	81bb      	strh	r3, [r7, #12]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80021fe:	89fb      	ldrh	r3, [r7, #14]
 8002200:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8002202:	2300      	movs	r3, #0
 8002204:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002206:	e048      	b.n	800229a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002208:	7dfb      	ldrb	r3, [r7, #23]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d145      	bne.n	800229a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800220e:	89fa      	ldrh	r2, [r7, #14]
 8002210:	4b26      	ldr	r3, [pc, #152]	; (80022ac <lcd_ShowStr+0xc4>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	1acb      	subs	r3, r1, r3
 8002220:	429a      	cmp	r2, r3
 8002222:	dc3f      	bgt.n	80022a4 <lcd_ShowStr+0xbc>
 8002224:	89ba      	ldrh	r2, [r7, #12]
 8002226:	4b21      	ldr	r3, [pc, #132]	; (80022ac <lcd_ShowStr+0xc4>)
 8002228:	885b      	ldrh	r3, [r3, #2]
 800222a:	4619      	mov	r1, r3
 800222c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002230:	1acb      	subs	r3, r1, r3
 8002232:	429a      	cmp	r2, r3
 8002234:	dc36      	bgt.n	80022a4 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b80      	cmp	r3, #128	; 0x80
 800223c:	d902      	bls.n	8002244 <lcd_ShowStr+0x5c>
 800223e:	2301      	movs	r3, #1
 8002240:	75fb      	strb	r3, [r7, #23]
 8002242:	e02a      	b.n	800229a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b0d      	cmp	r3, #13
 800224a:	d10b      	bne.n	8002264 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800224c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002250:	b29a      	uxth	r2, r3
 8002252:	89bb      	ldrh	r3, [r7, #12]
 8002254:	4413      	add	r3, r2
 8002256:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002258:	8abb      	ldrh	r3, [r7, #20]
 800225a:	81fb      	strh	r3, [r7, #14]
					str++;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3301      	adds	r3, #1
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	e017      	b.n	8002294 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	88fc      	ldrh	r4, [r7, #6]
 800226a:	89b9      	ldrh	r1, [r7, #12]
 800226c:	89f8      	ldrh	r0, [r7, #14]
 800226e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002272:	9302      	str	r3, [sp, #8]
 8002274:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	4623      	mov	r3, r4
 8002280:	f7ff fc3c 	bl	8001afc <lcd_ShowChar>
					x+=sizey/2;
 8002284:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002288:	085b      	lsrs	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	b29a      	uxth	r2, r3
 800228e:	89fb      	ldrh	r3, [r7, #14]
 8002290:	4413      	add	r3, r2
 8002292:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3301      	adds	r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1b2      	bne.n	8002208 <lcd_ShowStr+0x20>
 80022a2:	e000      	b.n	80022a6 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80022a4:	bf00      	nop
			}
		}
	}
}
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd90      	pop	{r4, r7, pc}
 80022ac:	20000224 	.word	0x20000224

080022b0 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80022b4:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <led7_Scan+0x104>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <led7_Scan+0x104>)
 80022be:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80022c0:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <led7_Scan+0x108>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a3d      	ldr	r2, [pc, #244]	; (80023bc <led7_Scan+0x10c>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	b21a      	sxth	r2, r3
 80022cc:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <led7_Scan+0x104>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	4b36      	ldr	r3, [pc, #216]	; (80023b4 <led7_Scan+0x104>)
 80022da:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <led7_Scan+0x108>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d847      	bhi.n	8002374 <led7_Scan+0xc4>
 80022e4:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <led7_Scan+0x3c>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	0800231b 	.word	0x0800231b
 80022f4:	08002339 	.word	0x08002339
 80022f8:	08002357 	.word	0x08002357
	case 0:
		spi_buffer |= 0x00b0;
 80022fc:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <led7_Scan+0x104>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002304:	b29a      	uxth	r2, r3
 8002306:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <led7_Scan+0x104>)
 8002308:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <led7_Scan+0x104>)
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002312:	b29a      	uxth	r2, r3
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <led7_Scan+0x104>)
 8002316:	801a      	strh	r2, [r3, #0]
		break;
 8002318:	e02d      	b.n	8002376 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800231a:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <led7_Scan+0x104>)
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002322:	b29a      	uxth	r2, r3
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <led7_Scan+0x104>)
 8002326:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002328:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <led7_Scan+0x104>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	f023 0320 	bic.w	r3, r3, #32
 8002330:	b29a      	uxth	r2, r3
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <led7_Scan+0x104>)
 8002334:	801a      	strh	r2, [r3, #0]
		break;
 8002336:	e01e      	b.n	8002376 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002338:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <led7_Scan+0x104>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002340:	b29a      	uxth	r2, r3
 8002342:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <led7_Scan+0x104>)
 8002344:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <led7_Scan+0x104>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	f023 0310 	bic.w	r3, r3, #16
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <led7_Scan+0x104>)
 8002352:	801a      	strh	r2, [r3, #0]
		break;
 8002354:	e00f      	b.n	8002376 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <led7_Scan+0x104>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800235e:	b29a      	uxth	r2, r3
 8002360:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <led7_Scan+0x104>)
 8002362:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <led7_Scan+0x104>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800236c:	b29a      	uxth	r2, r3
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <led7_Scan+0x104>)
 8002370:	801a      	strh	r2, [r3, #0]
		break;
 8002372:	e000      	b.n	8002376 <led7_Scan+0xc6>
	default:
		break;
 8002374:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <led7_Scan+0x108>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	425a      	negs	r2, r3
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	f002 0203 	and.w	r2, r2, #3
 8002386:	bf58      	it	pl
 8002388:	4253      	negpl	r3, r2
 800238a:	4a0b      	ldr	r2, [pc, #44]	; (80023b8 <led7_Scan+0x108>)
 800238c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2140      	movs	r1, #64	; 0x40
 8002392:	480b      	ldr	r0, [pc, #44]	; (80023c0 <led7_Scan+0x110>)
 8002394:	f002 fa20 	bl	80047d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002398:	2301      	movs	r3, #1
 800239a:	2202      	movs	r2, #2
 800239c:	4905      	ldr	r1, [pc, #20]	; (80023b4 <led7_Scan+0x104>)
 800239e:	4809      	ldr	r0, [pc, #36]	; (80023c4 <led7_Scan+0x114>)
 80023a0:	f003 f88f 	bl	80054c2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80023a4:	2201      	movs	r2, #1
 80023a6:	2140      	movs	r1, #64	; 0x40
 80023a8:	4805      	ldr	r0, [pc, #20]	; (80023c0 <led7_Scan+0x110>)
 80023aa:	f002 fa15 	bl	80047d8 <HAL_GPIO_WritePin>
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000004 	.word	0x20000004
 80023b8:	2000009c 	.word	0x2000009c
 80023bc:	20000000 	.word	0x20000000
 80023c0:	40021800 	.word	0x40021800
 80023c4:	2000026c 	.word	0x2000026c

080023c8 <lightProcess>:
 */
#include "light_control.h"

uint8_t light_status = 0;

void lightProcess(){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <lightProcess+0x58>)
 80023ce:	8b5b      	ldrh	r3, [r3, #26]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d113      	bne.n	80023fc <lightProcess+0x34>
		light_status = 1 - light_status;
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <lightProcess+0x5c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	f1c3 0301 	rsb	r3, r3, #1
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <lightProcess+0x5c>)
 80023e0:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <lightProcess+0x5c>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d104      	bne.n	80023f4 <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 80023ea:	2101      	movs	r1, #1
 80023ec:	480e      	ldr	r0, [pc, #56]	; (8002428 <lightProcess+0x60>)
 80023ee:	f000 fd25 	bl	8002e3c <uart_EspSendBytes>
 80023f2:	e003      	b.n	80023fc <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 80023f4:	2101      	movs	r1, #1
 80023f6:	480d      	ldr	r0, [pc, #52]	; (800242c <lightProcess+0x64>)
 80023f8:	f000 fd20 	bl	8002e3c <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <lightProcess+0x5c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d105      	bne.n	8002410 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 8002404:	2201      	movs	r2, #1
 8002406:	2120      	movs	r1, #32
 8002408:	4809      	ldr	r0, [pc, #36]	; (8002430 <lightProcess+0x68>)
 800240a:	f002 f9e5 	bl	80047d8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 800240e:	e004      	b.n	800241a <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	2120      	movs	r1, #32
 8002414:	4806      	ldr	r0, [pc, #24]	; (8002430 <lightProcess+0x68>)
 8002416:	f002 f9df 	bl	80047d8 <HAL_GPIO_WritePin>
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000160 	.word	0x20000160
 8002424:	200000a0 	.word	0x200000a0
 8002428:	080089c4 	.word	0x080089c4
 800242c:	080089c8 	.word	0x080089c8
 8002430:	40021000 	.word	0x40021000

08002434 <test_Esp>:

void test_Esp(){
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af04      	add	r7, sp, #16
	if(uart_EspCheck() == 0){
 800243a:	f000 fd5b 	bl	8002ef4 <uart_EspCheck>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d111      	bne.n	8002468 <test_Esp+0x34>
		lcd_ShowStr(10, 50, "ESP Unconnected", GREEN, BLACK, 24, 0);
 8002444:	2300      	movs	r3, #0
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	2318      	movs	r3, #24
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2300      	movs	r3, #0
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002454:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <test_Esp+0x54>)
 8002456:	2132      	movs	r1, #50	; 0x32
 8002458:	200a      	movs	r0, #10
 800245a:	f7ff fec5 	bl	80021e8 <lcd_ShowStr>
		uart_EspSendBytes("o", 1);
 800245e:	2101      	movs	r1, #1
 8002460:	480a      	ldr	r0, [pc, #40]	; (800248c <test_Esp+0x58>)
 8002462:	f000 fceb 	bl	8002e3c <uart_EspSendBytes>
	}
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 8002466:	e00c      	b.n	8002482 <test_Esp+0x4e>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 8002468:	2300      	movs	r3, #0
 800246a:	9302      	str	r3, [sp, #8]
 800246c:	2318      	movs	r3, #24
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	2300      	movs	r3, #0
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002478:	4a05      	ldr	r2, [pc, #20]	; (8002490 <test_Esp+0x5c>)
 800247a:	2132      	movs	r1, #50	; 0x32
 800247c:	200a      	movs	r0, #10
 800247e:	f7ff feb3 	bl	80021e8 <lcd_ShowStr>
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	080089cc 	.word	0x080089cc
 800248c:	080089dc 	.word	0x080089dc
 8002490:	080089e0 	.word	0x080089e0

08002494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002498:	f000 fe46 	bl	8003128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800249c:	f000 f82c 	bl	80024f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024a0:	f7ff f8b4 	bl	800160c <MX_GPIO_Init>
  MX_TIM2_Init();
 80024a4:	f000 fb8e 	bl	8002bc4 <MX_TIM2_Init>
  MX_SPI1_Init();
 80024a8:	f000 f9fc 	bl	80028a4 <MX_SPI1_Init>
  MX_FSMC_Init();
 80024ac:	f7fe ffde 	bl	800146c <MX_FSMC_Init>
  MX_I2C1_Init();
 80024b0:	f7ff f9e6 	bl	8001880 <MX_I2C1_Init>
  MX_TIM13_Init();
 80024b4:	f000 fbd2 	bl	8002c5c <MX_TIM13_Init>
  MX_DMA_Init();
 80024b8:	f7fe ffb8 	bl	800142c <MX_DMA_Init>
  MX_ADC1_Init();
 80024bc:	f7fe fe20 	bl	8001100 <MX_ADC1_Init>
  MX_TIM1_Init();
 80024c0:	f000 fb30 	bl	8002b24 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80024c4:	f000 fd50 	bl	8002f68 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80024c8:	f000 fd24 	bl	8002f14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80024cc:	f000 f87e 	bl	80025cc <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7ff fac9 	bl	8001a68 <lcd_Clear>
 while (1)
  {
	  // 50ms task
	  if(flag_timer2 == 1){
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <main+0x60>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d1fb      	bne.n	80024d6 <main+0x42>
		  flag_timer2 = 0;
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <main+0x60>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	801a      	strh	r2, [r3, #0]
		  button_Scan();
 80024e4:	f7fe ff36 	bl	8001354 <button_Scan>
		  test_Adc();
 80024e8:	f7fe fc64 	bl	8000db4 <test_Adc>
		  test_LedDebug();
 80024ec:	f000 f87e 	bl	80025ec <test_LedDebug>
	  if(flag_timer2 == 1){
 80024f0:	e7f1      	b.n	80024d6 <main+0x42>
 80024f2:	bf00      	nop
 80024f4:	200000a2 	.word	0x200000a2

080024f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b094      	sub	sp, #80	; 0x50
 80024fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fe:	f107 0320 	add.w	r3, r7, #32
 8002502:	2230      	movs	r2, #48	; 0x30
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f005 fdb6 	bl	8008078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <SystemClock_Config+0xcc>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <SystemClock_Config+0xcc>)
 8002526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252a:	6413      	str	r3, [r2, #64]	; 0x40
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <SystemClock_Config+0xcc>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <SystemClock_Config+0xd0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <SystemClock_Config+0xd0>)
 8002542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <SystemClock_Config+0xd0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002554:	2302      	movs	r3, #2
 8002556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002558:	2301      	movs	r3, #1
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800255c:	2310      	movs	r3, #16
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002560:	2302      	movs	r3, #2
 8002562:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002564:	2300      	movs	r3, #0
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002568:	2308      	movs	r3, #8
 800256a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800256c:	23a8      	movs	r3, #168	; 0xa8
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002570:	2302      	movs	r3, #2
 8002572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002574:	2304      	movs	r3, #4
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002578:	f107 0320 	add.w	r3, r7, #32
 800257c:	4618      	mov	r0, r3
 800257e:	f002 faa3 	bl	8004ac8 <HAL_RCC_OscConfig>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002588:	f000 f854 	bl	8002634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800258c:	230f      	movs	r3, #15
 800258e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002590:	2302      	movs	r3, #2
 8002592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002598:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800259c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800259e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	2105      	movs	r1, #5
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 fd04 	bl	8004fb8 <HAL_RCC_ClockConfig>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80025b6:	f000 f83d 	bl	8002634 <Error_Handler>
  }
}
 80025ba:	bf00      	nop
 80025bc:	3750      	adds	r7, #80	; 0x50
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40007000 	.word	0x40007000

080025cc <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
	  timer_init();
 80025d0:	f000 f914 	bl	80027fc <timer_init>
	  button_init();
 80025d4:	f7fe feb2 	bl	800133c <button_init>
	  lcd_init();
 80025d8:	f7ff fca6 	bl	8001f28 <lcd_init>
	  uart_init_esp();
 80025dc:	f000 fc18 	bl	8002e10 <uart_init_esp>
	  setTimer2(50);
 80025e0:	2032      	movs	r0, #50	; 0x32
 80025e2:	f000 f919 	bl	8002818 <setTimer2>
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <test_LedDebug+0x3c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <test_LedDebug+0x40>)
 80025f8:	fb83 1302 	smull	r1, r3, r3, r2
 80025fc:	10d9      	asrs	r1, r3, #3
 80025fe:	17d3      	asrs	r3, r2, #31
 8002600:	1ac9      	subs	r1, r1, r3
 8002602:	460b      	mov	r3, r1
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	1ad1      	subs	r1, r2, r3
 800260c:	b2ca      	uxtb	r2, r1
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <test_LedDebug+0x3c>)
 8002610:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <test_LedDebug+0x3c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d103      	bne.n	8002622 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800261a:	2110      	movs	r1, #16
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <test_LedDebug+0x44>)
 800261e:	f002 f8f4 	bl	800480a <HAL_GPIO_TogglePin>
	}
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200000a1 	.word	0x200000a1
 800262c:	66666667 	.word	0x66666667
 8002630:	40021000 	.word	0x40021000

08002634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002638:	b672      	cpsid	i
}
 800263a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800263c:	e7fe      	b.n	800263c <Error_Handler+0x8>
	...

08002640 <sensor_Read>:

void sensor_init(){
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}

void sensor_Read(){
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002644:	2205      	movs	r2, #5
 8002646:	4903      	ldr	r1, [pc, #12]	; (8002654 <sensor_Read+0x14>)
 8002648:	4803      	ldr	r0, [pc, #12]	; (8002658 <sensor_Read+0x18>)
 800264a:	f000 fe47 	bl	80032dc <HAL_ADC_Start_DMA>
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000260 	.word	0x20000260
 8002658:	200000b8 	.word	0x200000b8

0800265c <sensor_GetLight>:

uint16_t sensor_GetLight(){
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <sensor_GetLight+0x14>)
 8002662:	889b      	ldrh	r3, [r3, #4]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000260 	.word	0x20000260

08002674 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <sensor_GetPotentiometer+0x14>)
 800267a:	88db      	ldrh	r3, [r3, #6]
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000260 	.word	0x20000260
 800268c:	00000000 	.word	0x00000000

08002690 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <sensor_GetVoltage+0x70>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	ee07 3a90 	vmov	s15, r3
 800269c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a0:	ee17 0a90 	vmov	r0, s15
 80026a4:	f7fd ff50 	bl	8000548 <__aeabi_f2d>
 80026a8:	a311      	add	r3, pc, #68	; (adr r3, 80026f0 <sensor_GetVoltage+0x60>)
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	f7fd ffa3 	bl	80005f8 <__aeabi_dmul>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <sensor_GetVoltage+0x74>)
 80026c0:	f7fd ff9a 	bl	80005f8 <__aeabi_dmul>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	a30a      	add	r3, pc, #40	; (adr r3, 80026f8 <sensor_GetVoltage+0x68>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	f7fe f8bb 	bl	800084c <__aeabi_ddiv>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4610      	mov	r0, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	f7fe f99d 	bl	8000a1c <__aeabi_d2f>
 80026e2:	4603      	mov	r3, r0
 80026e4:	ee07 3a90 	vmov	s15, r3
}
 80026e8:	eeb0 0a67 	vmov.f32	s0, s15
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	66666666 	.word	0x66666666
 80026f4:	400a6666 	.word	0x400a6666
 80026f8:	cccccccd 	.word	0xcccccccd
 80026fc:	40b908ac 	.word	0x40b908ac
 8002700:	20000260 	.word	0x20000260
 8002704:	40280000 	.word	0x40280000

08002708 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 800270c:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <sensor_GetCurrent+0xa8>)
 800270e:	885b      	ldrh	r3, [r3, #2]
 8002710:	ee07 3a90 	vmov	s15, r3
 8002714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002718:	ee17 0a90 	vmov	r0, s15
 800271c:	f7fd ff14 	bl	8000548 <__aeabi_f2d>
 8002720:	a31f      	add	r3, pc, #124	; (adr r3, 80027a0 <sensor_GetCurrent+0x98>)
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	f7fd ff67 	bl	80005f8 <__aeabi_dmul>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <sensor_GetCurrent+0xac>)
 8002738:	f7fd ff5e 	bl	80005f8 <__aeabi_dmul>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	a318      	add	r3, pc, #96	; (adr r3, 80027a8 <sensor_GetCurrent+0xa0>)
 8002746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274a:	f7fe f87f 	bl	800084c <__aeabi_ddiv>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <sensor_GetCurrent+0xb0>)
 800275c:	f7fd fd94 	bl	8000288 <__aeabi_dsub>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <sensor_GetCurrent+0xb4>)
 800276e:	f7fd ff43 	bl	80005f8 <__aeabi_dmul>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <sensor_GetCurrent+0xb0>)
 8002780:	f7fe f864 	bl	800084c <__aeabi_ddiv>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	f7fe f946 	bl	8000a1c <__aeabi_d2f>
 8002790:	4603      	mov	r3, r0
 8002792:	ee07 3a90 	vmov	s15, r3
}
 8002796:	eeb0 0a67 	vmov.f32	s0, s15
 800279a:	bd80      	pop	{r7, pc}
 800279c:	f3af 8000 	nop.w
 80027a0:	66666666 	.word	0x66666666
 80027a4:	400a6666 	.word	0x400a6666
 80027a8:	147ae148 	.word	0x147ae148
 80027ac:	40a4b2ee 	.word	0x40a4b2ee
 80027b0:	20000260 	.word	0x20000260
 80027b4:	408f4000 	.word	0x408f4000
 80027b8:	40040000 	.word	0x40040000
 80027bc:	40140000 	.word	0x40140000

080027c0 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <sensor_GetTemperature+0x30>)
 80027c6:	891b      	ldrh	r3, [r3, #8]
 80027c8:	ee07 3a90 	vmov	s15, r3
 80027cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027d0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80027f4 <sensor_GetTemperature+0x34>
 80027d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027d8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80027f8 <sensor_GetTemperature+0x38>
 80027dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027e0:	eef0 7a66 	vmov.f32	s15, s13
}
 80027e4:	eeb0 0a67 	vmov.f32	s0, s15
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	20000260 	.word	0x20000260
 80027f4:	43a50000 	.word	0x43a50000
 80027f8:	457ff000 	.word	0x457ff000

080027fc <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002800:	4803      	ldr	r0, [pc, #12]	; (8002810 <timer_init+0x14>)
 8002802:	f003 fc79 	bl	80060f8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002806:	4803      	ldr	r0, [pc, #12]	; (8002814 <timer_init+0x18>)
 8002808:	f003 fc0e 	bl	8006028 <HAL_TIM_Base_Start>
}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000354 	.word	0x20000354
 8002814:	2000030c 	.word	0x2000030c

08002818 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002822:	4a08      	ldr	r2, [pc, #32]	; (8002844 <setTimer2+0x2c>)
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <setTimer2+0x2c>)
 800282a:	881a      	ldrh	r2, [r3, #0]
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <setTimer2+0x30>)
 800282e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <setTimer2+0x34>)
 8002832:	2200      	movs	r2, #0
 8002834:	801a      	strh	r2, [r3, #0]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	200000a6 	.word	0x200000a6
 8002848:	200000a4 	.word	0x200000a4
 800284c:	200000a2 	.word	0x200000a2

08002850 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002860:	d116      	bne.n	8002890 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d010      	beq.n	800288c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002874:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002880:	2201      	movs	r2, #1
 8002882:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002886:	881a      	ldrh	r2, [r3, #0]
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800288a:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 800288c:	f7ff fd10 	bl	80022b0 <led7_Scan>
	}
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200000a4 	.word	0x200000a4
 800289c:	200000a2 	.word	0x200000a2
 80028a0:	200000a6 	.word	0x200000a6

080028a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80028a8:	4b17      	ldr	r3, [pc, #92]	; (8002908 <MX_SPI1_Init+0x64>)
 80028aa:	4a18      	ldr	r2, [pc, #96]	; (800290c <MX_SPI1_Init+0x68>)
 80028ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <MX_SPI1_Init+0x64>)
 80028b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <MX_SPI1_Init+0x64>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <MX_SPI1_Init+0x64>)
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <MX_SPI1_Init+0x64>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028c8:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <MX_SPI1_Init+0x64>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028ce:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <MX_SPI1_Init+0x64>)
 80028d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <MX_SPI1_Init+0x64>)
 80028d8:	2200      	movs	r2, #0
 80028da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <MX_SPI1_Init+0x64>)
 80028de:	2200      	movs	r2, #0
 80028e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <MX_SPI1_Init+0x64>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <MX_SPI1_Init+0x64>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <MX_SPI1_Init+0x64>)
 80028f0:	220a      	movs	r2, #10
 80028f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028f4:	4804      	ldr	r0, [pc, #16]	; (8002908 <MX_SPI1_Init+0x64>)
 80028f6:	f002 fd5b 	bl	80053b0 <HAL_SPI_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002900:	f7ff fe98 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}
 8002908:	2000026c 	.word	0x2000026c
 800290c:	40013000 	.word	0x40013000

08002910 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <HAL_SPI_MspInit+0x84>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d12b      	bne.n	800298a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	4b18      	ldr	r3, [pc, #96]	; (8002998 <HAL_SPI_MspInit+0x88>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <HAL_SPI_MspInit+0x88>)
 800293c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002940:	6453      	str	r3, [r2, #68]	; 0x44
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <HAL_SPI_MspInit+0x88>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_SPI_MspInit+0x88>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a10      	ldr	r2, [pc, #64]	; (8002998 <HAL_SPI_MspInit+0x88>)
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <HAL_SPI_MspInit+0x88>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800296a:	2338      	movs	r3, #56	; 0x38
 800296c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	2302      	movs	r3, #2
 8002970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002976:	2303      	movs	r3, #3
 8002978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800297a:	2305      	movs	r3, #5
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297e:	f107 0314 	add.w	r3, r7, #20
 8002982:	4619      	mov	r1, r3
 8002984:	4805      	ldr	r0, [pc, #20]	; (800299c <HAL_SPI_MspInit+0x8c>)
 8002986:	f001 fd8b 	bl	80044a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800298a:	bf00      	nop
 800298c:	3728      	adds	r7, #40	; 0x28
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40013000 	.word	0x40013000
 8002998:	40023800 	.word	0x40023800
 800299c:	40020400 	.word	0x40020400

080029a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <HAL_MspInit+0x4c>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <HAL_MspInit+0x4c>)
 80029b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <HAL_MspInit+0x4c>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_MspInit+0x4c>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a08      	ldr	r2, [pc, #32]	; (80029ec <HAL_MspInit+0x4c>)
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_MspInit+0x4c>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800

080029f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029f4:	e7fe      	b.n	80029f4 <NMI_Handler+0x4>

080029f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029fa:	e7fe      	b.n	80029fa <HardFault_Handler+0x4>

080029fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a00:	e7fe      	b.n	8002a00 <MemManage_Handler+0x4>

08002a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a06:	e7fe      	b.n	8002a06 <BusFault_Handler+0x4>

08002a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a0c:	e7fe      	b.n	8002a0c <UsageFault_Handler+0x4>

08002a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a3c:	f000 fbc6 	bl	80031cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <TIM2_IRQHandler+0x10>)
 8002a4a:	f003 fc1e 	bl	800628a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000354 	.word	0x20000354

08002a58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <USART1_IRQHandler+0x10>)
 8002a5e:	f004 fb59 	bl	8007114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	2000039c 	.word	0x2000039c

08002a6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a70:	4802      	ldr	r0, [pc, #8]	; (8002a7c <USART2_IRQHandler+0x10>)
 8002a72:	f004 fb4f 	bl	8007114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200003e0 	.word	0x200003e0

08002a80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <DMA2_Stream0_IRQHandler+0x10>)
 8002a86:	f001 faa1 	bl	8003fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000100 	.word	0x20000100

08002a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a9c:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <_sbrk+0x5c>)
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <_sbrk+0x60>)
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <_sbrk+0x64>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <_sbrk+0x64>)
 8002ab2:	4a12      	ldr	r2, [pc, #72]	; (8002afc <_sbrk+0x68>)
 8002ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <_sbrk+0x64>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d207      	bcs.n	8002ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ac4:	f005 faae 	bl	8008024 <__errno>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	220c      	movs	r2, #12
 8002acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad2:	e009      	b.n	8002ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <_sbrk+0x64>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <_sbrk+0x64>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	4a05      	ldr	r2, [pc, #20]	; (8002af8 <_sbrk+0x64>)
 8002ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20020000 	.word	0x20020000
 8002af4:	00000400 	.word	0x00000400
 8002af8:	200000a8 	.word	0x200000a8
 8002afc:	20000438 	.word	0x20000438

08002b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <SystemInit+0x20>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <SystemInit+0x20>)
 8002b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2a:	f107 0308 	add.w	r3, r7, #8
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b38:	463b      	mov	r3, r7
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <MX_TIM1_Init+0x98>)
 8002b42:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <MX_TIM1_Init+0x9c>)
 8002b44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <MX_TIM1_Init+0x98>)
 8002b48:	2253      	movs	r2, #83	; 0x53
 8002b4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <MX_TIM1_Init+0x98>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <MX_TIM1_Init+0x98>)
 8002b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5a:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <MX_TIM1_Init+0x98>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b60:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <MX_TIM1_Init+0x98>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <MX_TIM1_Init+0x98>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b6c:	4813      	ldr	r0, [pc, #76]	; (8002bbc <MX_TIM1_Init+0x98>)
 8002b6e:	f003 fa0b 	bl	8005f88 <HAL_TIM_Base_Init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002b78:	f7ff fd5c 	bl	8002634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b82:	f107 0308 	add.w	r3, r7, #8
 8002b86:	4619      	mov	r1, r3
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <MX_TIM1_Init+0x98>)
 8002b8a:	f003 fd49 	bl	8006620 <HAL_TIM_ConfigClockSource>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002b94:	f7ff fd4e 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ba0:	463b      	mov	r3, r7
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4805      	ldr	r0, [pc, #20]	; (8002bbc <MX_TIM1_Init+0x98>)
 8002ba6:	f004 f915 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002bb0:	f7ff fd40 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002bb4:	bf00      	nop
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	2000030c 	.word	0x2000030c
 8002bc0:	40010000 	.word	0x40010000

08002bc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bca:	f107 0308 	add.w	r3, r7, #8
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd8:	463b      	mov	r3, r7
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002be0:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002be2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002be6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002bea:	f240 3247 	movw	r2, #839	; 0x347
 8002bee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002bf6:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002bf8:	2263      	movs	r2, #99	; 0x63
 8002bfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c08:	4813      	ldr	r0, [pc, #76]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002c0a:	f003 f9bd 	bl	8005f88 <HAL_TIM_Base_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002c14:	f7ff fd0e 	bl	8002634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c1e:	f107 0308 	add.w	r3, r7, #8
 8002c22:	4619      	mov	r1, r3
 8002c24:	480c      	ldr	r0, [pc, #48]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002c26:	f003 fcfb 	bl	8006620 <HAL_TIM_ConfigClockSource>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c30:	f7ff fd00 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c34:	2300      	movs	r3, #0
 8002c36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c3c:	463b      	mov	r3, r7
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4805      	ldr	r0, [pc, #20]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002c42:	f004 f8c7 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c4c:	f7ff fcf2 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c50:	bf00      	nop
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000354 	.word	0x20000354

08002c5c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
 8002c70:	615a      	str	r2, [r3, #20]
 8002c72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002c74:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <MX_TIM13_Init+0x94>)
 8002c76:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <MX_TIM13_Init+0x98>)
 8002c78:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <MX_TIM13_Init+0x94>)
 8002c7c:	f240 3247 	movw	r2, #839	; 0x347
 8002c80:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <MX_TIM13_Init+0x94>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <MX_TIM13_Init+0x94>)
 8002c8a:	2263      	movs	r2, #99	; 0x63
 8002c8c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <MX_TIM13_Init+0x94>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <MX_TIM13_Init+0x94>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002c9a:	4815      	ldr	r0, [pc, #84]	; (8002cf0 <MX_TIM13_Init+0x94>)
 8002c9c:	f003 f974 	bl	8005f88 <HAL_TIM_Base_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002ca6:	f7ff fcc5 	bl	8002634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002caa:	4811      	ldr	r0, [pc, #68]	; (8002cf0 <MX_TIM13_Init+0x94>)
 8002cac:	f003 fa94 	bl	80061d8 <HAL_TIM_PWM_Init>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002cb6:	f7ff fcbd 	bl	8002634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cba:	2360      	movs	r3, #96	; 0x60
 8002cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4807      	ldr	r0, [pc, #28]	; (8002cf0 <MX_TIM13_Init+0x94>)
 8002cd2:	f003 fbe3 	bl	800649c <HAL_TIM_PWM_ConfigChannel>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002cdc:	f7ff fcaa 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002ce0:	4803      	ldr	r0, [pc, #12]	; (8002cf0 <MX_TIM13_Init+0x94>)
 8002ce2:	f000 f85b 	bl	8002d9c <HAL_TIM_MspPostInit>

}
 8002ce6:	bf00      	nop
 8002ce8:	3720      	adds	r7, #32
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200002c4 	.word	0x200002c4
 8002cf4:	40001c00 	.word	0x40001c00

08002cf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <HAL_TIM_Base_MspInit+0x98>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10e      	bne.n	8002d28 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_TIM_Base_MspInit+0x9c>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <HAL_TIM_Base_MspInit+0x9c>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <HAL_TIM_Base_MspInit+0x9c>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002d26:	e02e      	b.n	8002d86 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d30:	d116      	bne.n	8002d60 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_TIM_Base_MspInit+0x9c>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a16      	ldr	r2, [pc, #88]	; (8002d94 <HAL_TIM_Base_MspInit+0x9c>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_TIM_Base_MspInit+0x9c>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	201c      	movs	r0, #28
 8002d54:	f000 ff6b 	bl	8003c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d58:	201c      	movs	r0, #28
 8002d5a:	f000 ff84 	bl	8003c66 <HAL_NVIC_EnableIRQ>
}
 8002d5e:	e012      	b.n	8002d86 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0c      	ldr	r2, [pc, #48]	; (8002d98 <HAL_TIM_Base_MspInit+0xa0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d10d      	bne.n	8002d86 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_TIM_Base_MspInit+0x9c>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a08      	ldr	r2, [pc, #32]	; (8002d94 <HAL_TIM_Base_MspInit+0x9c>)
 8002d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_TIM_Base_MspInit+0x9c>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
}
 8002d86:	bf00      	nop
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40010000 	.word	0x40010000
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40001c00 	.word	0x40001c00

08002d9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <HAL_TIM_MspPostInit+0x68>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d11e      	bne.n	8002dfc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HAL_TIM_MspPostInit+0x6c>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <HAL_TIM_MspPostInit+0x6c>)
 8002dc8:	f043 0320 	orr.w	r3, r3, #32
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_TIM_MspPostInit+0x6c>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002dec:	2309      	movs	r3, #9
 8002dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002df0:	f107 030c 	add.w	r3, r7, #12
 8002df4:	4619      	mov	r1, r3
 8002df6:	4805      	ldr	r0, [pc, #20]	; (8002e0c <HAL_TIM_MspPostInit+0x70>)
 8002df8:	f001 fb52 	bl	80044a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002dfc:	bf00      	nop
 8002dfe:	3720      	adds	r7, #32
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40001c00 	.word	0x40001c00
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40021400 	.word	0x40021400

08002e10 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002e14:	2201      	movs	r2, #1
 8002e16:	4906      	ldr	r1, [pc, #24]	; (8002e30 <uart_init_esp+0x20>)
 8002e18:	4806      	ldr	r0, [pc, #24]	; (8002e34 <uart_init_esp+0x24>)
 8002e1a:	f004 f94a 	bl	80070b2 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <uart_init_esp+0x28>)
 8002e26:	f001 fcd7 	bl	80047d8 <HAL_GPIO_WritePin>
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200000ad 	.word	0x200000ad
 8002e34:	200003e0 	.word	0x200003e0
 8002e38:	40021400 	.word	0x40021400

08002e3c <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8002e48:	887a      	ldrh	r2, [r7, #2]
 8002e4a:	230a      	movs	r3, #10
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4803      	ldr	r0, [pc, #12]	; (8002e5c <uart_EspSendBytes+0x20>)
 8002e50:	f004 f89d 	bl	8006f8e <HAL_UART_Transmit>
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	200003e0 	.word	0x200003e0

08002e60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <HAL_UART_RxCpltCallback+0x74>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d10a      	bne.n	8002e88 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002e72:	230a      	movs	r3, #10
 8002e74:	2201      	movs	r2, #1
 8002e76:	4918      	ldr	r1, [pc, #96]	; (8002ed8 <HAL_UART_RxCpltCallback+0x78>)
 8002e78:	4818      	ldr	r0, [pc, #96]	; (8002edc <HAL_UART_RxCpltCallback+0x7c>)
 8002e7a:	f004 f888 	bl	8006f8e <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4915      	ldr	r1, [pc, #84]	; (8002ed8 <HAL_UART_RxCpltCallback+0x78>)
 8002e82:	4816      	ldr	r0, [pc, #88]	; (8002edc <HAL_UART_RxCpltCallback+0x7c>)
 8002e84:	f004 f915 	bl	80070b2 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <HAL_UART_RxCpltCallback+0x80>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d11b      	bne.n	8002eca <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2) check_esp = 1;
 8002e92:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <HAL_UART_RxCpltCallback+0x84>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_UART_RxCpltCallback+0x42>
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_UART_RxCpltCallback+0x88>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e00e      	b.n	8002ec0 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_UART_RxCpltCallback+0x84>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b61      	cmp	r3, #97	; 0x61
 8002ea8:	d103      	bne.n	8002eb2 <HAL_UART_RxCpltCallback+0x52>
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_UART_RxCpltCallback+0x8c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e006      	b.n	8002ec0 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_UART_RxCpltCallback+0x84>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b41      	cmp	r3, #65	; 0x41
 8002eb8:	d102      	bne.n	8002ec0 <HAL_UART_RxCpltCallback+0x60>
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_UART_RxCpltCallback+0x8c>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4908      	ldr	r1, [pc, #32]	; (8002ee4 <HAL_UART_RxCpltCallback+0x84>)
 8002ec4:	480a      	ldr	r0, [pc, #40]	; (8002ef0 <HAL_UART_RxCpltCallback+0x90>)
 8002ec6:	f004 f8f4 	bl	80070b2 <HAL_UART_Receive_IT>
	}
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40011000 	.word	0x40011000
 8002ed8:	200000ac 	.word	0x200000ac
 8002edc:	2000039c 	.word	0x2000039c
 8002ee0:	40004400 	.word	0x40004400
 8002ee4:	200000ad 	.word	0x200000ad
 8002ee8:	200000ae 	.word	0x200000ae
 8002eec:	200000a0 	.word	0x200000a0
 8002ef0:	200003e0 	.word	0x200003e0

08002ef4 <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <uart_EspCheck+0x1c>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <uart_EspCheck+0x10>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <uart_EspCheck+0x12>
	return 0;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	200000ae 	.word	0x200000ae

08002f14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <MX_USART1_UART_Init+0x4c>)
 8002f1a:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <MX_USART1_UART_Init+0x50>)
 8002f1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <MX_USART1_UART_Init+0x4c>)
 8002f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <MX_USART1_UART_Init+0x4c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <MX_USART1_UART_Init+0x4c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <MX_USART1_UART_Init+0x4c>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <MX_USART1_UART_Init+0x4c>)
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <MX_USART1_UART_Init+0x4c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <MX_USART1_UART_Init+0x4c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f4a:	4805      	ldr	r0, [pc, #20]	; (8002f60 <MX_USART1_UART_Init+0x4c>)
 8002f4c:	f003 ffd2 	bl	8006ef4 <HAL_UART_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f56:	f7ff fb6d 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	2000039c 	.word	0x2000039c
 8002f64:	40011000 	.word	0x40011000

08002f68 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <MX_USART2_UART_Init+0x4c>)
 8002f6e:	4a12      	ldr	r2, [pc, #72]	; (8002fb8 <MX_USART2_UART_Init+0x50>)
 8002f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <MX_USART2_UART_Init+0x4c>)
 8002f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <MX_USART2_UART_Init+0x4c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <MX_USART2_UART_Init+0x4c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <MX_USART2_UART_Init+0x4c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <MX_USART2_UART_Init+0x4c>)
 8002f8e:	220c      	movs	r2, #12
 8002f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <MX_USART2_UART_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <MX_USART2_UART_Init+0x4c>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f9e:	4805      	ldr	r0, [pc, #20]	; (8002fb4 <MX_USART2_UART_Init+0x4c>)
 8002fa0:	f003 ffa8 	bl	8006ef4 <HAL_UART_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002faa:	f7ff fb43 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	200003e0 	.word	0x200003e0
 8002fb8:	40004400 	.word	0x40004400

08002fbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08c      	sub	sp, #48	; 0x30
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 031c 	add.w	r3, r7, #28
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a3a      	ldr	r2, [pc, #232]	; (80030c4 <HAL_UART_MspInit+0x108>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d135      	bne.n	800304a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	4b39      	ldr	r3, [pc, #228]	; (80030c8 <HAL_UART_MspInit+0x10c>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	4a38      	ldr	r2, [pc, #224]	; (80030c8 <HAL_UART_MspInit+0x10c>)
 8002fe8:	f043 0310 	orr.w	r3, r3, #16
 8002fec:	6453      	str	r3, [r2, #68]	; 0x44
 8002fee:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <HAL_UART_MspInit+0x10c>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <HAL_UART_MspInit+0x10c>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a31      	ldr	r2, [pc, #196]	; (80030c8 <HAL_UART_MspInit+0x10c>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <HAL_UART_MspInit+0x10c>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003016:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800301a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003024:	2303      	movs	r3, #3
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003028:	2307      	movs	r3, #7
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	4619      	mov	r1, r3
 8003032:	4826      	ldr	r0, [pc, #152]	; (80030cc <HAL_UART_MspInit+0x110>)
 8003034:	f001 fa34 	bl	80044a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003038:	2200      	movs	r2, #0
 800303a:	2100      	movs	r1, #0
 800303c:	2025      	movs	r0, #37	; 0x25
 800303e:	f000 fdf6 	bl	8003c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003042:	2025      	movs	r0, #37	; 0x25
 8003044:	f000 fe0f 	bl	8003c66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003048:	e038      	b.n	80030bc <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a20      	ldr	r2, [pc, #128]	; (80030d0 <HAL_UART_MspInit+0x114>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d133      	bne.n	80030bc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <HAL_UART_MspInit+0x10c>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	4a1a      	ldr	r2, [pc, #104]	; (80030c8 <HAL_UART_MspInit+0x10c>)
 800305e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003062:	6413      	str	r3, [r2, #64]	; 0x40
 8003064:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <HAL_UART_MspInit+0x10c>)
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_UART_MspInit+0x10c>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	4a13      	ldr	r2, [pc, #76]	; (80030c8 <HAL_UART_MspInit+0x10c>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6313      	str	r3, [r2, #48]	; 0x30
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_UART_MspInit+0x10c>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800308c:	230c      	movs	r3, #12
 800308e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003090:	2302      	movs	r3, #2
 8003092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003098:	2303      	movs	r3, #3
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800309c:	2307      	movs	r3, #7
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a0:	f107 031c 	add.w	r3, r7, #28
 80030a4:	4619      	mov	r1, r3
 80030a6:	4809      	ldr	r0, [pc, #36]	; (80030cc <HAL_UART_MspInit+0x110>)
 80030a8:	f001 f9fa 	bl	80044a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030ac:	2200      	movs	r2, #0
 80030ae:	2100      	movs	r1, #0
 80030b0:	2026      	movs	r0, #38	; 0x26
 80030b2:	f000 fdbc 	bl	8003c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030b6:	2026      	movs	r0, #38	; 0x26
 80030b8:	f000 fdd5 	bl	8003c66 <HAL_NVIC_EnableIRQ>
}
 80030bc:	bf00      	nop
 80030be:	3730      	adds	r7, #48	; 0x30
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40011000 	.word	0x40011000
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020000 	.word	0x40020000
 80030d0:	40004400 	.word	0x40004400

080030d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800310c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030d8:	480d      	ldr	r0, [pc, #52]	; (8003110 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030da:	490e      	ldr	r1, [pc, #56]	; (8003114 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030dc:	4a0e      	ldr	r2, [pc, #56]	; (8003118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e0:	e002      	b.n	80030e8 <LoopCopyDataInit>

080030e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030e6:	3304      	adds	r3, #4

080030e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030ec:	d3f9      	bcc.n	80030e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ee:	4a0b      	ldr	r2, [pc, #44]	; (800311c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030f0:	4c0b      	ldr	r4, [pc, #44]	; (8003120 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f4:	e001      	b.n	80030fa <LoopFillZerobss>

080030f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f8:	3204      	adds	r2, #4

080030fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030fc:	d3fb      	bcc.n	80030f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030fe:	f7ff fcff 	bl	8002b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003102:	f004 ff95 	bl	8008030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003106:	f7ff f9c5 	bl	8002494 <main>
  bx  lr    
 800310a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800310c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003114:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003118:	0800b9d0 	.word	0x0800b9d0
  ldr r2, =_sbss
 800311c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003120:	20000438 	.word	0x20000438

08003124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003124:	e7fe      	b.n	8003124 <ADC_IRQHandler>
	...

08003128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800312c:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <HAL_Init+0x40>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <HAL_Init+0x40>)
 8003132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_Init+0x40>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <HAL_Init+0x40>)
 800313e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_Init+0x40>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a07      	ldr	r2, [pc, #28]	; (8003168 <HAL_Init+0x40>)
 800314a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003150:	2003      	movs	r0, #3
 8003152:	f000 fd61 	bl	8003c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003156:	200f      	movs	r0, #15
 8003158:	f000 f808 	bl	800316c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800315c:	f7ff fc20 	bl	80029a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023c00 	.word	0x40023c00

0800316c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003174:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_InitTick+0x54>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_InitTick+0x58>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	4619      	mov	r1, r3
 800317e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003182:	fbb3 f3f1 	udiv	r3, r3, r1
 8003186:	fbb2 f3f3 	udiv	r3, r2, r3
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fd79 	bl	8003c82 <HAL_SYSTICK_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e00e      	b.n	80031b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b0f      	cmp	r3, #15
 800319e:	d80a      	bhi.n	80031b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031a0:	2200      	movs	r2, #0
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	f000 fd41 	bl	8003c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031ac:	4a06      	ldr	r2, [pc, #24]	; (80031c8 <HAL_InitTick+0x5c>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e000      	b.n	80031b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000008 	.word	0x20000008
 80031c4:	20000010 	.word	0x20000010
 80031c8:	2000000c 	.word	0x2000000c

080031cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_IncTick+0x20>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_IncTick+0x24>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4413      	add	r3, r2
 80031dc:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <HAL_IncTick+0x24>)
 80031de:	6013      	str	r3, [r2, #0]
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	20000010 	.word	0x20000010
 80031f0:	20000424 	.word	0x20000424

080031f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return uwTick;
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <HAL_GetTick+0x14>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000424 	.word	0x20000424

0800320c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003214:	f7ff ffee 	bl	80031f4 <HAL_GetTick>
 8003218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d005      	beq.n	8003232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_Delay+0x44>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003232:	bf00      	nop
 8003234:	f7ff ffde 	bl	80031f4 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	429a      	cmp	r2, r3
 8003242:	d8f7      	bhi.n	8003234 <HAL_Delay+0x28>
  {
  }
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000010 	.word	0x20000010

08003254 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e033      	b.n	80032d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd ffce 	bl	8001214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b00      	cmp	r3, #0
 8003290:	d118      	bne.n	80032c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800329a:	f023 0302 	bic.w	r3, r3, #2
 800329e:	f043 0202 	orr.w	r2, r3, #2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fa68 	bl	800377c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f023 0303 	bic.w	r3, r3, #3
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
 80032c2:	e001      	b.n	80032c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_Start_DMA+0x1e>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e0e9      	b.n	80034ce <HAL_ADC_Start_DMA+0x1f2>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d018      	beq.n	8003342 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003320:	4b6d      	ldr	r3, [pc, #436]	; (80034d8 <HAL_ADC_Start_DMA+0x1fc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a6d      	ldr	r2, [pc, #436]	; (80034dc <HAL_ADC_Start_DMA+0x200>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	0c9a      	lsrs	r2, r3, #18
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003334:	e002      	b.n	800333c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	3b01      	subs	r3, #1
 800333a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f9      	bne.n	8003336 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003350:	d107      	bne.n	8003362 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003360:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b01      	cmp	r3, #1
 800336e:	f040 80a1 	bne.w	80034b4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800339c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b0:	d106      	bne.n	80033c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	f023 0206 	bic.w	r2, r3, #6
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	645a      	str	r2, [r3, #68]	; 0x44
 80033be:	e002      	b.n	80033c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ce:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_ADC_Start_DMA+0x204>)
 80033d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	4a43      	ldr	r2, [pc, #268]	; (80034e4 <HAL_ADC_Start_DMA+0x208>)
 80033d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	4a42      	ldr	r2, [pc, #264]	; (80034e8 <HAL_ADC_Start_DMA+0x20c>)
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	4a41      	ldr	r2, [pc, #260]	; (80034ec <HAL_ADC_Start_DMA+0x210>)
 80033e8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003402:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003412:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	334c      	adds	r3, #76	; 0x4c
 800341e:	4619      	mov	r1, r3
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f000 fce8 	bl	8003df8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2b00      	cmp	r3, #0
 8003432:	d12a      	bne.n	800348a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2d      	ldr	r2, [pc, #180]	; (80034f0 <HAL_ADC_Start_DMA+0x214>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d015      	beq.n	800346a <HAL_ADC_Start_DMA+0x18e>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2c      	ldr	r2, [pc, #176]	; (80034f4 <HAL_ADC_Start_DMA+0x218>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d105      	bne.n	8003454 <HAL_ADC_Start_DMA+0x178>
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_ADC_Start_DMA+0x204>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a27      	ldr	r2, [pc, #156]	; (80034f8 <HAL_ADC_Start_DMA+0x21c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d136      	bne.n	80034cc <HAL_ADC_Start_DMA+0x1f0>
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_ADC_Start_DMA+0x204>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	d130      	bne.n	80034cc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d129      	bne.n	80034cc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	e020      	b.n	80034cc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <HAL_ADC_Start_DMA+0x214>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d11b      	bne.n	80034cc <HAL_ADC_Start_DMA+0x1f0>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d114      	bne.n	80034cc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	e00b      	b.n	80034cc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f043 0210 	orr.w	r2, r3, #16
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c4:	f043 0201 	orr.w	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000008 	.word	0x20000008
 80034dc:	431bde83 	.word	0x431bde83
 80034e0:	40012300 	.word	0x40012300
 80034e4:	08003975 	.word	0x08003975
 80034e8:	08003a2f 	.word	0x08003a2f
 80034ec:	08003a4b 	.word	0x08003a4b
 80034f0:	40012000 	.word	0x40012000
 80034f4:	40012100 	.word	0x40012100
 80034f8:	40012200 	.word	0x40012200

080034fc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x1c>
 8003550:	2302      	movs	r3, #2
 8003552:	e105      	b.n	8003760 <HAL_ADC_ConfigChannel+0x228>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b09      	cmp	r3, #9
 8003562:	d925      	bls.n	80035b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68d9      	ldr	r1, [r3, #12]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	3b1e      	subs	r3, #30
 800357a:	2207      	movs	r2, #7
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43da      	mvns	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	400a      	ands	r2, r1
 8003588:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68d9      	ldr	r1, [r3, #12]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	b29b      	uxth	r3, r3
 800359a:	4618      	mov	r0, r3
 800359c:	4603      	mov	r3, r0
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4403      	add	r3, r0
 80035a2:	3b1e      	subs	r3, #30
 80035a4:	409a      	lsls	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	e022      	b.n	80035f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6919      	ldr	r1, [r3, #16]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	2207      	movs	r2, #7
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	400a      	ands	r2, r1
 80035d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6919      	ldr	r1, [r3, #16]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	4618      	mov	r0, r3
 80035e6:	4603      	mov	r3, r0
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4403      	add	r3, r0
 80035ec:	409a      	lsls	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d824      	bhi.n	8003648 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	3b05      	subs	r3, #5
 8003610:	221f      	movs	r2, #31
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43da      	mvns	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	400a      	ands	r2, r1
 800361e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	4618      	mov	r0, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	3b05      	subs	r3, #5
 800363a:	fa00 f203 	lsl.w	r2, r0, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	635a      	str	r2, [r3, #52]	; 0x34
 8003646:	e04c      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b0c      	cmp	r3, #12
 800364e:	d824      	bhi.n	800369a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	3b23      	subs	r3, #35	; 0x23
 8003662:	221f      	movs	r2, #31
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43da      	mvns	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	400a      	ands	r2, r1
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	4618      	mov	r0, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	3b23      	subs	r3, #35	; 0x23
 800368c:	fa00 f203 	lsl.w	r2, r0, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
 8003698:	e023      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	3b41      	subs	r3, #65	; 0x41
 80036ac:	221f      	movs	r2, #31
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	400a      	ands	r2, r1
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	4618      	mov	r0, r3
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	3b41      	subs	r3, #65	; 0x41
 80036d6:	fa00 f203 	lsl.w	r2, r0, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036e2:	4b22      	ldr	r3, [pc, #136]	; (800376c <HAL_ADC_ConfigChannel+0x234>)
 80036e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a21      	ldr	r2, [pc, #132]	; (8003770 <HAL_ADC_ConfigChannel+0x238>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d109      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1cc>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b12      	cmp	r3, #18
 80036f6:	d105      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a19      	ldr	r2, [pc, #100]	; (8003770 <HAL_ADC_ConfigChannel+0x238>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d123      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x21e>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b10      	cmp	r3, #16
 8003714:	d003      	beq.n	800371e <HAL_ADC_ConfigChannel+0x1e6>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b11      	cmp	r3, #17
 800371c:	d11b      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b10      	cmp	r3, #16
 8003730:	d111      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <HAL_ADC_ConfigChannel+0x23c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a10      	ldr	r2, [pc, #64]	; (8003778 <HAL_ADC_ConfigChannel+0x240>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	0c9a      	lsrs	r2, r3, #18
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003748:	e002      	b.n	8003750 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	3b01      	subs	r3, #1
 800374e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f9      	bne.n	800374a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40012300 	.word	0x40012300
 8003770:	40012000 	.word	0x40012000
 8003774:	20000008 	.word	0x20000008
 8003778:	431bde83 	.word	0x431bde83

0800377c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003784:	4b79      	ldr	r3, [pc, #484]	; (800396c <ADC_Init+0x1f0>)
 8003786:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	431a      	orrs	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	021a      	lsls	r2, r3, #8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6899      	ldr	r1, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	4a58      	ldr	r2, [pc, #352]	; (8003970 <ADC_Init+0x1f4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d022      	beq.n	800385a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003822:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6899      	ldr	r1, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6899      	ldr	r1, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	e00f      	b.n	800387a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003868:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003878:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0202 	bic.w	r2, r2, #2
 8003888:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6899      	ldr	r1, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	7e1b      	ldrb	r3, [r3, #24]
 8003894:	005a      	lsls	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01b      	beq.n	80038e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6859      	ldr	r1, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	3b01      	subs	r3, #1
 80038d4:	035a      	lsls	r2, r3, #13
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	e007      	b.n	80038f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	3b01      	subs	r3, #1
 800390c:	051a      	lsls	r2, r3, #20
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003924:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6899      	ldr	r1, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003932:	025a      	lsls	r2, r3, #9
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6899      	ldr	r1, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	029a      	lsls	r2, r3, #10
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	40012300 	.word	0x40012300
 8003970:	0f000001 	.word	0x0f000001

08003974 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800398a:	2b00      	cmp	r3, #0
 800398c:	d13c      	bne.n	8003a08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d12b      	bne.n	8003a00 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d127      	bne.n	8003a00 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d006      	beq.n	80039cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d119      	bne.n	8003a00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0220 	bic.w	r2, r2, #32
 80039da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d105      	bne.n	8003a00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	f043 0201 	orr.w	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7ff fd7b 	bl	80034fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a06:	e00e      	b.n	8003a26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff fd85 	bl	8003524 <HAL_ADC_ErrorCallback>
}
 8003a1a:	e004      	b.n	8003a26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
}
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f7ff fd67 	bl	8003510 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2240      	movs	r2, #64	; 0x40
 8003a5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f7ff fd5a 	bl	8003524 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <__NVIC_SetPriorityGrouping+0x44>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a94:	4013      	ands	r3, r2
 8003a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aaa:	4a04      	ldr	r2, [pc, #16]	; (8003abc <__NVIC_SetPriorityGrouping+0x44>)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	60d3      	str	r3, [r2, #12]
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	0a1b      	lsrs	r3, r3, #8
 8003aca:	f003 0307 	and.w	r3, r3, #7
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	db0b      	blt.n	8003b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	f003 021f 	and.w	r2, r3, #31
 8003af4:	4907      	ldr	r1, [pc, #28]	; (8003b14 <__NVIC_EnableIRQ+0x38>)
 8003af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	2001      	movs	r0, #1
 8003afe:	fa00 f202 	lsl.w	r2, r0, r2
 8003b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	e000e100 	.word	0xe000e100

08003b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	6039      	str	r1, [r7, #0]
 8003b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	db0a      	blt.n	8003b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	490c      	ldr	r1, [pc, #48]	; (8003b64 <__NVIC_SetPriority+0x4c>)
 8003b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b36:	0112      	lsls	r2, r2, #4
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b40:	e00a      	b.n	8003b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4908      	ldr	r1, [pc, #32]	; (8003b68 <__NVIC_SetPriority+0x50>)
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	3b04      	subs	r3, #4
 8003b50:	0112      	lsls	r2, r2, #4
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	440b      	add	r3, r1
 8003b56:	761a      	strb	r2, [r3, #24]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000e100 	.word	0xe000e100
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b089      	sub	sp, #36	; 0x24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f1c3 0307 	rsb	r3, r3, #7
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	bf28      	it	cs
 8003b8a:	2304      	movcs	r3, #4
 8003b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3304      	adds	r3, #4
 8003b92:	2b06      	cmp	r3, #6
 8003b94:	d902      	bls.n	8003b9c <NVIC_EncodePriority+0x30>
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3b03      	subs	r3, #3
 8003b9a:	e000      	b.n	8003b9e <NVIC_EncodePriority+0x32>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43da      	mvns	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	401a      	ands	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbe:	43d9      	mvns	r1, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc4:	4313      	orrs	r3, r2
         );
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3724      	adds	r7, #36	; 0x24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003be4:	d301      	bcc.n	8003bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003be6:	2301      	movs	r3, #1
 8003be8:	e00f      	b.n	8003c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bea:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <SysTick_Config+0x40>)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bf2:	210f      	movs	r1, #15
 8003bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf8:	f7ff ff8e 	bl	8003b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <SysTick_Config+0x40>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c02:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <SysTick_Config+0x40>)
 8003c04:	2207      	movs	r2, #7
 8003c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	e000e010 	.word	0xe000e010

08003c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff ff29 	bl	8003a78 <__NVIC_SetPriorityGrouping>
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	4603      	mov	r3, r0
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c40:	f7ff ff3e 	bl	8003ac0 <__NVIC_GetPriorityGrouping>
 8003c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	6978      	ldr	r0, [r7, #20]
 8003c4c:	f7ff ff8e 	bl	8003b6c <NVIC_EncodePriority>
 8003c50:	4602      	mov	r2, r0
 8003c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c56:	4611      	mov	r1, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff ff5d 	bl	8003b18 <__NVIC_SetPriority>
}
 8003c5e:	bf00      	nop
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff ff31 	bl	8003adc <__NVIC_EnableIRQ>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff ffa2 	bl	8003bd4 <SysTick_Config>
 8003c90:	4603      	mov	r3, r0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ca8:	f7ff faa4 	bl	80031f4 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e099      	b.n	8003dec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cd8:	e00f      	b.n	8003cfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cda:	f7ff fa8b 	bl	80031f4 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b05      	cmp	r3, #5
 8003ce6:	d908      	bls.n	8003cfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e078      	b.n	8003dec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e8      	bne.n	8003cda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <HAL_DMA_Init+0x158>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d107      	bne.n	8003d64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f023 0307 	bic.w	r3, r3, #7
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d117      	bne.n	8003dbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00e      	beq.n	8003dbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fb01 	bl	80043a8 <DMA_CheckFifoParam>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2240      	movs	r2, #64	; 0x40
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e016      	b.n	8003dec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fab8 	bl	800433c <DMA_CalcBaseAndBitshift>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	223f      	movs	r2, #63	; 0x3f
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	f010803f 	.word	0xf010803f

08003df8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_DMA_Start_IT+0x26>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e040      	b.n	8003ea0 <HAL_DMA_Start_IT+0xa8>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d12f      	bne.n	8003e92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2202      	movs	r2, #2
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fa4a 	bl	80042e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e50:	223f      	movs	r2, #63	; 0x3f
 8003e52:	409a      	lsls	r2, r3
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0216 	orr.w	r2, r2, #22
 8003e66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0208 	orr.w	r2, r2, #8
 8003e7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e005      	b.n	8003e9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003eb6:	f7ff f99d 	bl	80031f4 <HAL_GetTick>
 8003eba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d008      	beq.n	8003eda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2280      	movs	r2, #128	; 0x80
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e052      	b.n	8003f80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0216 	bic.w	r2, r2, #22
 8003ee8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d103      	bne.n	8003f0a <HAL_DMA_Abort+0x62>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0208 	bic.w	r2, r2, #8
 8003f18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f2a:	e013      	b.n	8003f54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f2c:	f7ff f962 	bl	80031f4 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b05      	cmp	r3, #5
 8003f38:	d90c      	bls.n	8003f54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2203      	movs	r2, #3
 8003f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e015      	b.n	8003f80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e4      	bne.n	8003f2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	223f      	movs	r2, #63	; 0x3f
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d004      	beq.n	8003fa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2280      	movs	r2, #128	; 0x80
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e00c      	b.n	8003fc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2205      	movs	r2, #5
 8003faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fd8:	4b92      	ldr	r3, [pc, #584]	; (8004224 <HAL_DMA_IRQHandler+0x258>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a92      	ldr	r2, [pc, #584]	; (8004228 <HAL_DMA_IRQHandler+0x25c>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	0a9b      	lsrs	r3, r3, #10
 8003fe4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff6:	2208      	movs	r2, #8
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01a      	beq.n	8004038 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d013      	beq.n	8004038 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0204 	bic.w	r2, r2, #4
 800401e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	2208      	movs	r2, #8
 8004026:	409a      	lsls	r2, r3
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004030:	f043 0201 	orr.w	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403c:	2201      	movs	r2, #1
 800403e:	409a      	lsls	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d012      	beq.n	800406e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00b      	beq.n	800406e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405a:	2201      	movs	r2, #1
 800405c:	409a      	lsls	r2, r3
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	f043 0202 	orr.w	r2, r3, #2
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004072:	2204      	movs	r2, #4
 8004074:	409a      	lsls	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4013      	ands	r3, r2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d012      	beq.n	80040a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00b      	beq.n	80040a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	2204      	movs	r2, #4
 8004092:	409a      	lsls	r2, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f043 0204 	orr.w	r2, r3, #4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	2210      	movs	r2, #16
 80040aa:	409a      	lsls	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d043      	beq.n	800413c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d03c      	beq.n	800413c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c6:	2210      	movs	r2, #16
 80040c8:	409a      	lsls	r2, r3
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d018      	beq.n	800410e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d108      	bne.n	80040fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d024      	beq.n	800413c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	4798      	blx	r3
 80040fa:	e01f      	b.n	800413c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01b      	beq.n	800413c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
 800410c:	e016      	b.n	800413c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d107      	bne.n	800412c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0208 	bic.w	r2, r2, #8
 800412a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004140:	2220      	movs	r2, #32
 8004142:	409a      	lsls	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 808e 	beq.w	800426a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8086 	beq.w	800426a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004162:	2220      	movs	r2, #32
 8004164:	409a      	lsls	r2, r3
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b05      	cmp	r3, #5
 8004174:	d136      	bne.n	80041e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0216 	bic.w	r2, r2, #22
 8004184:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695a      	ldr	r2, [r3, #20]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004194:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <HAL_DMA_IRQHandler+0x1da>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0208 	bic.w	r2, r2, #8
 80041b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ba:	223f      	movs	r2, #63	; 0x3f
 80041bc:	409a      	lsls	r2, r3
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d07d      	beq.n	80042d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	4798      	blx	r3
        }
        return;
 80041e2:	e078      	b.n	80042d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01c      	beq.n	800422c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d108      	bne.n	8004212 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	2b00      	cmp	r3, #0
 8004206:	d030      	beq.n	800426a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
 8004210:	e02b      	b.n	800426a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d027      	beq.n	800426a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
 8004222:	e022      	b.n	800426a <HAL_DMA_IRQHandler+0x29e>
 8004224:	20000008 	.word	0x20000008
 8004228:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10f      	bne.n	800425a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0210 	bic.w	r2, r2, #16
 8004248:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	2b00      	cmp	r3, #0
 8004270:	d032      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d022      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2205      	movs	r2, #5
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0201 	bic.w	r2, r2, #1
 8004294:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	3301      	adds	r3, #1
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d307      	bcc.n	80042b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1f2      	bne.n	8004296 <HAL_DMA_IRQHandler+0x2ca>
 80042b0:	e000      	b.n	80042b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80042b2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
 80042d4:	e000      	b.n	80042d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80042d6:	bf00      	nop
    }
  }
}
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop

080042e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b40      	cmp	r3, #64	; 0x40
 800430c:	d108      	bne.n	8004320 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800431e:	e007      	b.n	8004330 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	60da      	str	r2, [r3, #12]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	3b10      	subs	r3, #16
 800434c:	4a14      	ldr	r2, [pc, #80]	; (80043a0 <DMA_CalcBaseAndBitshift+0x64>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004356:	4a13      	ldr	r2, [pc, #76]	; (80043a4 <DMA_CalcBaseAndBitshift+0x68>)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b03      	cmp	r3, #3
 8004368:	d909      	bls.n	800437e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004372:	f023 0303 	bic.w	r3, r3, #3
 8004376:	1d1a      	adds	r2, r3, #4
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	659a      	str	r2, [r3, #88]	; 0x58
 800437c:	e007      	b.n	800438e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004386:	f023 0303 	bic.w	r3, r3, #3
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	aaaaaaab 	.word	0xaaaaaaab
 80043a4:	0800b984 	.word	0x0800b984

080043a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d11f      	bne.n	8004402 <DMA_CheckFifoParam+0x5a>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d856      	bhi.n	8004476 <DMA_CheckFifoParam+0xce>
 80043c8:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <DMA_CheckFifoParam+0x28>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	080043e1 	.word	0x080043e1
 80043d4:	080043f3 	.word	0x080043f3
 80043d8:	080043e1 	.word	0x080043e1
 80043dc:	08004477 	.word	0x08004477
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d046      	beq.n	800447a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f0:	e043      	b.n	800447a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043fa:	d140      	bne.n	800447e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004400:	e03d      	b.n	800447e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800440a:	d121      	bne.n	8004450 <DMA_CheckFifoParam+0xa8>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b03      	cmp	r3, #3
 8004410:	d837      	bhi.n	8004482 <DMA_CheckFifoParam+0xda>
 8004412:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <DMA_CheckFifoParam+0x70>)
 8004414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004418:	08004429 	.word	0x08004429
 800441c:	0800442f 	.word	0x0800442f
 8004420:	08004429 	.word	0x08004429
 8004424:	08004441 	.word	0x08004441
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
      break;
 800442c:	e030      	b.n	8004490 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d025      	beq.n	8004486 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800443e:	e022      	b.n	8004486 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004448:	d11f      	bne.n	800448a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800444e:	e01c      	b.n	800448a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d903      	bls.n	800445e <DMA_CheckFifoParam+0xb6>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d003      	beq.n	8004464 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800445c:	e018      	b.n	8004490 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
      break;
 8004462:	e015      	b.n	8004490 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00e      	beq.n	800448e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
      break;
 8004474:	e00b      	b.n	800448e <DMA_CheckFifoParam+0xe6>
      break;
 8004476:	bf00      	nop
 8004478:	e00a      	b.n	8004490 <DMA_CheckFifoParam+0xe8>
      break;
 800447a:	bf00      	nop
 800447c:	e008      	b.n	8004490 <DMA_CheckFifoParam+0xe8>
      break;
 800447e:	bf00      	nop
 8004480:	e006      	b.n	8004490 <DMA_CheckFifoParam+0xe8>
      break;
 8004482:	bf00      	nop
 8004484:	e004      	b.n	8004490 <DMA_CheckFifoParam+0xe8>
      break;
 8004486:	bf00      	nop
 8004488:	e002      	b.n	8004490 <DMA_CheckFifoParam+0xe8>
      break;   
 800448a:	bf00      	nop
 800448c:	e000      	b.n	8004490 <DMA_CheckFifoParam+0xe8>
      break;
 800448e:	bf00      	nop
    }
  } 
  
  return status; 
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop

080044a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b089      	sub	sp, #36	; 0x24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	e16b      	b.n	8004794 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044bc:	2201      	movs	r2, #1
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4013      	ands	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	f040 815a 	bne.w	800478e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d005      	beq.n	80044f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d130      	bne.n	8004554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	2203      	movs	r2, #3
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4013      	ands	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4313      	orrs	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004528:	2201      	movs	r2, #1
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4013      	ands	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f003 0201 	and.w	r2, r3, #1
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	4313      	orrs	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	2b03      	cmp	r3, #3
 800455e:	d017      	beq.n	8004590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	2203      	movs	r2, #3
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4013      	ands	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4313      	orrs	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d123      	bne.n	80045e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	08da      	lsrs	r2, r3, #3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3208      	adds	r2, #8
 80045a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	220f      	movs	r2, #15
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	08da      	lsrs	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3208      	adds	r2, #8
 80045de:	69b9      	ldr	r1, [r7, #24]
 80045e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	2203      	movs	r2, #3
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 0203 	and.w	r2, r3, #3
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4313      	orrs	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80b4 	beq.w	800478e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	4b60      	ldr	r3, [pc, #384]	; (80047ac <HAL_GPIO_Init+0x30c>)
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	4a5f      	ldr	r2, [pc, #380]	; (80047ac <HAL_GPIO_Init+0x30c>)
 8004630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004634:	6453      	str	r3, [r2, #68]	; 0x44
 8004636:	4b5d      	ldr	r3, [pc, #372]	; (80047ac <HAL_GPIO_Init+0x30c>)
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004642:	4a5b      	ldr	r2, [pc, #364]	; (80047b0 <HAL_GPIO_Init+0x310>)
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	089b      	lsrs	r3, r3, #2
 8004648:	3302      	adds	r3, #2
 800464a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	220f      	movs	r2, #15
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	4013      	ands	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a52      	ldr	r2, [pc, #328]	; (80047b4 <HAL_GPIO_Init+0x314>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d02b      	beq.n	80046c6 <HAL_GPIO_Init+0x226>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a51      	ldr	r2, [pc, #324]	; (80047b8 <HAL_GPIO_Init+0x318>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d025      	beq.n	80046c2 <HAL_GPIO_Init+0x222>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a50      	ldr	r2, [pc, #320]	; (80047bc <HAL_GPIO_Init+0x31c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01f      	beq.n	80046be <HAL_GPIO_Init+0x21e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a4f      	ldr	r2, [pc, #316]	; (80047c0 <HAL_GPIO_Init+0x320>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d019      	beq.n	80046ba <HAL_GPIO_Init+0x21a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a4e      	ldr	r2, [pc, #312]	; (80047c4 <HAL_GPIO_Init+0x324>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <HAL_GPIO_Init+0x216>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a4d      	ldr	r2, [pc, #308]	; (80047c8 <HAL_GPIO_Init+0x328>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00d      	beq.n	80046b2 <HAL_GPIO_Init+0x212>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4c      	ldr	r2, [pc, #304]	; (80047cc <HAL_GPIO_Init+0x32c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d007      	beq.n	80046ae <HAL_GPIO_Init+0x20e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a4b      	ldr	r2, [pc, #300]	; (80047d0 <HAL_GPIO_Init+0x330>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d101      	bne.n	80046aa <HAL_GPIO_Init+0x20a>
 80046a6:	2307      	movs	r3, #7
 80046a8:	e00e      	b.n	80046c8 <HAL_GPIO_Init+0x228>
 80046aa:	2308      	movs	r3, #8
 80046ac:	e00c      	b.n	80046c8 <HAL_GPIO_Init+0x228>
 80046ae:	2306      	movs	r3, #6
 80046b0:	e00a      	b.n	80046c8 <HAL_GPIO_Init+0x228>
 80046b2:	2305      	movs	r3, #5
 80046b4:	e008      	b.n	80046c8 <HAL_GPIO_Init+0x228>
 80046b6:	2304      	movs	r3, #4
 80046b8:	e006      	b.n	80046c8 <HAL_GPIO_Init+0x228>
 80046ba:	2303      	movs	r3, #3
 80046bc:	e004      	b.n	80046c8 <HAL_GPIO_Init+0x228>
 80046be:	2302      	movs	r3, #2
 80046c0:	e002      	b.n	80046c8 <HAL_GPIO_Init+0x228>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <HAL_GPIO_Init+0x228>
 80046c6:	2300      	movs	r3, #0
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	f002 0203 	and.w	r2, r2, #3
 80046ce:	0092      	lsls	r2, r2, #2
 80046d0:	4093      	lsls	r3, r2
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046d8:	4935      	ldr	r1, [pc, #212]	; (80047b0 <HAL_GPIO_Init+0x310>)
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	089b      	lsrs	r3, r3, #2
 80046de:	3302      	adds	r3, #2
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046e6:	4b3b      	ldr	r3, [pc, #236]	; (80047d4 <HAL_GPIO_Init+0x334>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800470a:	4a32      	ldr	r2, [pc, #200]	; (80047d4 <HAL_GPIO_Init+0x334>)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004710:	4b30      	ldr	r3, [pc, #192]	; (80047d4 <HAL_GPIO_Init+0x334>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004734:	4a27      	ldr	r2, [pc, #156]	; (80047d4 <HAL_GPIO_Init+0x334>)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800473a:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <HAL_GPIO_Init+0x334>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800475e:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <HAL_GPIO_Init+0x334>)
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_GPIO_Init+0x334>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	43db      	mvns	r3, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4013      	ands	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004788:	4a12      	ldr	r2, [pc, #72]	; (80047d4 <HAL_GPIO_Init+0x334>)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3301      	adds	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2b0f      	cmp	r3, #15
 8004798:	f67f ae90 	bls.w	80044bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	3724      	adds	r7, #36	; 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40013800 	.word	0x40013800
 80047b4:	40020000 	.word	0x40020000
 80047b8:	40020400 	.word	0x40020400
 80047bc:	40020800 	.word	0x40020800
 80047c0:	40020c00 	.word	0x40020c00
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40021400 	.word	0x40021400
 80047cc:	40021800 	.word	0x40021800
 80047d0:	40021c00 	.word	0x40021c00
 80047d4:	40013c00 	.word	0x40013c00

080047d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	807b      	strh	r3, [r7, #2]
 80047e4:	4613      	mov	r3, r2
 80047e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047e8:	787b      	ldrb	r3, [r7, #1]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047ee:	887a      	ldrh	r2, [r7, #2]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047f4:	e003      	b.n	80047fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047f6:	887b      	ldrh	r3, [r7, #2]
 80047f8:	041a      	lsls	r2, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	619a      	str	r2, [r3, #24]
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800480a:	b480      	push	{r7}
 800480c:	b085      	sub	sp, #20
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800481c:	887a      	ldrh	r2, [r7, #2]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4013      	ands	r3, r2
 8004822:	041a      	lsls	r2, r3, #16
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	43d9      	mvns	r1, r3
 8004828:	887b      	ldrh	r3, [r7, #2]
 800482a:	400b      	ands	r3, r1
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	619a      	str	r2, [r3, #24]
}
 8004832:	bf00      	nop
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e12b      	b.n	8004aaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd f838 	bl	80018dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	; 0x24
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004892:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048a4:	f000 fd5c 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80048a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4a81      	ldr	r2, [pc, #516]	; (8004ab4 <HAL_I2C_Init+0x274>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d807      	bhi.n	80048c4 <HAL_I2C_Init+0x84>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a80      	ldr	r2, [pc, #512]	; (8004ab8 <HAL_I2C_Init+0x278>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	bf94      	ite	ls
 80048bc:	2301      	movls	r3, #1
 80048be:	2300      	movhi	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e006      	b.n	80048d2 <HAL_I2C_Init+0x92>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a7d      	ldr	r2, [pc, #500]	; (8004abc <HAL_I2C_Init+0x27c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	bf94      	ite	ls
 80048cc:	2301      	movls	r3, #1
 80048ce:	2300      	movhi	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e0e7      	b.n	8004aaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4a78      	ldr	r2, [pc, #480]	; (8004ac0 <HAL_I2C_Init+0x280>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	0c9b      	lsrs	r3, r3, #18
 80048e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4a6a      	ldr	r2, [pc, #424]	; (8004ab4 <HAL_I2C_Init+0x274>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d802      	bhi.n	8004914 <HAL_I2C_Init+0xd4>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	3301      	adds	r3, #1
 8004912:	e009      	b.n	8004928 <HAL_I2C_Init+0xe8>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	4a69      	ldr	r2, [pc, #420]	; (8004ac4 <HAL_I2C_Init+0x284>)
 8004920:	fba2 2303 	umull	r2, r3, r2, r3
 8004924:	099b      	lsrs	r3, r3, #6
 8004926:	3301      	adds	r3, #1
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	430b      	orrs	r3, r1
 800492e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800493a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	495c      	ldr	r1, [pc, #368]	; (8004ab4 <HAL_I2C_Init+0x274>)
 8004944:	428b      	cmp	r3, r1
 8004946:	d819      	bhi.n	800497c <HAL_I2C_Init+0x13c>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1e59      	subs	r1, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	fbb1 f3f3 	udiv	r3, r1, r3
 8004956:	1c59      	adds	r1, r3, #1
 8004958:	f640 73fc 	movw	r3, #4092	; 0xffc
 800495c:	400b      	ands	r3, r1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_I2C_Init+0x138>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1e59      	subs	r1, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004970:	3301      	adds	r3, #1
 8004972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004976:	e051      	b.n	8004a1c <HAL_I2C_Init+0x1dc>
 8004978:	2304      	movs	r3, #4
 800497a:	e04f      	b.n	8004a1c <HAL_I2C_Init+0x1dc>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d111      	bne.n	80049a8 <HAL_I2C_Init+0x168>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	1e58      	subs	r0, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	440b      	add	r3, r1
 8004992:	fbb0 f3f3 	udiv	r3, r0, r3
 8004996:	3301      	adds	r3, #1
 8004998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800499c:	2b00      	cmp	r3, #0
 800499e:	bf0c      	ite	eq
 80049a0:	2301      	moveq	r3, #1
 80049a2:	2300      	movne	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e012      	b.n	80049ce <HAL_I2C_Init+0x18e>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1e58      	subs	r0, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6859      	ldr	r1, [r3, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	0099      	lsls	r1, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80049be:	3301      	adds	r3, #1
 80049c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bf0c      	ite	eq
 80049c8:	2301      	moveq	r3, #1
 80049ca:	2300      	movne	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_I2C_Init+0x196>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e022      	b.n	8004a1c <HAL_I2C_Init+0x1dc>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10e      	bne.n	80049fc <HAL_I2C_Init+0x1bc>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1e58      	subs	r0, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6859      	ldr	r1, [r3, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	440b      	add	r3, r1
 80049ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80049f0:	3301      	adds	r3, #1
 80049f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fa:	e00f      	b.n	8004a1c <HAL_I2C_Init+0x1dc>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1e58      	subs	r0, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6859      	ldr	r1, [r3, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	0099      	lsls	r1, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a12:	3301      	adds	r3, #1
 8004a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	6809      	ldr	r1, [r1, #0]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69da      	ldr	r2, [r3, #28]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6911      	ldr	r1, [r2, #16]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68d2      	ldr	r2, [r2, #12]
 8004a56:	4311      	orrs	r1, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695a      	ldr	r2, [r3, #20]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	000186a0 	.word	0x000186a0
 8004ab8:	001e847f 	.word	0x001e847f
 8004abc:	003d08ff 	.word	0x003d08ff
 8004ac0:	431bde83 	.word	0x431bde83
 8004ac4:	10624dd3 	.word	0x10624dd3

08004ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e264      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d075      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ae6:	4ba3      	ldr	r3, [pc, #652]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d00c      	beq.n	8004b0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af2:	4ba0      	ldr	r3, [pc, #640]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d112      	bne.n	8004b24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004afe:	4b9d      	ldr	r3, [pc, #628]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b0a:	d10b      	bne.n	8004b24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0c:	4b99      	ldr	r3, [pc, #612]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d05b      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x108>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d157      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e23f      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2c:	d106      	bne.n	8004b3c <HAL_RCC_OscConfig+0x74>
 8004b2e:	4b91      	ldr	r3, [pc, #580]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a90      	ldr	r2, [pc, #576]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e01d      	b.n	8004b78 <HAL_RCC_OscConfig+0xb0>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x98>
 8004b46:	4b8b      	ldr	r3, [pc, #556]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a8a      	ldr	r2, [pc, #552]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b88      	ldr	r3, [pc, #544]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a87      	ldr	r2, [pc, #540]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCC_OscConfig+0xb0>
 8004b60:	4b84      	ldr	r3, [pc, #528]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a83      	ldr	r2, [pc, #524]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	4b81      	ldr	r3, [pc, #516]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a80      	ldr	r2, [pc, #512]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d013      	beq.n	8004ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fe fb38 	bl	80031f4 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fe fb34 	bl	80031f4 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e204      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b76      	ldr	r3, [pc, #472]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0xc0>
 8004ba6:	e014      	b.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fe fb24 	bl	80031f4 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fe fb20 	bl	80031f4 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e1f0      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	4b6c      	ldr	r3, [pc, #432]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0xe8>
 8004bce:	e000      	b.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d063      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bde:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bea:	4b62      	ldr	r3, [pc, #392]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d11c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf6:	4b5f      	ldr	r3, [pc, #380]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d116      	bne.n	8004c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	4b5c      	ldr	r3, [pc, #368]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_RCC_OscConfig+0x152>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e1c4      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	4b56      	ldr	r3, [pc, #344]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4952      	ldr	r1, [pc, #328]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2e:	e03a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d020      	beq.n	8004c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c38:	4b4f      	ldr	r3, [pc, #316]	; (8004d78 <HAL_RCC_OscConfig+0x2b0>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fe fad9 	bl	80031f4 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c46:	f7fe fad5 	bl	80031f4 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e1a5      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c58:	4b46      	ldr	r3, [pc, #280]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c64:	4b43      	ldr	r3, [pc, #268]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4940      	ldr	r1, [pc, #256]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	600b      	str	r3, [r1, #0]
 8004c78:	e015      	b.n	8004ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7a:	4b3f      	ldr	r3, [pc, #252]	; (8004d78 <HAL_RCC_OscConfig+0x2b0>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fe fab8 	bl	80031f4 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c88:	f7fe fab4 	bl	80031f4 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e184      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9a:	4b36      	ldr	r3, [pc, #216]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d030      	beq.n	8004d14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d016      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cba:	4b30      	ldr	r3, [pc, #192]	; (8004d7c <HAL_RCC_OscConfig+0x2b4>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc0:	f7fe fa98 	bl	80031f4 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cc8:	f7fe fa94 	bl	80031f4 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e164      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cda:	4b26      	ldr	r3, [pc, #152]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x200>
 8004ce6:	e015      	b.n	8004d14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce8:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <HAL_RCC_OscConfig+0x2b4>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cee:	f7fe fa81 	bl	80031f4 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cf6:	f7fe fa7d 	bl	80031f4 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e14d      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d08:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80a0 	beq.w	8004e62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d22:	2300      	movs	r3, #0
 8004d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d26:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10f      	bne.n	8004d52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	4a0e      	ldr	r2, [pc, #56]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d40:	6413      	str	r3, [r2, #64]	; 0x40
 8004d42:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d52:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCC_OscConfig+0x2b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d121      	bne.n	8004da2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d5e:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <HAL_RCC_OscConfig+0x2b8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a07      	ldr	r2, [pc, #28]	; (8004d80 <HAL_RCC_OscConfig+0x2b8>)
 8004d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6a:	f7fe fa43 	bl	80031f4 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d70:	e011      	b.n	8004d96 <HAL_RCC_OscConfig+0x2ce>
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800
 8004d78:	42470000 	.word	0x42470000
 8004d7c:	42470e80 	.word	0x42470e80
 8004d80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d84:	f7fe fa36 	bl	80031f4 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e106      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4b85      	ldr	r3, [pc, #532]	; (8004fac <HAL_RCC_OscConfig+0x4e4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d106      	bne.n	8004db8 <HAL_RCC_OscConfig+0x2f0>
 8004daa:	4b81      	ldr	r3, [pc, #516]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	4a80      	ldr	r2, [pc, #512]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70
 8004db6:	e01c      	b.n	8004df2 <HAL_RCC_OscConfig+0x32a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b05      	cmp	r3, #5
 8004dbe:	d10c      	bne.n	8004dda <HAL_RCC_OscConfig+0x312>
 8004dc0:	4b7b      	ldr	r3, [pc, #492]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a7a      	ldr	r2, [pc, #488]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004dc6:	f043 0304 	orr.w	r3, r3, #4
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	4b78      	ldr	r3, [pc, #480]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	4a77      	ldr	r2, [pc, #476]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd8:	e00b      	b.n	8004df2 <HAL_RCC_OscConfig+0x32a>
 8004dda:	4b75      	ldr	r3, [pc, #468]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a74      	ldr	r2, [pc, #464]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
 8004de6:	4b72      	ldr	r3, [pc, #456]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a71      	ldr	r2, [pc, #452]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004dec:	f023 0304 	bic.w	r3, r3, #4
 8004df0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d015      	beq.n	8004e26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfa:	f7fe f9fb 	bl	80031f4 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e02:	f7fe f9f7 	bl	80031f4 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e0c5      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e18:	4b65      	ldr	r3, [pc, #404]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0ee      	beq.n	8004e02 <HAL_RCC_OscConfig+0x33a>
 8004e24:	e014      	b.n	8004e50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e26:	f7fe f9e5 	bl	80031f4 <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2c:	e00a      	b.n	8004e44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2e:	f7fe f9e1 	bl	80031f4 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e0af      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e44:	4b5a      	ldr	r3, [pc, #360]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1ee      	bne.n	8004e2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d105      	bne.n	8004e62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e56:	4b56      	ldr	r3, [pc, #344]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	4a55      	ldr	r2, [pc, #340]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 809b 	beq.w	8004fa2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e6c:	4b50      	ldr	r3, [pc, #320]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 030c 	and.w	r3, r3, #12
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d05c      	beq.n	8004f32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d141      	bne.n	8004f04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e80:	4b4c      	ldr	r3, [pc, #304]	; (8004fb4 <HAL_RCC_OscConfig+0x4ec>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e86:	f7fe f9b5 	bl	80031f4 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e8e:	f7fe f9b1 	bl	80031f4 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e081      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea0:	4b43      	ldr	r3, [pc, #268]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f0      	bne.n	8004e8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	019b      	lsls	r3, r3, #6
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	061b      	lsls	r3, r3, #24
 8004ed0:	4937      	ldr	r1, [pc, #220]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed6:	4b37      	ldr	r3, [pc, #220]	; (8004fb4 <HAL_RCC_OscConfig+0x4ec>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004edc:	f7fe f98a 	bl	80031f4 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee4:	f7fe f986 	bl	80031f4 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e056      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef6:	4b2e      	ldr	r3, [pc, #184]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0f0      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x41c>
 8004f02:	e04e      	b.n	8004fa2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f04:	4b2b      	ldr	r3, [pc, #172]	; (8004fb4 <HAL_RCC_OscConfig+0x4ec>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0a:	f7fe f973 	bl	80031f4 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f12:	f7fe f96f 	bl	80031f4 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e03f      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f24:	4b22      	ldr	r3, [pc, #136]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f0      	bne.n	8004f12 <HAL_RCC_OscConfig+0x44a>
 8004f30:	e037      	b.n	8004fa2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e032      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f3e:	4b1c      	ldr	r3, [pc, #112]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d028      	beq.n	8004f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d121      	bne.n	8004f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d11a      	bne.n	8004f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f6e:	4013      	ands	r3, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f74:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d111      	bne.n	8004f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	3b01      	subs	r3, #1
 8004f88:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d001      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40007000 	.word	0x40007000
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	42470060 	.word	0x42470060

08004fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0cc      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fcc:	4b68      	ldr	r3, [pc, #416]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d90c      	bls.n	8004ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fda:	4b65      	ldr	r3, [pc, #404]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe2:	4b63      	ldr	r3, [pc, #396]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d001      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e0b8      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d020      	beq.n	8005042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800500c:	4b59      	ldr	r3, [pc, #356]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a58      	ldr	r2, [pc, #352]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005024:	4b53      	ldr	r3, [pc, #332]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4a52      	ldr	r2, [pc, #328]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800502e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005030:	4b50      	ldr	r3, [pc, #320]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	494d      	ldr	r1, [pc, #308]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	4313      	orrs	r3, r2
 8005040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d044      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d107      	bne.n	8005066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005056:	4b47      	ldr	r3, [pc, #284]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d119      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e07f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d003      	beq.n	8005076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005072:	2b03      	cmp	r3, #3
 8005074:	d107      	bne.n	8005086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005076:	4b3f      	ldr	r3, [pc, #252]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e06f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005086:	4b3b      	ldr	r3, [pc, #236]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e067      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005096:	4b37      	ldr	r3, [pc, #220]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f023 0203 	bic.w	r2, r3, #3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4934      	ldr	r1, [pc, #208]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050a8:	f7fe f8a4 	bl	80031f4 <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	e00a      	b.n	80050c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b0:	f7fe f8a0 	bl	80031f4 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e04f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c6:	4b2b      	ldr	r3, [pc, #172]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 020c 	and.w	r2, r3, #12
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d1eb      	bne.n	80050b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050d8:	4b25      	ldr	r3, [pc, #148]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d20c      	bcs.n	8005100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e6:	4b22      	ldr	r3, [pc, #136]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b20      	ldr	r3, [pc, #128]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e032      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4916      	ldr	r1, [pc, #88]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	4313      	orrs	r3, r2
 800511c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800512a:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	490e      	ldr	r1, [pc, #56]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800513e:	f000 f821 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8005142:	4602      	mov	r2, r0
 8005144:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	490a      	ldr	r1, [pc, #40]	; (8005178 <HAL_RCC_ClockConfig+0x1c0>)
 8005150:	5ccb      	ldrb	r3, [r1, r3]
 8005152:	fa22 f303 	lsr.w	r3, r2, r3
 8005156:	4a09      	ldr	r2, [pc, #36]	; (800517c <HAL_RCC_ClockConfig+0x1c4>)
 8005158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800515a:	4b09      	ldr	r3, [pc, #36]	; (8005180 <HAL_RCC_ClockConfig+0x1c8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe f804 	bl	800316c <HAL_InitTick>

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40023c00 	.word	0x40023c00
 8005174:	40023800 	.word	0x40023800
 8005178:	0800b96c 	.word	0x0800b96c
 800517c:	20000008 	.word	0x20000008
 8005180:	2000000c 	.word	0x2000000c

08005184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005184:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	607b      	str	r3, [r7, #4]
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	2300      	movs	r3, #0
 8005196:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800519c:	4b67      	ldr	r3, [pc, #412]	; (800533c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 030c 	and.w	r3, r3, #12
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d00d      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x40>
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	f200 80bd 	bhi.w	8005328 <HAL_RCC_GetSysClockFreq+0x1a4>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x34>
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d003      	beq.n	80051be <HAL_RCC_GetSysClockFreq+0x3a>
 80051b6:	e0b7      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051b8:	4b61      	ldr	r3, [pc, #388]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051ba:	60bb      	str	r3, [r7, #8]
       break;
 80051bc:	e0b7      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051be:	4b61      	ldr	r3, [pc, #388]	; (8005344 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80051c0:	60bb      	str	r3, [r7, #8]
      break;
 80051c2:	e0b4      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051c4:	4b5d      	ldr	r3, [pc, #372]	; (800533c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ce:	4b5b      	ldr	r3, [pc, #364]	; (800533c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d04d      	beq.n	8005276 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051da:	4b58      	ldr	r3, [pc, #352]	; (800533c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	099b      	lsrs	r3, r3, #6
 80051e0:	461a      	mov	r2, r3
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	ea02 0800 	and.w	r8, r2, r0
 80051f2:	ea03 0901 	and.w	r9, r3, r1
 80051f6:	4640      	mov	r0, r8
 80051f8:	4649      	mov	r1, r9
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	014b      	lsls	r3, r1, #5
 8005204:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005208:	0142      	lsls	r2, r0, #5
 800520a:	4610      	mov	r0, r2
 800520c:	4619      	mov	r1, r3
 800520e:	ebb0 0008 	subs.w	r0, r0, r8
 8005212:	eb61 0109 	sbc.w	r1, r1, r9
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	018b      	lsls	r3, r1, #6
 8005220:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005224:	0182      	lsls	r2, r0, #6
 8005226:	1a12      	subs	r2, r2, r0
 8005228:	eb63 0301 	sbc.w	r3, r3, r1
 800522c:	f04f 0000 	mov.w	r0, #0
 8005230:	f04f 0100 	mov.w	r1, #0
 8005234:	00d9      	lsls	r1, r3, #3
 8005236:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800523a:	00d0      	lsls	r0, r2, #3
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	eb12 0208 	adds.w	r2, r2, r8
 8005244:	eb43 0309 	adc.w	r3, r3, r9
 8005248:	f04f 0000 	mov.w	r0, #0
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	0259      	lsls	r1, r3, #9
 8005252:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005256:	0250      	lsls	r0, r2, #9
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4610      	mov	r0, r2
 800525e:	4619      	mov	r1, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	461a      	mov	r2, r3
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	f7fb fc28 	bl	8000abc <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4613      	mov	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e04a      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005276:	4b31      	ldr	r3, [pc, #196]	; (800533c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	099b      	lsrs	r3, r3, #6
 800527c:	461a      	mov	r2, r3
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005286:	f04f 0100 	mov.w	r1, #0
 800528a:	ea02 0400 	and.w	r4, r2, r0
 800528e:	ea03 0501 	and.w	r5, r3, r1
 8005292:	4620      	mov	r0, r4
 8005294:	4629      	mov	r1, r5
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	014b      	lsls	r3, r1, #5
 80052a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052a4:	0142      	lsls	r2, r0, #5
 80052a6:	4610      	mov	r0, r2
 80052a8:	4619      	mov	r1, r3
 80052aa:	1b00      	subs	r0, r0, r4
 80052ac:	eb61 0105 	sbc.w	r1, r1, r5
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	018b      	lsls	r3, r1, #6
 80052ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052be:	0182      	lsls	r2, r0, #6
 80052c0:	1a12      	subs	r2, r2, r0
 80052c2:	eb63 0301 	sbc.w	r3, r3, r1
 80052c6:	f04f 0000 	mov.w	r0, #0
 80052ca:	f04f 0100 	mov.w	r1, #0
 80052ce:	00d9      	lsls	r1, r3, #3
 80052d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d4:	00d0      	lsls	r0, r2, #3
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	1912      	adds	r2, r2, r4
 80052dc:	eb45 0303 	adc.w	r3, r5, r3
 80052e0:	f04f 0000 	mov.w	r0, #0
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	0299      	lsls	r1, r3, #10
 80052ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052ee:	0290      	lsls	r0, r2, #10
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4610      	mov	r0, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	f7fb fbdc 	bl	8000abc <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4613      	mov	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800530c:	4b0b      	ldr	r3, [pc, #44]	; (800533c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	0c1b      	lsrs	r3, r3, #16
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	3301      	adds	r3, #1
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	60bb      	str	r3, [r7, #8]
      break;
 8005326:	e002      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005328:	4b05      	ldr	r3, [pc, #20]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800532a:	60bb      	str	r3, [r7, #8]
      break;
 800532c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800532e:	68bb      	ldr	r3, [r7, #8]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800533a:	bf00      	nop
 800533c:	40023800 	.word	0x40023800
 8005340:	00f42400 	.word	0x00f42400
 8005344:	007a1200 	.word	0x007a1200

08005348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCC_GetHCLKFreq+0x14>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000008 	.word	0x20000008

08005360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005364:	f7ff fff0 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005368:	4602      	mov	r2, r0
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0a9b      	lsrs	r3, r3, #10
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4903      	ldr	r1, [pc, #12]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005376:	5ccb      	ldrb	r3, [r1, r3]
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800
 8005384:	0800b97c 	.word	0x0800b97c

08005388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800538c:	f7ff ffdc 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	0b5b      	lsrs	r3, r3, #13
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4903      	ldr	r1, [pc, #12]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40023800 	.word	0x40023800
 80053ac:	0800b97c 	.word	0x0800b97c

080053b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e07b      	b.n	80054ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d108      	bne.n	80053dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d2:	d009      	beq.n	80053e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	61da      	str	r2, [r3, #28]
 80053da:	e005      	b.n	80053e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fd fa84 	bl	8002910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546c:	ea42 0103 	orr.w	r1, r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	f003 0104 	and.w	r1, r3, #4
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	f003 0210 	and.w	r2, r3, #16
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b088      	sub	sp, #32
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_SPI_Transmit+0x22>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e126      	b.n	8005732 <HAL_SPI_Transmit+0x270>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054ec:	f7fd fe82 	bl	80031f4 <HAL_GetTick>
 80054f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d002      	beq.n	8005508 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005502:	2302      	movs	r3, #2
 8005504:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005506:	e10b      	b.n	8005720 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_SPI_Transmit+0x52>
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005518:	e102      	b.n	8005720 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2203      	movs	r2, #3
 800551e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88fa      	ldrh	r2, [r7, #6]
 8005532:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	88fa      	ldrh	r2, [r7, #6]
 8005538:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005560:	d10f      	bne.n	8005582 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005570:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005580:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d007      	beq.n	80055a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800559e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a8:	d14b      	bne.n	8005642 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_SPI_Transmit+0xf6>
 80055b2:	8afb      	ldrh	r3, [r7, #22]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d13e      	bne.n	8005636 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	881a      	ldrh	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	1c9a      	adds	r2, r3, #2
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055dc:	e02b      	b.n	8005636 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d112      	bne.n	8005612 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	881a      	ldrh	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	1c9a      	adds	r2, r3, #2
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005610:	e011      	b.n	8005636 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005612:	f7fd fdef 	bl	80031f4 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d803      	bhi.n	800562a <HAL_SPI_Transmit+0x168>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d102      	bne.n	8005630 <HAL_SPI_Transmit+0x16e>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d102      	bne.n	8005636 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005634:	e074      	b.n	8005720 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1ce      	bne.n	80055de <HAL_SPI_Transmit+0x11c>
 8005640:	e04c      	b.n	80056dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_SPI_Transmit+0x18e>
 800564a:	8afb      	ldrh	r3, [r7, #22]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d140      	bne.n	80056d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	330c      	adds	r3, #12
 800565a:	7812      	ldrb	r2, [r2, #0]
 800565c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005676:	e02c      	b.n	80056d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b02      	cmp	r3, #2
 8005684:	d113      	bne.n	80056ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	330c      	adds	r3, #12
 8005690:	7812      	ldrb	r2, [r2, #0]
 8005692:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80056ac:	e011      	b.n	80056d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ae:	f7fd fda1 	bl	80031f4 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d803      	bhi.n	80056c6 <HAL_SPI_Transmit+0x204>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d102      	bne.n	80056cc <HAL_SPI_Transmit+0x20a>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056d0:	e026      	b.n	8005720 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1cd      	bne.n	8005678 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 fbcb 	bl	8005e7c <SPI_EndRxTxTransaction>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056fa:	2300      	movs	r3, #0
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	77fb      	strb	r3, [r7, #31]
 800571c:	e000      	b.n	8005720 <HAL_SPI_Transmit+0x25e>
  }

error:
 800571e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005730:	7ffb      	ldrb	r3, [r7, #31]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b088      	sub	sp, #32
 800573e:	af02      	add	r7, sp, #8
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	603b      	str	r3, [r7, #0]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005756:	d112      	bne.n	800577e <HAL_SPI_Receive+0x44>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10e      	bne.n	800577e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2204      	movs	r2, #4
 8005764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005768:	88fa      	ldrh	r2, [r7, #6]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	4613      	mov	r3, r2
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f8f1 	bl	800595c <HAL_SPI_TransmitReceive>
 800577a:	4603      	mov	r3, r0
 800577c:	e0ea      	b.n	8005954 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_SPI_Receive+0x52>
 8005788:	2302      	movs	r3, #2
 800578a:	e0e3      	b.n	8005954 <HAL_SPI_Receive+0x21a>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005794:	f7fd fd2e 	bl	80031f4 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d002      	beq.n	80057ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057a6:	2302      	movs	r3, #2
 80057a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057aa:	e0ca      	b.n	8005942 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_SPI_Receive+0x7e>
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d102      	bne.n	80057be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057bc:	e0c1      	b.n	8005942 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2204      	movs	r2, #4
 80057c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	88fa      	ldrh	r2, [r7, #6]
 80057d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	88fa      	ldrh	r2, [r7, #6]
 80057dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005804:	d10f      	bne.n	8005826 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005814:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005824:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d007      	beq.n	8005844 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005842:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d162      	bne.n	8005912 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800584c:	e02e      	b.n	80058ac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b01      	cmp	r3, #1
 800585a:	d115      	bne.n	8005888 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f103 020c 	add.w	r2, r3, #12
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	7812      	ldrb	r2, [r2, #0]
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800587c:	b29b      	uxth	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005886:	e011      	b.n	80058ac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005888:	f7fd fcb4 	bl	80031f4 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d803      	bhi.n	80058a0 <HAL_SPI_Receive+0x166>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589e:	d102      	bne.n	80058a6 <HAL_SPI_Receive+0x16c>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058aa:	e04a      	b.n	8005942 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1cb      	bne.n	800584e <HAL_SPI_Receive+0x114>
 80058b6:	e031      	b.n	800591c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d113      	bne.n	80058ee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	b292      	uxth	r2, r2
 80058d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	1c9a      	adds	r2, r3, #2
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058ec:	e011      	b.n	8005912 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ee:	f7fd fc81 	bl	80031f4 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d803      	bhi.n	8005906 <HAL_SPI_Receive+0x1cc>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005904:	d102      	bne.n	800590c <HAL_SPI_Receive+0x1d2>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d102      	bne.n	8005912 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005910:	e017      	b.n	8005942 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1cd      	bne.n	80058b8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fa45 	bl	8005db0 <SPI_EndRxTransaction>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	75fb      	strb	r3, [r7, #23]
 800593e:	e000      	b.n	8005942 <HAL_SPI_Receive+0x208>
  }

error :
 8005940:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005952:	7dfb      	ldrb	r3, [r7, #23]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08c      	sub	sp, #48	; 0x30
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800596a:	2301      	movs	r3, #1
 800596c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_SPI_TransmitReceive+0x26>
 800597e:	2302      	movs	r3, #2
 8005980:	e18a      	b.n	8005c98 <HAL_SPI_TransmitReceive+0x33c>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800598a:	f7fd fc33 	bl	80031f4 <HAL_GetTick>
 800598e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80059a0:	887b      	ldrh	r3, [r7, #2]
 80059a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d00f      	beq.n	80059cc <HAL_SPI_TransmitReceive+0x70>
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b2:	d107      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d103      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x68>
 80059bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d003      	beq.n	80059cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80059c4:	2302      	movs	r3, #2
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059ca:	e15b      	b.n	8005c84 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d005      	beq.n	80059de <HAL_SPI_TransmitReceive+0x82>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <HAL_SPI_TransmitReceive+0x82>
 80059d8:	887b      	ldrh	r3, [r7, #2]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d103      	bne.n	80059e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059e4:	e14e      	b.n	8005c84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d003      	beq.n	80059fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2205      	movs	r2, #5
 80059f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	887a      	ldrh	r2, [r7, #2]
 8005a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	887a      	ldrh	r2, [r7, #2]
 8005a10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	887a      	ldrh	r2, [r7, #2]
 8005a1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	887a      	ldrh	r2, [r7, #2]
 8005a22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d007      	beq.n	8005a4e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a56:	d178      	bne.n	8005b4a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <HAL_SPI_TransmitReceive+0x10a>
 8005a60:	8b7b      	ldrh	r3, [r7, #26]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d166      	bne.n	8005b34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	881a      	ldrh	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	1c9a      	adds	r2, r3, #2
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a8a:	e053      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d11b      	bne.n	8005ad2 <HAL_SPI_TransmitReceive+0x176>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d016      	beq.n	8005ad2 <HAL_SPI_TransmitReceive+0x176>
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d113      	bne.n	8005ad2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	881a      	ldrh	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	1c9a      	adds	r2, r3, #2
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d119      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x1b8>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d014      	beq.n	8005b14 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	b292      	uxth	r2, r2
 8005af6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	1c9a      	adds	r2, r3, #2
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b10:	2301      	movs	r3, #1
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b14:	f7fd fb6e 	bl	80031f4 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d807      	bhi.n	8005b34 <HAL_SPI_TransmitReceive+0x1d8>
 8005b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2a:	d003      	beq.n	8005b34 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b32:	e0a7      	b.n	8005c84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1a6      	bne.n	8005a8c <HAL_SPI_TransmitReceive+0x130>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1a1      	bne.n	8005a8c <HAL_SPI_TransmitReceive+0x130>
 8005b48:	e07c      	b.n	8005c44 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <HAL_SPI_TransmitReceive+0x1fc>
 8005b52:	8b7b      	ldrh	r3, [r7, #26]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d16b      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	330c      	adds	r3, #12
 8005b62:	7812      	ldrb	r2, [r2, #0]
 8005b64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b7e:	e057      	b.n	8005c30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d11c      	bne.n	8005bc8 <HAL_SPI_TransmitReceive+0x26c>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d017      	beq.n	8005bc8 <HAL_SPI_TransmitReceive+0x26c>
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d114      	bne.n	8005bc8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	7812      	ldrb	r2, [r2, #0]
 8005baa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d119      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x2ae>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d014      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c06:	2301      	movs	r3, #1
 8005c08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c0a:	f7fd faf3 	bl	80031f4 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d803      	bhi.n	8005c22 <HAL_SPI_TransmitReceive+0x2c6>
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d102      	bne.n	8005c28 <HAL_SPI_TransmitReceive+0x2cc>
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d103      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c2e:	e029      	b.n	8005c84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1a2      	bne.n	8005b80 <HAL_SPI_TransmitReceive+0x224>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d19d      	bne.n	8005b80 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f917 	bl	8005e7c <SPI_EndRxTxTransaction>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d006      	beq.n	8005c62 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c60:	e010      	b.n	8005c84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10b      	bne.n	8005c82 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	e000      	b.n	8005c84 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3730      	adds	r7, #48	; 0x30
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cb0:	f7fd faa0 	bl	80031f4 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	1a9b      	subs	r3, r3, r2
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cc0:	f7fd fa98 	bl	80031f4 <HAL_GetTick>
 8005cc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cc6:	4b39      	ldr	r3, [pc, #228]	; (8005dac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	015b      	lsls	r3, r3, #5
 8005ccc:	0d1b      	lsrs	r3, r3, #20
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	fb02 f303 	mul.w	r3, r2, r3
 8005cd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cd6:	e054      	b.n	8005d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cde:	d050      	beq.n	8005d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ce0:	f7fd fa88 	bl	80031f4 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d902      	bls.n	8005cf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d13d      	bne.n	8005d72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d0e:	d111      	bne.n	8005d34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d18:	d004      	beq.n	8005d24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d22:	d107      	bne.n	8005d34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d3c:	d10f      	bne.n	8005d5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e017      	b.n	8005da2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	bf0c      	ite	eq
 8005d92:	2301      	moveq	r3, #1
 8005d94:	2300      	movne	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	461a      	mov	r2, r3
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d19b      	bne.n	8005cd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3720      	adds	r7, #32
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000008 	.word	0x20000008

08005db0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dc4:	d111      	bne.n	8005dea <SPI_EndRxTransaction+0x3a>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dce:	d004      	beq.n	8005dda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd8:	d107      	bne.n	8005dea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005df2:	d12a      	bne.n	8005e4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dfc:	d012      	beq.n	8005e24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2200      	movs	r2, #0
 8005e06:	2180      	movs	r1, #128	; 0x80
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f7ff ff49 	bl	8005ca0 <SPI_WaitFlagStateUntilTimeout>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d02d      	beq.n	8005e70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e18:	f043 0220 	orr.w	r2, r3, #32
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e026      	b.n	8005e72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff ff36 	bl	8005ca0 <SPI_WaitFlagStateUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01a      	beq.n	8005e70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3e:	f043 0220 	orr.w	r2, r3, #32
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e013      	b.n	8005e72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2200      	movs	r2, #0
 8005e52:	2101      	movs	r1, #1
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff ff23 	bl	8005ca0 <SPI_WaitFlagStateUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e64:	f043 0220 	orr.w	r2, r3, #32
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e000      	b.n	8005e72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e88:	4b1b      	ldr	r3, [pc, #108]	; (8005ef8 <SPI_EndRxTxTransaction+0x7c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1b      	ldr	r2, [pc, #108]	; (8005efc <SPI_EndRxTxTransaction+0x80>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	0d5b      	lsrs	r3, r3, #21
 8005e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e98:	fb02 f303 	mul.w	r3, r2, r3
 8005e9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea6:	d112      	bne.n	8005ece <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2180      	movs	r1, #128	; 0x80
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f7ff fef4 	bl	8005ca0 <SPI_WaitFlagStateUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d016      	beq.n	8005eec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec2:	f043 0220 	orr.w	r2, r3, #32
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e00f      	b.n	8005eee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee4:	2b80      	cmp	r3, #128	; 0x80
 8005ee6:	d0f2      	beq.n	8005ece <SPI_EndRxTxTransaction+0x52>
 8005ee8:	e000      	b.n	8005eec <SPI_EndRxTxTransaction+0x70>
        break;
 8005eea:	bf00      	nop
  }

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000008 	.word	0x20000008
 8005efc:	165e9f81 	.word	0x165e9f81

08005f00 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e034      	b.n	8005f80 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7fb fb64 	bl	80015f8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3308      	adds	r3, #8
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f001 ffa2 	bl	8007e84 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	f001 ffec 	bl	8007f28 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6858      	ldr	r0, [r3, #4]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	f002 f821 	bl	8007fa4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	6892      	ldr	r2, [r2, #8]
 8005f6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	6892      	ldr	r2, [r2, #8]
 8005f76:	f041 0101 	orr.w	r1, r1, #1
 8005f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e041      	b.n	800601e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fc fea2 	bl	8002cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f000 fc1a 	bl	8006800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
	...

08006028 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b01      	cmp	r3, #1
 800603a:	d001      	beq.n	8006040 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e046      	b.n	80060ce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a23      	ldr	r2, [pc, #140]	; (80060dc <HAL_TIM_Base_Start+0xb4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d022      	beq.n	8006098 <HAL_TIM_Base_Start+0x70>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605a:	d01d      	beq.n	8006098 <HAL_TIM_Base_Start+0x70>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1f      	ldr	r2, [pc, #124]	; (80060e0 <HAL_TIM_Base_Start+0xb8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d018      	beq.n	8006098 <HAL_TIM_Base_Start+0x70>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1e      	ldr	r2, [pc, #120]	; (80060e4 <HAL_TIM_Base_Start+0xbc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d013      	beq.n	8006098 <HAL_TIM_Base_Start+0x70>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1c      	ldr	r2, [pc, #112]	; (80060e8 <HAL_TIM_Base_Start+0xc0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00e      	beq.n	8006098 <HAL_TIM_Base_Start+0x70>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1b      	ldr	r2, [pc, #108]	; (80060ec <HAL_TIM_Base_Start+0xc4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d009      	beq.n	8006098 <HAL_TIM_Base_Start+0x70>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a19      	ldr	r2, [pc, #100]	; (80060f0 <HAL_TIM_Base_Start+0xc8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_TIM_Base_Start+0x70>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <HAL_TIM_Base_Start+0xcc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d111      	bne.n	80060bc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b06      	cmp	r3, #6
 80060a8:	d010      	beq.n	80060cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0201 	orr.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ba:	e007      	b.n	80060cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40000c00 	.word	0x40000c00
 80060ec:	40010400 	.word	0x40010400
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40001800 	.word	0x40001800

080060f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	d001      	beq.n	8006110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e04e      	b.n	80061ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0201 	orr.w	r2, r2, #1
 8006126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a23      	ldr	r2, [pc, #140]	; (80061bc <HAL_TIM_Base_Start_IT+0xc4>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d022      	beq.n	8006178 <HAL_TIM_Base_Start_IT+0x80>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613a:	d01d      	beq.n	8006178 <HAL_TIM_Base_Start_IT+0x80>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d018      	beq.n	8006178 <HAL_TIM_Base_Start_IT+0x80>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1e      	ldr	r2, [pc, #120]	; (80061c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <HAL_TIM_Base_Start_IT+0x80>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1c      	ldr	r2, [pc, #112]	; (80061c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00e      	beq.n	8006178 <HAL_TIM_Base_Start_IT+0x80>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1b      	ldr	r2, [pc, #108]	; (80061cc <HAL_TIM_Base_Start_IT+0xd4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d009      	beq.n	8006178 <HAL_TIM_Base_Start_IT+0x80>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a19      	ldr	r2, [pc, #100]	; (80061d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d004      	beq.n	8006178 <HAL_TIM_Base_Start_IT+0x80>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a18      	ldr	r2, [pc, #96]	; (80061d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d111      	bne.n	800619c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b06      	cmp	r3, #6
 8006188:	d010      	beq.n	80061ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f042 0201 	orr.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800619a:	e007      	b.n	80061ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0201 	orr.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	40010000 	.word	0x40010000
 80061c0:	40000400 	.word	0x40000400
 80061c4:	40000800 	.word	0x40000800
 80061c8:	40000c00 	.word	0x40000c00
 80061cc:	40010400 	.word	0x40010400
 80061d0:	40014000 	.word	0x40014000
 80061d4:	40001800 	.word	0x40001800

080061d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e041      	b.n	800626e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f839 	bl	8006276 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3304      	adds	r3, #4
 8006214:	4619      	mov	r1, r3
 8006216:	4610      	mov	r0, r2
 8006218:	f000 faf2 	bl	8006800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b02      	cmp	r3, #2
 800629e:	d122      	bne.n	80062e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d11b      	bne.n	80062e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f06f 0202 	mvn.w	r2, #2
 80062b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f003 0303 	and.w	r3, r3, #3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fa78 	bl	80067c2 <HAL_TIM_IC_CaptureCallback>
 80062d2:	e005      	b.n	80062e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fa6a 	bl	80067ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa7b 	bl	80067d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d122      	bne.n	800633a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d11b      	bne.n	800633a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f06f 0204 	mvn.w	r2, #4
 800630a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fa4e 	bl	80067c2 <HAL_TIM_IC_CaptureCallback>
 8006326:	e005      	b.n	8006334 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fa40 	bl	80067ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa51 	bl	80067d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b08      	cmp	r3, #8
 8006346:	d122      	bne.n	800638e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b08      	cmp	r3, #8
 8006354:	d11b      	bne.n	800638e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f06f 0208 	mvn.w	r2, #8
 800635e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2204      	movs	r2, #4
 8006364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fa24 	bl	80067c2 <HAL_TIM_IC_CaptureCallback>
 800637a:	e005      	b.n	8006388 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fa16 	bl	80067ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fa27 	bl	80067d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f003 0310 	and.w	r3, r3, #16
 8006398:	2b10      	cmp	r3, #16
 800639a:	d122      	bne.n	80063e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b10      	cmp	r3, #16
 80063a8:	d11b      	bne.n	80063e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f06f 0210 	mvn.w	r2, #16
 80063b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2208      	movs	r2, #8
 80063b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f9fa 	bl	80067c2 <HAL_TIM_IC_CaptureCallback>
 80063ce:	e005      	b.n	80063dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f9ec 	bl	80067ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f9fd 	bl	80067d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d10e      	bne.n	800640e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d107      	bne.n	800640e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f06f 0201 	mvn.w	r2, #1
 8006406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7fc fa21 	bl	8002850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006418:	2b80      	cmp	r3, #128	; 0x80
 800641a:	d10e      	bne.n	800643a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006426:	2b80      	cmp	r3, #128	; 0x80
 8006428:	d107      	bne.n	800643a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fd53 	bl	8006ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006444:	2b40      	cmp	r3, #64	; 0x40
 8006446:	d10e      	bne.n	8006466 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006452:	2b40      	cmp	r3, #64	; 0x40
 8006454:	d107      	bne.n	8006466 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800645e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f9c2 	bl	80067ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b20      	cmp	r3, #32
 8006472:	d10e      	bne.n	8006492 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f003 0320 	and.w	r3, r3, #32
 800647e:	2b20      	cmp	r3, #32
 8006480:	d107      	bne.n	8006492 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f06f 0220 	mvn.w	r2, #32
 800648a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fd1d 	bl	8006ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e0ae      	b.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b0c      	cmp	r3, #12
 80064c6:	f200 809f 	bhi.w	8006608 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064ca:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d0:	08006505 	.word	0x08006505
 80064d4:	08006609 	.word	0x08006609
 80064d8:	08006609 	.word	0x08006609
 80064dc:	08006609 	.word	0x08006609
 80064e0:	08006545 	.word	0x08006545
 80064e4:	08006609 	.word	0x08006609
 80064e8:	08006609 	.word	0x08006609
 80064ec:	08006609 	.word	0x08006609
 80064f0:	08006587 	.word	0x08006587
 80064f4:	08006609 	.word	0x08006609
 80064f8:	08006609 	.word	0x08006609
 80064fc:	08006609 	.word	0x08006609
 8006500:	080065c7 	.word	0x080065c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fa18 	bl	8006940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0208 	orr.w	r2, r2, #8
 800651e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0204 	bic.w	r2, r2, #4
 800652e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6999      	ldr	r1, [r3, #24]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	619a      	str	r2, [r3, #24]
      break;
 8006542:	e064      	b.n	800660e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fa68 	bl	8006a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699a      	ldr	r2, [r3, #24]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800655e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800656e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6999      	ldr	r1, [r3, #24]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	021a      	lsls	r2, r3, #8
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	619a      	str	r2, [r3, #24]
      break;
 8006584:	e043      	b.n	800660e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	4618      	mov	r0, r3
 800658e:	f000 fabd 	bl	8006b0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0208 	orr.w	r2, r2, #8
 80065a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69da      	ldr	r2, [r3, #28]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0204 	bic.w	r2, r2, #4
 80065b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69d9      	ldr	r1, [r3, #28]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	61da      	str	r2, [r3, #28]
      break;
 80065c4:	e023      	b.n	800660e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68b9      	ldr	r1, [r7, #8]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fb11 	bl	8006bf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69d9      	ldr	r1, [r3, #28]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	021a      	lsls	r2, r3, #8
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	61da      	str	r2, [r3, #28]
      break;
 8006606:	e002      	b.n	800660e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	75fb      	strb	r3, [r7, #23]
      break;
 800660c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006616:	7dfb      	ldrb	r3, [r7, #23]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_TIM_ConfigClockSource+0x1c>
 8006638:	2302      	movs	r3, #2
 800663a:	e0b4      	b.n	80067a6 <HAL_TIM_ConfigClockSource+0x186>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800665a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006662:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006674:	d03e      	beq.n	80066f4 <HAL_TIM_ConfigClockSource+0xd4>
 8006676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800667a:	f200 8087 	bhi.w	800678c <HAL_TIM_ConfigClockSource+0x16c>
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006682:	f000 8086 	beq.w	8006792 <HAL_TIM_ConfigClockSource+0x172>
 8006686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668a:	d87f      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x16c>
 800668c:	2b70      	cmp	r3, #112	; 0x70
 800668e:	d01a      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0xa6>
 8006690:	2b70      	cmp	r3, #112	; 0x70
 8006692:	d87b      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x16c>
 8006694:	2b60      	cmp	r3, #96	; 0x60
 8006696:	d050      	beq.n	800673a <HAL_TIM_ConfigClockSource+0x11a>
 8006698:	2b60      	cmp	r3, #96	; 0x60
 800669a:	d877      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x16c>
 800669c:	2b50      	cmp	r3, #80	; 0x50
 800669e:	d03c      	beq.n	800671a <HAL_TIM_ConfigClockSource+0xfa>
 80066a0:	2b50      	cmp	r3, #80	; 0x50
 80066a2:	d873      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x16c>
 80066a4:	2b40      	cmp	r3, #64	; 0x40
 80066a6:	d058      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x13a>
 80066a8:	2b40      	cmp	r3, #64	; 0x40
 80066aa:	d86f      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x16c>
 80066ac:	2b30      	cmp	r3, #48	; 0x30
 80066ae:	d064      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x15a>
 80066b0:	2b30      	cmp	r3, #48	; 0x30
 80066b2:	d86b      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x16c>
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d060      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x15a>
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d867      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x16c>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d05c      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x15a>
 80066c0:	2b10      	cmp	r3, #16
 80066c2:	d05a      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x15a>
 80066c4:	e062      	b.n	800678c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6818      	ldr	r0, [r3, #0]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	6899      	ldr	r1, [r3, #8]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f000 fb5d 	bl	8006d94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	609a      	str	r2, [r3, #8]
      break;
 80066f2:	e04f      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	6899      	ldr	r1, [r3, #8]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f000 fb46 	bl	8006d94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006716:	609a      	str	r2, [r3, #8]
      break;
 8006718:	e03c      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6859      	ldr	r1, [r3, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	461a      	mov	r2, r3
 8006728:	f000 faba 	bl	8006ca0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2150      	movs	r1, #80	; 0x50
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fb13 	bl	8006d5e <TIM_ITRx_SetConfig>
      break;
 8006738:	e02c      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	6859      	ldr	r1, [r3, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	461a      	mov	r2, r3
 8006748:	f000 fad9 	bl	8006cfe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2160      	movs	r1, #96	; 0x60
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fb03 	bl	8006d5e <TIM_ITRx_SetConfig>
      break;
 8006758:	e01c      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	6859      	ldr	r1, [r3, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	461a      	mov	r2, r3
 8006768:	f000 fa9a 	bl	8006ca0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2140      	movs	r1, #64	; 0x40
 8006772:	4618      	mov	r0, r3
 8006774:	f000 faf3 	bl	8006d5e <TIM_ITRx_SetConfig>
      break;
 8006778:	e00c      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4619      	mov	r1, r3
 8006784:	4610      	mov	r0, r2
 8006786:	f000 faea 	bl	8006d5e <TIM_ITRx_SetConfig>
      break;
 800678a:	e003      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	73fb      	strb	r3, [r7, #15]
      break;
 8006790:	e000      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
	...

08006800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a40      	ldr	r2, [pc, #256]	; (8006914 <TIM_Base_SetConfig+0x114>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d013      	beq.n	8006840 <TIM_Base_SetConfig+0x40>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681e:	d00f      	beq.n	8006840 <TIM_Base_SetConfig+0x40>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a3d      	ldr	r2, [pc, #244]	; (8006918 <TIM_Base_SetConfig+0x118>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00b      	beq.n	8006840 <TIM_Base_SetConfig+0x40>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a3c      	ldr	r2, [pc, #240]	; (800691c <TIM_Base_SetConfig+0x11c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d007      	beq.n	8006840 <TIM_Base_SetConfig+0x40>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a3b      	ldr	r2, [pc, #236]	; (8006920 <TIM_Base_SetConfig+0x120>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d003      	beq.n	8006840 <TIM_Base_SetConfig+0x40>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a3a      	ldr	r2, [pc, #232]	; (8006924 <TIM_Base_SetConfig+0x124>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d108      	bne.n	8006852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a2f      	ldr	r2, [pc, #188]	; (8006914 <TIM_Base_SetConfig+0x114>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d02b      	beq.n	80068b2 <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006860:	d027      	beq.n	80068b2 <TIM_Base_SetConfig+0xb2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a2c      	ldr	r2, [pc, #176]	; (8006918 <TIM_Base_SetConfig+0x118>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d023      	beq.n	80068b2 <TIM_Base_SetConfig+0xb2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a2b      	ldr	r2, [pc, #172]	; (800691c <TIM_Base_SetConfig+0x11c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d01f      	beq.n	80068b2 <TIM_Base_SetConfig+0xb2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a2a      	ldr	r2, [pc, #168]	; (8006920 <TIM_Base_SetConfig+0x120>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d01b      	beq.n	80068b2 <TIM_Base_SetConfig+0xb2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a29      	ldr	r2, [pc, #164]	; (8006924 <TIM_Base_SetConfig+0x124>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d017      	beq.n	80068b2 <TIM_Base_SetConfig+0xb2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a28      	ldr	r2, [pc, #160]	; (8006928 <TIM_Base_SetConfig+0x128>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d013      	beq.n	80068b2 <TIM_Base_SetConfig+0xb2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a27      	ldr	r2, [pc, #156]	; (800692c <TIM_Base_SetConfig+0x12c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00f      	beq.n	80068b2 <TIM_Base_SetConfig+0xb2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a26      	ldr	r2, [pc, #152]	; (8006930 <TIM_Base_SetConfig+0x130>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00b      	beq.n	80068b2 <TIM_Base_SetConfig+0xb2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a25      	ldr	r2, [pc, #148]	; (8006934 <TIM_Base_SetConfig+0x134>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d007      	beq.n	80068b2 <TIM_Base_SetConfig+0xb2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a24      	ldr	r2, [pc, #144]	; (8006938 <TIM_Base_SetConfig+0x138>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d003      	beq.n	80068b2 <TIM_Base_SetConfig+0xb2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a23      	ldr	r2, [pc, #140]	; (800693c <TIM_Base_SetConfig+0x13c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d108      	bne.n	80068c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a0a      	ldr	r2, [pc, #40]	; (8006914 <TIM_Base_SetConfig+0x114>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <TIM_Base_SetConfig+0xf8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a0c      	ldr	r2, [pc, #48]	; (8006924 <TIM_Base_SetConfig+0x124>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d103      	bne.n	8006900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	615a      	str	r2, [r3, #20]
}
 8006906:	bf00      	nop
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40010000 	.word	0x40010000
 8006918:	40000400 	.word	0x40000400
 800691c:	40000800 	.word	0x40000800
 8006920:	40000c00 	.word	0x40000c00
 8006924:	40010400 	.word	0x40010400
 8006928:	40014000 	.word	0x40014000
 800692c:	40014400 	.word	0x40014400
 8006930:	40014800 	.word	0x40014800
 8006934:	40001800 	.word	0x40001800
 8006938:	40001c00 	.word	0x40001c00
 800693c:	40002000 	.word	0x40002000

08006940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f023 0201 	bic.w	r2, r3, #1
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f023 0302 	bic.w	r3, r3, #2
 8006988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a20      	ldr	r2, [pc, #128]	; (8006a18 <TIM_OC1_SetConfig+0xd8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d003      	beq.n	80069a4 <TIM_OC1_SetConfig+0x64>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a1f      	ldr	r2, [pc, #124]	; (8006a1c <TIM_OC1_SetConfig+0xdc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d10c      	bne.n	80069be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 0308 	bic.w	r3, r3, #8
 80069aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f023 0304 	bic.w	r3, r3, #4
 80069bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a15      	ldr	r2, [pc, #84]	; (8006a18 <TIM_OC1_SetConfig+0xd8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d003      	beq.n	80069ce <TIM_OC1_SetConfig+0x8e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a14      	ldr	r2, [pc, #80]	; (8006a1c <TIM_OC1_SetConfig+0xdc>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d111      	bne.n	80069f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	621a      	str	r2, [r3, #32]
}
 8006a0c:	bf00      	nop
 8006a0e:	371c      	adds	r7, #28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	40010000 	.word	0x40010000
 8006a1c:	40010400 	.word	0x40010400

08006a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f023 0210 	bic.w	r2, r3, #16
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	021b      	lsls	r3, r3, #8
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f023 0320 	bic.w	r3, r3, #32
 8006a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a22      	ldr	r2, [pc, #136]	; (8006b04 <TIM_OC2_SetConfig+0xe4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d003      	beq.n	8006a88 <TIM_OC2_SetConfig+0x68>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a21      	ldr	r2, [pc, #132]	; (8006b08 <TIM_OC2_SetConfig+0xe8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d10d      	bne.n	8006aa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a17      	ldr	r2, [pc, #92]	; (8006b04 <TIM_OC2_SetConfig+0xe4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_OC2_SetConfig+0x94>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a16      	ldr	r2, [pc, #88]	; (8006b08 <TIM_OC2_SetConfig+0xe8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d113      	bne.n	8006adc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	621a      	str	r2, [r3, #32]
}
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	40010000 	.word	0x40010000
 8006b08:	40010400 	.word	0x40010400

08006b0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0303 	bic.w	r3, r3, #3
 8006b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	021b      	lsls	r3, r3, #8
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a21      	ldr	r2, [pc, #132]	; (8006bec <TIM_OC3_SetConfig+0xe0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d003      	beq.n	8006b72 <TIM_OC3_SetConfig+0x66>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a20      	ldr	r2, [pc, #128]	; (8006bf0 <TIM_OC3_SetConfig+0xe4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d10d      	bne.n	8006b8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a16      	ldr	r2, [pc, #88]	; (8006bec <TIM_OC3_SetConfig+0xe0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_OC3_SetConfig+0x92>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a15      	ldr	r2, [pc, #84]	; (8006bf0 <TIM_OC3_SetConfig+0xe4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d113      	bne.n	8006bc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	621a      	str	r2, [r3, #32]
}
 8006be0:	bf00      	nop
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	40010000 	.word	0x40010000
 8006bf0:	40010400 	.word	0x40010400

08006bf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	031b      	lsls	r3, r3, #12
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a12      	ldr	r2, [pc, #72]	; (8006c98 <TIM_OC4_SetConfig+0xa4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_OC4_SetConfig+0x68>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a11      	ldr	r2, [pc, #68]	; (8006c9c <TIM_OC4_SetConfig+0xa8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d109      	bne.n	8006c70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	019b      	lsls	r3, r3, #6
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	621a      	str	r2, [r3, #32]
}
 8006c8a:	bf00      	nop
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40010000 	.word	0x40010000
 8006c9c:	40010400 	.word	0x40010400

08006ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f023 0201 	bic.w	r2, r3, #1
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f023 030a 	bic.w	r3, r3, #10
 8006cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	621a      	str	r2, [r3, #32]
}
 8006cf2:	bf00      	nop
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b087      	sub	sp, #28
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f023 0210 	bic.w	r2, r3, #16
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	031b      	lsls	r3, r3, #12
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	621a      	str	r2, [r3, #32]
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	f043 0307 	orr.w	r3, r3, #7
 8006d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	609a      	str	r2, [r3, #8]
}
 8006d88:	bf00      	nop
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	021a      	lsls	r2, r3, #8
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	609a      	str	r2, [r3, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e05a      	b.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a21      	ldr	r2, [pc, #132]	; (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d022      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e38:	d01d      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1d      	ldr	r2, [pc, #116]	; (8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d018      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1b      	ldr	r2, [pc, #108]	; (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d013      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1a      	ldr	r2, [pc, #104]	; (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00e      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a18      	ldr	r2, [pc, #96]	; (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d009      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d10c      	bne.n	8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	40010000 	.word	0x40010000
 8006eb4:	40000400 	.word	0x40000400
 8006eb8:	40000800 	.word	0x40000800
 8006ebc:	40000c00 	.word	0x40000c00
 8006ec0:	40010400 	.word	0x40010400
 8006ec4:	40014000 	.word	0x40014000
 8006ec8:	40001800 	.word	0x40001800

08006ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e03f      	b.n	8006f86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fc f84e 	bl	8002fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2224      	movs	r2, #36	; 0x24
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fddb 	bl	8007af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	695a      	ldr	r2, [r3, #20]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b08a      	sub	sp, #40	; 0x28
 8006f92:	af02      	add	r7, sp, #8
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	603b      	str	r3, [r7, #0]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d17c      	bne.n	80070a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <HAL_UART_Transmit+0x2c>
 8006fb4:	88fb      	ldrh	r3, [r7, #6]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e075      	b.n	80070aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_UART_Transmit+0x3e>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e06e      	b.n	80070aa <HAL_UART_Transmit+0x11c>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2221      	movs	r2, #33	; 0x21
 8006fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fe2:	f7fc f907 	bl	80031f4 <HAL_GetTick>
 8006fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	88fa      	ldrh	r2, [r7, #6]
 8006fec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffc:	d108      	bne.n	8007010 <HAL_UART_Transmit+0x82>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007006:	2300      	movs	r3, #0
 8007008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	e003      	b.n	8007018 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007014:	2300      	movs	r3, #0
 8007016:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007020:	e02a      	b.n	8007078 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2200      	movs	r2, #0
 800702a:	2180      	movs	r1, #128	; 0x80
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 fb1f 	bl	8007670 <UART_WaitOnFlagUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e036      	b.n	80070aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007050:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	3302      	adds	r3, #2
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	e007      	b.n	800706a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	3301      	adds	r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1cf      	bne.n	8007022 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2200      	movs	r2, #0
 800708a:	2140      	movs	r1, #64	; 0x40
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 faef 	bl	8007670 <UART_WaitOnFlagUntilTimeout>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e006      	b.n	80070aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e000      	b.n	80070aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070a8:	2302      	movs	r3, #2
  }
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3720      	adds	r7, #32
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	4613      	mov	r3, r2
 80070be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d11d      	bne.n	8007108 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <HAL_UART_Receive_IT+0x26>
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e016      	b.n	800710a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d101      	bne.n	80070ea <HAL_UART_Receive_IT+0x38>
 80070e6:	2302      	movs	r3, #2
 80070e8:	e00f      	b.n	800710a <HAL_UART_Receive_IT+0x58>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070f8:	88fb      	ldrh	r3, [r7, #6]
 80070fa:	461a      	mov	r2, r3
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 fb24 	bl	800774c <UART_Start_Receive_IT>
 8007104:	4603      	mov	r3, r0
 8007106:	e000      	b.n	800710a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007108:	2302      	movs	r3, #2
  }
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b0ba      	sub	sp, #232	; 0xe8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800713a:	2300      	movs	r3, #0
 800713c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007140:	2300      	movs	r3, #0
 8007142:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10f      	bne.n	800717a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800715a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d009      	beq.n	800717a <HAL_UART_IRQHandler+0x66>
 8007166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fc03 	bl	800797e <UART_Receive_IT>
      return;
 8007178:	e256      	b.n	8007628 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800717a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 80de 	beq.w	8007340 <HAL_UART_IRQHandler+0x22c>
 8007184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b00      	cmp	r3, #0
 800718e:	d106      	bne.n	800719e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007194:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80d1 	beq.w	8007340 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800719e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <HAL_UART_IRQHandler+0xae>
 80071aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	f043 0201 	orr.w	r2, r3, #1
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c6:	f003 0304 	and.w	r3, r3, #4
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <HAL_UART_IRQHandler+0xd2>
 80071ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d005      	beq.n	80071e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f043 0202 	orr.w	r2, r3, #2
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00b      	beq.n	800720a <HAL_UART_IRQHandler+0xf6>
 80071f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d005      	beq.n	800720a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	f043 0204 	orr.w	r2, r3, #4
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800720a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d011      	beq.n	800723a <HAL_UART_IRQHandler+0x126>
 8007216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b00      	cmp	r3, #0
 8007220:	d105      	bne.n	800722e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	f043 0208 	orr.w	r2, r3, #8
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 81ed 	beq.w	800761e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	d008      	beq.n	8007262 <HAL_UART_IRQHandler+0x14e>
 8007250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fb8e 	bl	800797e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b40      	cmp	r3, #64	; 0x40
 800726e:	bf0c      	ite	eq
 8007270:	2301      	moveq	r3, #1
 8007272:	2300      	movne	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d103      	bne.n	800728e <HAL_UART_IRQHandler+0x17a>
 8007286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800728a:	2b00      	cmp	r3, #0
 800728c:	d04f      	beq.n	800732e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa96 	bl	80077c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	d141      	bne.n	8007326 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3314      	adds	r3, #20
 80072a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3314      	adds	r3, #20
 80072ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1d9      	bne.n	80072a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d013      	beq.n	800731e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	4a7d      	ldr	r2, [pc, #500]	; (80074f0 <HAL_UART_IRQHandler+0x3dc>)
 80072fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	4618      	mov	r0, r3
 8007304:	f7fc fe40 	bl	8003f88 <HAL_DMA_Abort_IT>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d016      	beq.n	800733c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800731c:	e00e      	b.n	800733c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f990 	bl	8007644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007324:	e00a      	b.n	800733c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f98c 	bl	8007644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732c:	e006      	b.n	800733c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f988 	bl	8007644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800733a:	e170      	b.n	800761e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733c:	bf00      	nop
    return;
 800733e:	e16e      	b.n	800761e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007344:	2b01      	cmp	r3, #1
 8007346:	f040 814a 	bne.w	80075de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800734a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800734e:	f003 0310 	and.w	r3, r3, #16
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 8143 	beq.w	80075de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 813c 	beq.w	80075de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007366:	2300      	movs	r3, #0
 8007368:	60bb      	str	r3, [r7, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	60bb      	str	r3, [r7, #8]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	60bb      	str	r3, [r7, #8]
 800737a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007386:	2b40      	cmp	r3, #64	; 0x40
 8007388:	f040 80b4 	bne.w	80074f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007398:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8140 	beq.w	8007622 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073aa:	429a      	cmp	r2, r3
 80073ac:	f080 8139 	bcs.w	8007622 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c2:	f000 8088 	beq.w	80074d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	330c      	adds	r3, #12
 80073cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	330c      	adds	r3, #12
 80073ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800740a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1d9      	bne.n	80073c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3314      	adds	r3, #20
 8007418:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007424:	f023 0301 	bic.w	r3, r3, #1
 8007428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3314      	adds	r3, #20
 8007432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007436:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800743a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800743e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e1      	bne.n	8007412 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3314      	adds	r3, #20
 8007454:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800745e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3314      	adds	r3, #20
 800746e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007472:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007474:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007478:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e3      	bne.n	800744e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	330c      	adds	r3, #12
 800749a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a6:	f023 0310 	bic.w	r3, r3, #16
 80074aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	330c      	adds	r3, #12
 80074b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80074b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80074ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e3      	bne.n	8007494 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fc fce9 	bl	8003ea8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074de:	b29b      	uxth	r3, r3
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f8b6 	bl	8007658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074ec:	e099      	b.n	8007622 <HAL_UART_IRQHandler+0x50e>
 80074ee:	bf00      	nop
 80074f0:	08007887 	.word	0x08007887
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 808b 	beq.w	8007626 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8086 	beq.w	8007626 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	330c      	adds	r3, #12
 8007520:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800752a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007530:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	330c      	adds	r3, #12
 800753a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800753e:	647a      	str	r2, [r7, #68]	; 0x44
 8007540:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800754c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e3      	bne.n	800751a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3314      	adds	r3, #20
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	623b      	str	r3, [r7, #32]
   return(result);
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	f023 0301 	bic.w	r3, r3, #1
 8007568:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3314      	adds	r3, #20
 8007572:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007576:	633a      	str	r2, [r7, #48]	; 0x30
 8007578:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800757c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e3      	bne.n	8007552 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	330c      	adds	r3, #12
 800759e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	e853 3f00 	ldrex	r3, [r3]
 80075a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0310 	bic.w	r3, r3, #16
 80075ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80075bc:	61fa      	str	r2, [r7, #28]
 80075be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	69b9      	ldr	r1, [r7, #24]
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	617b      	str	r3, [r7, #20]
   return(result);
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e3      	bne.n	8007598 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f83e 	bl	8007658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075dc:	e023      	b.n	8007626 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d009      	beq.n	80075fe <HAL_UART_IRQHandler+0x4ea>
 80075ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f959 	bl	80078ae <UART_Transmit_IT>
    return;
 80075fc:	e014      	b.n	8007628 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00e      	beq.n	8007628 <HAL_UART_IRQHandler+0x514>
 800760a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800760e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f999 	bl	800794e <UART_EndTransmit_IT>
    return;
 800761c:	e004      	b.n	8007628 <HAL_UART_IRQHandler+0x514>
    return;
 800761e:	bf00      	nop
 8007620:	e002      	b.n	8007628 <HAL_UART_IRQHandler+0x514>
      return;
 8007622:	bf00      	nop
 8007624:	e000      	b.n	8007628 <HAL_UART_IRQHandler+0x514>
      return;
 8007626:	bf00      	nop
  }
}
 8007628:	37e8      	adds	r7, #232	; 0xe8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop

08007630 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b090      	sub	sp, #64	; 0x40
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	603b      	str	r3, [r7, #0]
 800767c:	4613      	mov	r3, r2
 800767e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007680:	e050      	b.n	8007724 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007688:	d04c      	beq.n	8007724 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800768a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800768c:	2b00      	cmp	r3, #0
 800768e:	d007      	beq.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007690:	f7fb fdb0 	bl	80031f4 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800769c:	429a      	cmp	r2, r3
 800769e:	d241      	bcs.n	8007724 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	330c      	adds	r3, #12
 80076a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	330c      	adds	r3, #12
 80076be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076c0:	637a      	str	r2, [r7, #52]	; 0x34
 80076c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e5      	bne.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3314      	adds	r3, #20
 80076da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	613b      	str	r3, [r7, #16]
   return(result);
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	f023 0301 	bic.w	r3, r3, #1
 80076ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3314      	adds	r3, #20
 80076f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076f4:	623a      	str	r2, [r7, #32]
 80076f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f8:	69f9      	ldr	r1, [r7, #28]
 80076fa:	6a3a      	ldr	r2, [r7, #32]
 80076fc:	e841 2300 	strex	r3, r2, [r1]
 8007700:	61bb      	str	r3, [r7, #24]
   return(result);
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1e5      	bne.n	80076d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2220      	movs	r2, #32
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e00f      	b.n	8007744 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	4013      	ands	r3, r2
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	429a      	cmp	r2, r3
 8007732:	bf0c      	ite	eq
 8007734:	2301      	moveq	r3, #1
 8007736:	2300      	movne	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	461a      	mov	r2, r3
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	429a      	cmp	r2, r3
 8007740:	d09f      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3740      	adds	r7, #64	; 0x40
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	88fa      	ldrh	r2, [r7, #6]
 8007764:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	88fa      	ldrh	r2, [r7, #6]
 800776a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2222      	movs	r2, #34	; 0x22
 8007776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007790:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	695a      	ldr	r2, [r3, #20]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0201 	orr.w	r2, r2, #1
 80077a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0220 	orr.w	r2, r2, #32
 80077b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b095      	sub	sp, #84	; 0x54
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	330c      	adds	r3, #12
 80077ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d2:	e853 3f00 	ldrex	r3, [r3]
 80077d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330c      	adds	r3, #12
 80077e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077e8:	643a      	str	r2, [r7, #64]	; 0x40
 80077ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077f0:	e841 2300 	strex	r3, r2, [r1]
 80077f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e5      	bne.n	80077c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3314      	adds	r3, #20
 8007802:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	61fb      	str	r3, [r7, #28]
   return(result);
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	f023 0301 	bic.w	r3, r3, #1
 8007812:	64bb      	str	r3, [r7, #72]	; 0x48
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3314      	adds	r3, #20
 800781a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800781c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e5      	bne.n	80077fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	2b01      	cmp	r3, #1
 8007836:	d119      	bne.n	800786c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	330c      	adds	r3, #12
 800783e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	60bb      	str	r3, [r7, #8]
   return(result);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f023 0310 	bic.w	r3, r3, #16
 800784e:	647b      	str	r3, [r7, #68]	; 0x44
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	330c      	adds	r3, #12
 8007856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007858:	61ba      	str	r2, [r7, #24]
 800785a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6979      	ldr	r1, [r7, #20]
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	613b      	str	r3, [r7, #16]
   return(result);
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e5      	bne.n	8007838 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2220      	movs	r2, #32
 8007870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	631a      	str	r2, [r3, #48]	; 0x30
}
 800787a:	bf00      	nop
 800787c:	3754      	adds	r7, #84	; 0x54
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f7ff fecf 	bl	8007644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078a6:	bf00      	nop
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b085      	sub	sp, #20
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b21      	cmp	r3, #33	; 0x21
 80078c0:	d13e      	bne.n	8007940 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ca:	d114      	bne.n	80078f6 <UART_Transmit_IT+0x48>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d110      	bne.n	80078f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	1c9a      	adds	r2, r3, #2
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	621a      	str	r2, [r3, #32]
 80078f4:	e008      	b.n	8007908 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	1c59      	adds	r1, r3, #1
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	6211      	str	r1, [r2, #32]
 8007900:	781a      	ldrb	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800790c:	b29b      	uxth	r3, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	b29b      	uxth	r3, r3
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	4619      	mov	r1, r3
 8007916:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10f      	bne.n	800793c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800792a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800793a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	e000      	b.n	8007942 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007940:	2302      	movs	r3, #2
  }
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68da      	ldr	r2, [r3, #12]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007964:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7ff fe5e 	bl	8007630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b08c      	sub	sp, #48	; 0x30
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b22      	cmp	r3, #34	; 0x22
 8007990:	f040 80ab 	bne.w	8007aea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800799c:	d117      	bne.n	80079ce <UART_Receive_IT+0x50>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d113      	bne.n	80079ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079bc:	b29a      	uxth	r2, r3
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c6:	1c9a      	adds	r2, r3, #2
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	629a      	str	r2, [r3, #40]	; 0x28
 80079cc:	e026      	b.n	8007a1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079d4:	2300      	movs	r3, #0
 80079d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e0:	d007      	beq.n	80079f2 <UART_Receive_IT+0x74>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10a      	bne.n	8007a00 <UART_Receive_IT+0x82>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	e008      	b.n	8007a12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d15a      	bne.n	8007ae6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68da      	ldr	r2, [r3, #12]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0220 	bic.w	r2, r2, #32
 8007a3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	695a      	ldr	r2, [r3, #20]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0201 	bic.w	r2, r2, #1
 8007a5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d135      	bne.n	8007adc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	330c      	adds	r3, #12
 8007a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	613b      	str	r3, [r7, #16]
   return(result);
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f023 0310 	bic.w	r3, r3, #16
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	330c      	adds	r3, #12
 8007a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a96:	623a      	str	r2, [r7, #32]
 8007a98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	69f9      	ldr	r1, [r7, #28]
 8007a9c:	6a3a      	ldr	r2, [r7, #32]
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e5      	bne.n	8007a76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0310 	and.w	r3, r3, #16
 8007ab4:	2b10      	cmp	r3, #16
 8007ab6:	d10a      	bne.n	8007ace <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff fdbf 	bl	8007658 <HAL_UARTEx_RxEventCallback>
 8007ada:	e002      	b.n	8007ae2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7fb f9bf 	bl	8002e60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e002      	b.n	8007aec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e000      	b.n	8007aec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007aea:	2302      	movs	r3, #2
  }
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3730      	adds	r7, #48	; 0x30
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af8:	b09f      	sub	sp, #124	; 0x7c
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0a:	68d9      	ldr	r1, [r3, #12]
 8007b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	ea40 0301 	orr.w	r3, r0, r1
 8007b14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	431a      	orrs	r2, r3
 8007b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b38:	f021 010c 	bic.w	r1, r1, #12
 8007b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b42:	430b      	orrs	r3, r1
 8007b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b52:	6999      	ldr	r1, [r3, #24]
 8007b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	ea40 0301 	orr.w	r3, r0, r1
 8007b5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4bc5      	ldr	r3, [pc, #788]	; (8007e78 <UART_SetConfig+0x384>)
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d004      	beq.n	8007b72 <UART_SetConfig+0x7e>
 8007b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	4bc3      	ldr	r3, [pc, #780]	; (8007e7c <UART_SetConfig+0x388>)
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d103      	bne.n	8007b7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b72:	f7fd fc09 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8007b76:	6778      	str	r0, [r7, #116]	; 0x74
 8007b78:	e002      	b.n	8007b80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b7a:	f7fd fbf1 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8007b7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b88:	f040 80b6 	bne.w	8007cf8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b8e:	461c      	mov	r4, r3
 8007b90:	f04f 0500 	mov.w	r5, #0
 8007b94:	4622      	mov	r2, r4
 8007b96:	462b      	mov	r3, r5
 8007b98:	1891      	adds	r1, r2, r2
 8007b9a:	6439      	str	r1, [r7, #64]	; 0x40
 8007b9c:	415b      	adcs	r3, r3
 8007b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8007ba0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ba4:	1912      	adds	r2, r2, r4
 8007ba6:	eb45 0303 	adc.w	r3, r5, r3
 8007baa:	f04f 0000 	mov.w	r0, #0
 8007bae:	f04f 0100 	mov.w	r1, #0
 8007bb2:	00d9      	lsls	r1, r3, #3
 8007bb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bb8:	00d0      	lsls	r0, r2, #3
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	1911      	adds	r1, r2, r4
 8007bc0:	6639      	str	r1, [r7, #96]	; 0x60
 8007bc2:	416b      	adcs	r3, r5
 8007bc4:	667b      	str	r3, [r7, #100]	; 0x64
 8007bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f04f 0300 	mov.w	r3, #0
 8007bd0:	1891      	adds	r1, r2, r2
 8007bd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007bd4:	415b      	adcs	r3, r3
 8007bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007bdc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007be0:	f7f8 ff6c 	bl	8000abc <__aeabi_uldivmod>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4ba5      	ldr	r3, [pc, #660]	; (8007e80 <UART_SetConfig+0x38c>)
 8007bea:	fba3 2302 	umull	r2, r3, r3, r2
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	011e      	lsls	r6, r3, #4
 8007bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bf4:	461c      	mov	r4, r3
 8007bf6:	f04f 0500 	mov.w	r5, #0
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	462b      	mov	r3, r5
 8007bfe:	1891      	adds	r1, r2, r2
 8007c00:	6339      	str	r1, [r7, #48]	; 0x30
 8007c02:	415b      	adcs	r3, r3
 8007c04:	637b      	str	r3, [r7, #52]	; 0x34
 8007c06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c0a:	1912      	adds	r2, r2, r4
 8007c0c:	eb45 0303 	adc.w	r3, r5, r3
 8007c10:	f04f 0000 	mov.w	r0, #0
 8007c14:	f04f 0100 	mov.w	r1, #0
 8007c18:	00d9      	lsls	r1, r3, #3
 8007c1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c1e:	00d0      	lsls	r0, r2, #3
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	1911      	adds	r1, r2, r4
 8007c26:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c28:	416b      	adcs	r3, r5
 8007c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	461a      	mov	r2, r3
 8007c32:	f04f 0300 	mov.w	r3, #0
 8007c36:	1891      	adds	r1, r2, r2
 8007c38:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c3a:	415b      	adcs	r3, r3
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c46:	f7f8 ff39 	bl	8000abc <__aeabi_uldivmod>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4b8c      	ldr	r3, [pc, #560]	; (8007e80 <UART_SetConfig+0x38c>)
 8007c50:	fba3 1302 	umull	r1, r3, r3, r2
 8007c54:	095b      	lsrs	r3, r3, #5
 8007c56:	2164      	movs	r1, #100	; 0x64
 8007c58:	fb01 f303 	mul.w	r3, r1, r3
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	3332      	adds	r3, #50	; 0x32
 8007c62:	4a87      	ldr	r2, [pc, #540]	; (8007e80 <UART_SetConfig+0x38c>)
 8007c64:	fba2 2303 	umull	r2, r3, r2, r3
 8007c68:	095b      	lsrs	r3, r3, #5
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c70:	441e      	add	r6, r3
 8007c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c74:	4618      	mov	r0, r3
 8007c76:	f04f 0100 	mov.w	r1, #0
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	1894      	adds	r4, r2, r2
 8007c80:	623c      	str	r4, [r7, #32]
 8007c82:	415b      	adcs	r3, r3
 8007c84:	627b      	str	r3, [r7, #36]	; 0x24
 8007c86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c8a:	1812      	adds	r2, r2, r0
 8007c8c:	eb41 0303 	adc.w	r3, r1, r3
 8007c90:	f04f 0400 	mov.w	r4, #0
 8007c94:	f04f 0500 	mov.w	r5, #0
 8007c98:	00dd      	lsls	r5, r3, #3
 8007c9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c9e:	00d4      	lsls	r4, r2, #3
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	462b      	mov	r3, r5
 8007ca4:	1814      	adds	r4, r2, r0
 8007ca6:	653c      	str	r4, [r7, #80]	; 0x50
 8007ca8:	414b      	adcs	r3, r1
 8007caa:	657b      	str	r3, [r7, #84]	; 0x54
 8007cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	f04f 0300 	mov.w	r3, #0
 8007cb6:	1891      	adds	r1, r2, r2
 8007cb8:	61b9      	str	r1, [r7, #24]
 8007cba:	415b      	adcs	r3, r3
 8007cbc:	61fb      	str	r3, [r7, #28]
 8007cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007cc6:	f7f8 fef9 	bl	8000abc <__aeabi_uldivmod>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4b6c      	ldr	r3, [pc, #432]	; (8007e80 <UART_SetConfig+0x38c>)
 8007cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8007cd4:	095b      	lsrs	r3, r3, #5
 8007cd6:	2164      	movs	r1, #100	; 0x64
 8007cd8:	fb01 f303 	mul.w	r3, r1, r3
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	3332      	adds	r3, #50	; 0x32
 8007ce2:	4a67      	ldr	r2, [pc, #412]	; (8007e80 <UART_SetConfig+0x38c>)
 8007ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce8:	095b      	lsrs	r3, r3, #5
 8007cea:	f003 0207 	and.w	r2, r3, #7
 8007cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4432      	add	r2, r6
 8007cf4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cf6:	e0b9      	b.n	8007e6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cfa:	461c      	mov	r4, r3
 8007cfc:	f04f 0500 	mov.w	r5, #0
 8007d00:	4622      	mov	r2, r4
 8007d02:	462b      	mov	r3, r5
 8007d04:	1891      	adds	r1, r2, r2
 8007d06:	6139      	str	r1, [r7, #16]
 8007d08:	415b      	adcs	r3, r3
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d10:	1912      	adds	r2, r2, r4
 8007d12:	eb45 0303 	adc.w	r3, r5, r3
 8007d16:	f04f 0000 	mov.w	r0, #0
 8007d1a:	f04f 0100 	mov.w	r1, #0
 8007d1e:	00d9      	lsls	r1, r3, #3
 8007d20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d24:	00d0      	lsls	r0, r2, #3
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	eb12 0804 	adds.w	r8, r2, r4
 8007d2e:	eb43 0905 	adc.w	r9, r3, r5
 8007d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f04f 0100 	mov.w	r1, #0
 8007d3c:	f04f 0200 	mov.w	r2, #0
 8007d40:	f04f 0300 	mov.w	r3, #0
 8007d44:	008b      	lsls	r3, r1, #2
 8007d46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d4a:	0082      	lsls	r2, r0, #2
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	4649      	mov	r1, r9
 8007d50:	f7f8 feb4 	bl	8000abc <__aeabi_uldivmod>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4b49      	ldr	r3, [pc, #292]	; (8007e80 <UART_SetConfig+0x38c>)
 8007d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	011e      	lsls	r6, r3, #4
 8007d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d64:	4618      	mov	r0, r3
 8007d66:	f04f 0100 	mov.w	r1, #0
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	1894      	adds	r4, r2, r2
 8007d70:	60bc      	str	r4, [r7, #8]
 8007d72:	415b      	adcs	r3, r3
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d7a:	1812      	adds	r2, r2, r0
 8007d7c:	eb41 0303 	adc.w	r3, r1, r3
 8007d80:	f04f 0400 	mov.w	r4, #0
 8007d84:	f04f 0500 	mov.w	r5, #0
 8007d88:	00dd      	lsls	r5, r3, #3
 8007d8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d8e:	00d4      	lsls	r4, r2, #3
 8007d90:	4622      	mov	r2, r4
 8007d92:	462b      	mov	r3, r5
 8007d94:	1814      	adds	r4, r2, r0
 8007d96:	64bc      	str	r4, [r7, #72]	; 0x48
 8007d98:	414b      	adcs	r3, r1
 8007d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f04f 0100 	mov.w	r1, #0
 8007da6:	f04f 0200 	mov.w	r2, #0
 8007daa:	f04f 0300 	mov.w	r3, #0
 8007dae:	008b      	lsls	r3, r1, #2
 8007db0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007db4:	0082      	lsls	r2, r0, #2
 8007db6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007dba:	f7f8 fe7f 	bl	8000abc <__aeabi_uldivmod>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4b2f      	ldr	r3, [pc, #188]	; (8007e80 <UART_SetConfig+0x38c>)
 8007dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8007dc8:	095b      	lsrs	r3, r3, #5
 8007dca:	2164      	movs	r1, #100	; 0x64
 8007dcc:	fb01 f303 	mul.w	r3, r1, r3
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	3332      	adds	r3, #50	; 0x32
 8007dd6:	4a2a      	ldr	r2, [pc, #168]	; (8007e80 <UART_SetConfig+0x38c>)
 8007dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ddc:	095b      	lsrs	r3, r3, #5
 8007dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007de2:	441e      	add	r6, r3
 8007de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007de6:	4618      	mov	r0, r3
 8007de8:	f04f 0100 	mov.w	r1, #0
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	1894      	adds	r4, r2, r2
 8007df2:	603c      	str	r4, [r7, #0]
 8007df4:	415b      	adcs	r3, r3
 8007df6:	607b      	str	r3, [r7, #4]
 8007df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dfc:	1812      	adds	r2, r2, r0
 8007dfe:	eb41 0303 	adc.w	r3, r1, r3
 8007e02:	f04f 0400 	mov.w	r4, #0
 8007e06:	f04f 0500 	mov.w	r5, #0
 8007e0a:	00dd      	lsls	r5, r3, #3
 8007e0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e10:	00d4      	lsls	r4, r2, #3
 8007e12:	4622      	mov	r2, r4
 8007e14:	462b      	mov	r3, r5
 8007e16:	eb12 0a00 	adds.w	sl, r2, r0
 8007e1a:	eb43 0b01 	adc.w	fp, r3, r1
 8007e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f04f 0100 	mov.w	r1, #0
 8007e28:	f04f 0200 	mov.w	r2, #0
 8007e2c:	f04f 0300 	mov.w	r3, #0
 8007e30:	008b      	lsls	r3, r1, #2
 8007e32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e36:	0082      	lsls	r2, r0, #2
 8007e38:	4650      	mov	r0, sl
 8007e3a:	4659      	mov	r1, fp
 8007e3c:	f7f8 fe3e 	bl	8000abc <__aeabi_uldivmod>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <UART_SetConfig+0x38c>)
 8007e46:	fba3 1302 	umull	r1, r3, r3, r2
 8007e4a:	095b      	lsrs	r3, r3, #5
 8007e4c:	2164      	movs	r1, #100	; 0x64
 8007e4e:	fb01 f303 	mul.w	r3, r1, r3
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	3332      	adds	r3, #50	; 0x32
 8007e58:	4a09      	ldr	r2, [pc, #36]	; (8007e80 <UART_SetConfig+0x38c>)
 8007e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5e:	095b      	lsrs	r3, r3, #5
 8007e60:	f003 020f 	and.w	r2, r3, #15
 8007e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4432      	add	r2, r6
 8007e6a:	609a      	str	r2, [r3, #8]
}
 8007e6c:	bf00      	nop
 8007e6e:	377c      	adds	r7, #124	; 0x7c
 8007e70:	46bd      	mov	sp, r7
 8007e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e76:	bf00      	nop
 8007e78:	40011000 	.word	0x40011000
 8007e7c:	40011400 	.word	0x40011400
 8007e80:	51eb851f 	.word	0x51eb851f

08007e84 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4b20      	ldr	r3, [pc, #128]	; (8007f24 <FSMC_NORSRAM_Init+0xa0>)
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007eae:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007eb4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007eba:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007ec0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007ec6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007ecc:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007ed2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007ed8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007ede:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007ee4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007eea:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007ef0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d103      	bne.n	8007f08 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f06:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68f9      	ldr	r1, [r7, #12]
 8007f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	fff00080 	.word	0xfff00080

08007f28 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f42:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007f4a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f56:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007f5e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007f66:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007f70:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	3b02      	subs	r3, #2
 8007f78:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007f7a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f80:	4313      	orrs	r3, r2
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6979      	ldr	r1, [r7, #20]
 8007f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	371c      	adds	r7, #28
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
	...

08007fa4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
 8007fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fbc:	d122      	bne.n	8008004 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	4b15      	ldr	r3, [pc, #84]	; (8008020 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007fcc:	4013      	ands	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007fda:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007fe2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007fea:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007ff0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6979      	ldr	r1, [r7, #20]
 8007ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008002:	e005      	b.n	8008010 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800800c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	cff00000 	.word	0xcff00000

08008024 <__errno>:
 8008024:	4b01      	ldr	r3, [pc, #4]	; (800802c <__errno+0x8>)
 8008026:	6818      	ldr	r0, [r3, #0]
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	20000014 	.word	0x20000014

08008030 <__libc_init_array>:
 8008030:	b570      	push	{r4, r5, r6, lr}
 8008032:	4d0d      	ldr	r5, [pc, #52]	; (8008068 <__libc_init_array+0x38>)
 8008034:	4c0d      	ldr	r4, [pc, #52]	; (800806c <__libc_init_array+0x3c>)
 8008036:	1b64      	subs	r4, r4, r5
 8008038:	10a4      	asrs	r4, r4, #2
 800803a:	2600      	movs	r6, #0
 800803c:	42a6      	cmp	r6, r4
 800803e:	d109      	bne.n	8008054 <__libc_init_array+0x24>
 8008040:	4d0b      	ldr	r5, [pc, #44]	; (8008070 <__libc_init_array+0x40>)
 8008042:	4c0c      	ldr	r4, [pc, #48]	; (8008074 <__libc_init_array+0x44>)
 8008044:	f000 fc62 	bl	800890c <_init>
 8008048:	1b64      	subs	r4, r4, r5
 800804a:	10a4      	asrs	r4, r4, #2
 800804c:	2600      	movs	r6, #0
 800804e:	42a6      	cmp	r6, r4
 8008050:	d105      	bne.n	800805e <__libc_init_array+0x2e>
 8008052:	bd70      	pop	{r4, r5, r6, pc}
 8008054:	f855 3b04 	ldr.w	r3, [r5], #4
 8008058:	4798      	blx	r3
 800805a:	3601      	adds	r6, #1
 800805c:	e7ee      	b.n	800803c <__libc_init_array+0xc>
 800805e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008062:	4798      	blx	r3
 8008064:	3601      	adds	r6, #1
 8008066:	e7f2      	b.n	800804e <__libc_init_array+0x1e>
 8008068:	0800b9c8 	.word	0x0800b9c8
 800806c:	0800b9c8 	.word	0x0800b9c8
 8008070:	0800b9c8 	.word	0x0800b9c8
 8008074:	0800b9cc 	.word	0x0800b9cc

08008078 <memset>:
 8008078:	4402      	add	r2, r0
 800807a:	4603      	mov	r3, r0
 800807c:	4293      	cmp	r3, r2
 800807e:	d100      	bne.n	8008082 <memset+0xa>
 8008080:	4770      	bx	lr
 8008082:	f803 1b01 	strb.w	r1, [r3], #1
 8008086:	e7f9      	b.n	800807c <memset+0x4>

08008088 <sniprintf>:
 8008088:	b40c      	push	{r2, r3}
 800808a:	b530      	push	{r4, r5, lr}
 800808c:	4b17      	ldr	r3, [pc, #92]	; (80080ec <sniprintf+0x64>)
 800808e:	1e0c      	subs	r4, r1, #0
 8008090:	681d      	ldr	r5, [r3, #0]
 8008092:	b09d      	sub	sp, #116	; 0x74
 8008094:	da08      	bge.n	80080a8 <sniprintf+0x20>
 8008096:	238b      	movs	r3, #139	; 0x8b
 8008098:	602b      	str	r3, [r5, #0]
 800809a:	f04f 30ff 	mov.w	r0, #4294967295
 800809e:	b01d      	add	sp, #116	; 0x74
 80080a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080a4:	b002      	add	sp, #8
 80080a6:	4770      	bx	lr
 80080a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80080ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80080b0:	bf14      	ite	ne
 80080b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80080b6:	4623      	moveq	r3, r4
 80080b8:	9304      	str	r3, [sp, #16]
 80080ba:	9307      	str	r3, [sp, #28]
 80080bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080c0:	9002      	str	r0, [sp, #8]
 80080c2:	9006      	str	r0, [sp, #24]
 80080c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80080c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80080ca:	ab21      	add	r3, sp, #132	; 0x84
 80080cc:	a902      	add	r1, sp, #8
 80080ce:	4628      	mov	r0, r5
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	f000 f869 	bl	80081a8 <_svfiprintf_r>
 80080d6:	1c43      	adds	r3, r0, #1
 80080d8:	bfbc      	itt	lt
 80080da:	238b      	movlt	r3, #139	; 0x8b
 80080dc:	602b      	strlt	r3, [r5, #0]
 80080de:	2c00      	cmp	r4, #0
 80080e0:	d0dd      	beq.n	800809e <sniprintf+0x16>
 80080e2:	9b02      	ldr	r3, [sp, #8]
 80080e4:	2200      	movs	r2, #0
 80080e6:	701a      	strb	r2, [r3, #0]
 80080e8:	e7d9      	b.n	800809e <sniprintf+0x16>
 80080ea:	bf00      	nop
 80080ec:	20000014 	.word	0x20000014

080080f0 <__ssputs_r>:
 80080f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f4:	688e      	ldr	r6, [r1, #8]
 80080f6:	429e      	cmp	r6, r3
 80080f8:	4682      	mov	sl, r0
 80080fa:	460c      	mov	r4, r1
 80080fc:	4690      	mov	r8, r2
 80080fe:	461f      	mov	r7, r3
 8008100:	d838      	bhi.n	8008174 <__ssputs_r+0x84>
 8008102:	898a      	ldrh	r2, [r1, #12]
 8008104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008108:	d032      	beq.n	8008170 <__ssputs_r+0x80>
 800810a:	6825      	ldr	r5, [r4, #0]
 800810c:	6909      	ldr	r1, [r1, #16]
 800810e:	eba5 0901 	sub.w	r9, r5, r1
 8008112:	6965      	ldr	r5, [r4, #20]
 8008114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800811c:	3301      	adds	r3, #1
 800811e:	444b      	add	r3, r9
 8008120:	106d      	asrs	r5, r5, #1
 8008122:	429d      	cmp	r5, r3
 8008124:	bf38      	it	cc
 8008126:	461d      	movcc	r5, r3
 8008128:	0553      	lsls	r3, r2, #21
 800812a:	d531      	bpl.n	8008190 <__ssputs_r+0xa0>
 800812c:	4629      	mov	r1, r5
 800812e:	f000 fb47 	bl	80087c0 <_malloc_r>
 8008132:	4606      	mov	r6, r0
 8008134:	b950      	cbnz	r0, 800814c <__ssputs_r+0x5c>
 8008136:	230c      	movs	r3, #12
 8008138:	f8ca 3000 	str.w	r3, [sl]
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814c:	6921      	ldr	r1, [r4, #16]
 800814e:	464a      	mov	r2, r9
 8008150:	f000 fabe 	bl	80086d0 <memcpy>
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800815a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	6126      	str	r6, [r4, #16]
 8008162:	6165      	str	r5, [r4, #20]
 8008164:	444e      	add	r6, r9
 8008166:	eba5 0509 	sub.w	r5, r5, r9
 800816a:	6026      	str	r6, [r4, #0]
 800816c:	60a5      	str	r5, [r4, #8]
 800816e:	463e      	mov	r6, r7
 8008170:	42be      	cmp	r6, r7
 8008172:	d900      	bls.n	8008176 <__ssputs_r+0x86>
 8008174:	463e      	mov	r6, r7
 8008176:	4632      	mov	r2, r6
 8008178:	6820      	ldr	r0, [r4, #0]
 800817a:	4641      	mov	r1, r8
 800817c:	f000 fab6 	bl	80086ec <memmove>
 8008180:	68a3      	ldr	r3, [r4, #8]
 8008182:	6822      	ldr	r2, [r4, #0]
 8008184:	1b9b      	subs	r3, r3, r6
 8008186:	4432      	add	r2, r6
 8008188:	60a3      	str	r3, [r4, #8]
 800818a:	6022      	str	r2, [r4, #0]
 800818c:	2000      	movs	r0, #0
 800818e:	e7db      	b.n	8008148 <__ssputs_r+0x58>
 8008190:	462a      	mov	r2, r5
 8008192:	f000 fb6f 	bl	8008874 <_realloc_r>
 8008196:	4606      	mov	r6, r0
 8008198:	2800      	cmp	r0, #0
 800819a:	d1e1      	bne.n	8008160 <__ssputs_r+0x70>
 800819c:	6921      	ldr	r1, [r4, #16]
 800819e:	4650      	mov	r0, sl
 80081a0:	f000 fabe 	bl	8008720 <_free_r>
 80081a4:	e7c7      	b.n	8008136 <__ssputs_r+0x46>
	...

080081a8 <_svfiprintf_r>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	4698      	mov	r8, r3
 80081ae:	898b      	ldrh	r3, [r1, #12]
 80081b0:	061b      	lsls	r3, r3, #24
 80081b2:	b09d      	sub	sp, #116	; 0x74
 80081b4:	4607      	mov	r7, r0
 80081b6:	460d      	mov	r5, r1
 80081b8:	4614      	mov	r4, r2
 80081ba:	d50e      	bpl.n	80081da <_svfiprintf_r+0x32>
 80081bc:	690b      	ldr	r3, [r1, #16]
 80081be:	b963      	cbnz	r3, 80081da <_svfiprintf_r+0x32>
 80081c0:	2140      	movs	r1, #64	; 0x40
 80081c2:	f000 fafd 	bl	80087c0 <_malloc_r>
 80081c6:	6028      	str	r0, [r5, #0]
 80081c8:	6128      	str	r0, [r5, #16]
 80081ca:	b920      	cbnz	r0, 80081d6 <_svfiprintf_r+0x2e>
 80081cc:	230c      	movs	r3, #12
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295
 80081d4:	e0d1      	b.n	800837a <_svfiprintf_r+0x1d2>
 80081d6:	2340      	movs	r3, #64	; 0x40
 80081d8:	616b      	str	r3, [r5, #20]
 80081da:	2300      	movs	r3, #0
 80081dc:	9309      	str	r3, [sp, #36]	; 0x24
 80081de:	2320      	movs	r3, #32
 80081e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80081e8:	2330      	movs	r3, #48	; 0x30
 80081ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008394 <_svfiprintf_r+0x1ec>
 80081ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081f2:	f04f 0901 	mov.w	r9, #1
 80081f6:	4623      	mov	r3, r4
 80081f8:	469a      	mov	sl, r3
 80081fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081fe:	b10a      	cbz	r2, 8008204 <_svfiprintf_r+0x5c>
 8008200:	2a25      	cmp	r2, #37	; 0x25
 8008202:	d1f9      	bne.n	80081f8 <_svfiprintf_r+0x50>
 8008204:	ebba 0b04 	subs.w	fp, sl, r4
 8008208:	d00b      	beq.n	8008222 <_svfiprintf_r+0x7a>
 800820a:	465b      	mov	r3, fp
 800820c:	4622      	mov	r2, r4
 800820e:	4629      	mov	r1, r5
 8008210:	4638      	mov	r0, r7
 8008212:	f7ff ff6d 	bl	80080f0 <__ssputs_r>
 8008216:	3001      	adds	r0, #1
 8008218:	f000 80aa 	beq.w	8008370 <_svfiprintf_r+0x1c8>
 800821c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800821e:	445a      	add	r2, fp
 8008220:	9209      	str	r2, [sp, #36]	; 0x24
 8008222:	f89a 3000 	ldrb.w	r3, [sl]
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 80a2 	beq.w	8008370 <_svfiprintf_r+0x1c8>
 800822c:	2300      	movs	r3, #0
 800822e:	f04f 32ff 	mov.w	r2, #4294967295
 8008232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008236:	f10a 0a01 	add.w	sl, sl, #1
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	9307      	str	r3, [sp, #28]
 800823e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008242:	931a      	str	r3, [sp, #104]	; 0x68
 8008244:	4654      	mov	r4, sl
 8008246:	2205      	movs	r2, #5
 8008248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824c:	4851      	ldr	r0, [pc, #324]	; (8008394 <_svfiprintf_r+0x1ec>)
 800824e:	f7f7 ffc7 	bl	80001e0 <memchr>
 8008252:	9a04      	ldr	r2, [sp, #16]
 8008254:	b9d8      	cbnz	r0, 800828e <_svfiprintf_r+0xe6>
 8008256:	06d0      	lsls	r0, r2, #27
 8008258:	bf44      	itt	mi
 800825a:	2320      	movmi	r3, #32
 800825c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008260:	0711      	lsls	r1, r2, #28
 8008262:	bf44      	itt	mi
 8008264:	232b      	movmi	r3, #43	; 0x2b
 8008266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800826a:	f89a 3000 	ldrb.w	r3, [sl]
 800826e:	2b2a      	cmp	r3, #42	; 0x2a
 8008270:	d015      	beq.n	800829e <_svfiprintf_r+0xf6>
 8008272:	9a07      	ldr	r2, [sp, #28]
 8008274:	4654      	mov	r4, sl
 8008276:	2000      	movs	r0, #0
 8008278:	f04f 0c0a 	mov.w	ip, #10
 800827c:	4621      	mov	r1, r4
 800827e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008282:	3b30      	subs	r3, #48	; 0x30
 8008284:	2b09      	cmp	r3, #9
 8008286:	d94e      	bls.n	8008326 <_svfiprintf_r+0x17e>
 8008288:	b1b0      	cbz	r0, 80082b8 <_svfiprintf_r+0x110>
 800828a:	9207      	str	r2, [sp, #28]
 800828c:	e014      	b.n	80082b8 <_svfiprintf_r+0x110>
 800828e:	eba0 0308 	sub.w	r3, r0, r8
 8008292:	fa09 f303 	lsl.w	r3, r9, r3
 8008296:	4313      	orrs	r3, r2
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	46a2      	mov	sl, r4
 800829c:	e7d2      	b.n	8008244 <_svfiprintf_r+0x9c>
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	1d19      	adds	r1, r3, #4
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	9103      	str	r1, [sp, #12]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bfbb      	ittet	lt
 80082aa:	425b      	neglt	r3, r3
 80082ac:	f042 0202 	orrlt.w	r2, r2, #2
 80082b0:	9307      	strge	r3, [sp, #28]
 80082b2:	9307      	strlt	r3, [sp, #28]
 80082b4:	bfb8      	it	lt
 80082b6:	9204      	strlt	r2, [sp, #16]
 80082b8:	7823      	ldrb	r3, [r4, #0]
 80082ba:	2b2e      	cmp	r3, #46	; 0x2e
 80082bc:	d10c      	bne.n	80082d8 <_svfiprintf_r+0x130>
 80082be:	7863      	ldrb	r3, [r4, #1]
 80082c0:	2b2a      	cmp	r3, #42	; 0x2a
 80082c2:	d135      	bne.n	8008330 <_svfiprintf_r+0x188>
 80082c4:	9b03      	ldr	r3, [sp, #12]
 80082c6:	1d1a      	adds	r2, r3, #4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	9203      	str	r2, [sp, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bfb8      	it	lt
 80082d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80082d4:	3402      	adds	r4, #2
 80082d6:	9305      	str	r3, [sp, #20]
 80082d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80083a4 <_svfiprintf_r+0x1fc>
 80082dc:	7821      	ldrb	r1, [r4, #0]
 80082de:	2203      	movs	r2, #3
 80082e0:	4650      	mov	r0, sl
 80082e2:	f7f7 ff7d 	bl	80001e0 <memchr>
 80082e6:	b140      	cbz	r0, 80082fa <_svfiprintf_r+0x152>
 80082e8:	2340      	movs	r3, #64	; 0x40
 80082ea:	eba0 000a 	sub.w	r0, r0, sl
 80082ee:	fa03 f000 	lsl.w	r0, r3, r0
 80082f2:	9b04      	ldr	r3, [sp, #16]
 80082f4:	4303      	orrs	r3, r0
 80082f6:	3401      	adds	r4, #1
 80082f8:	9304      	str	r3, [sp, #16]
 80082fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082fe:	4826      	ldr	r0, [pc, #152]	; (8008398 <_svfiprintf_r+0x1f0>)
 8008300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008304:	2206      	movs	r2, #6
 8008306:	f7f7 ff6b 	bl	80001e0 <memchr>
 800830a:	2800      	cmp	r0, #0
 800830c:	d038      	beq.n	8008380 <_svfiprintf_r+0x1d8>
 800830e:	4b23      	ldr	r3, [pc, #140]	; (800839c <_svfiprintf_r+0x1f4>)
 8008310:	bb1b      	cbnz	r3, 800835a <_svfiprintf_r+0x1b2>
 8008312:	9b03      	ldr	r3, [sp, #12]
 8008314:	3307      	adds	r3, #7
 8008316:	f023 0307 	bic.w	r3, r3, #7
 800831a:	3308      	adds	r3, #8
 800831c:	9303      	str	r3, [sp, #12]
 800831e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008320:	4433      	add	r3, r6
 8008322:	9309      	str	r3, [sp, #36]	; 0x24
 8008324:	e767      	b.n	80081f6 <_svfiprintf_r+0x4e>
 8008326:	fb0c 3202 	mla	r2, ip, r2, r3
 800832a:	460c      	mov	r4, r1
 800832c:	2001      	movs	r0, #1
 800832e:	e7a5      	b.n	800827c <_svfiprintf_r+0xd4>
 8008330:	2300      	movs	r3, #0
 8008332:	3401      	adds	r4, #1
 8008334:	9305      	str	r3, [sp, #20]
 8008336:	4619      	mov	r1, r3
 8008338:	f04f 0c0a 	mov.w	ip, #10
 800833c:	4620      	mov	r0, r4
 800833e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008342:	3a30      	subs	r2, #48	; 0x30
 8008344:	2a09      	cmp	r2, #9
 8008346:	d903      	bls.n	8008350 <_svfiprintf_r+0x1a8>
 8008348:	2b00      	cmp	r3, #0
 800834a:	d0c5      	beq.n	80082d8 <_svfiprintf_r+0x130>
 800834c:	9105      	str	r1, [sp, #20]
 800834e:	e7c3      	b.n	80082d8 <_svfiprintf_r+0x130>
 8008350:	fb0c 2101 	mla	r1, ip, r1, r2
 8008354:	4604      	mov	r4, r0
 8008356:	2301      	movs	r3, #1
 8008358:	e7f0      	b.n	800833c <_svfiprintf_r+0x194>
 800835a:	ab03      	add	r3, sp, #12
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	462a      	mov	r2, r5
 8008360:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <_svfiprintf_r+0x1f8>)
 8008362:	a904      	add	r1, sp, #16
 8008364:	4638      	mov	r0, r7
 8008366:	f3af 8000 	nop.w
 800836a:	1c42      	adds	r2, r0, #1
 800836c:	4606      	mov	r6, r0
 800836e:	d1d6      	bne.n	800831e <_svfiprintf_r+0x176>
 8008370:	89ab      	ldrh	r3, [r5, #12]
 8008372:	065b      	lsls	r3, r3, #25
 8008374:	f53f af2c 	bmi.w	80081d0 <_svfiprintf_r+0x28>
 8008378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800837a:	b01d      	add	sp, #116	; 0x74
 800837c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008380:	ab03      	add	r3, sp, #12
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	462a      	mov	r2, r5
 8008386:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <_svfiprintf_r+0x1f8>)
 8008388:	a904      	add	r1, sp, #16
 800838a:	4638      	mov	r0, r7
 800838c:	f000 f87a 	bl	8008484 <_printf_i>
 8008390:	e7eb      	b.n	800836a <_svfiprintf_r+0x1c2>
 8008392:	bf00      	nop
 8008394:	0800b98c 	.word	0x0800b98c
 8008398:	0800b996 	.word	0x0800b996
 800839c:	00000000 	.word	0x00000000
 80083a0:	080080f1 	.word	0x080080f1
 80083a4:	0800b992 	.word	0x0800b992

080083a8 <_printf_common>:
 80083a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083ac:	4616      	mov	r6, r2
 80083ae:	4699      	mov	r9, r3
 80083b0:	688a      	ldr	r2, [r1, #8]
 80083b2:	690b      	ldr	r3, [r1, #16]
 80083b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083b8:	4293      	cmp	r3, r2
 80083ba:	bfb8      	it	lt
 80083bc:	4613      	movlt	r3, r2
 80083be:	6033      	str	r3, [r6, #0]
 80083c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083c4:	4607      	mov	r7, r0
 80083c6:	460c      	mov	r4, r1
 80083c8:	b10a      	cbz	r2, 80083ce <_printf_common+0x26>
 80083ca:	3301      	adds	r3, #1
 80083cc:	6033      	str	r3, [r6, #0]
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	0699      	lsls	r1, r3, #26
 80083d2:	bf42      	ittt	mi
 80083d4:	6833      	ldrmi	r3, [r6, #0]
 80083d6:	3302      	addmi	r3, #2
 80083d8:	6033      	strmi	r3, [r6, #0]
 80083da:	6825      	ldr	r5, [r4, #0]
 80083dc:	f015 0506 	ands.w	r5, r5, #6
 80083e0:	d106      	bne.n	80083f0 <_printf_common+0x48>
 80083e2:	f104 0a19 	add.w	sl, r4, #25
 80083e6:	68e3      	ldr	r3, [r4, #12]
 80083e8:	6832      	ldr	r2, [r6, #0]
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	42ab      	cmp	r3, r5
 80083ee:	dc26      	bgt.n	800843e <_printf_common+0x96>
 80083f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083f4:	1e13      	subs	r3, r2, #0
 80083f6:	6822      	ldr	r2, [r4, #0]
 80083f8:	bf18      	it	ne
 80083fa:	2301      	movne	r3, #1
 80083fc:	0692      	lsls	r2, r2, #26
 80083fe:	d42b      	bmi.n	8008458 <_printf_common+0xb0>
 8008400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008404:	4649      	mov	r1, r9
 8008406:	4638      	mov	r0, r7
 8008408:	47c0      	blx	r8
 800840a:	3001      	adds	r0, #1
 800840c:	d01e      	beq.n	800844c <_printf_common+0xa4>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	68e5      	ldr	r5, [r4, #12]
 8008412:	6832      	ldr	r2, [r6, #0]
 8008414:	f003 0306 	and.w	r3, r3, #6
 8008418:	2b04      	cmp	r3, #4
 800841a:	bf08      	it	eq
 800841c:	1aad      	subeq	r5, r5, r2
 800841e:	68a3      	ldr	r3, [r4, #8]
 8008420:	6922      	ldr	r2, [r4, #16]
 8008422:	bf0c      	ite	eq
 8008424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008428:	2500      	movne	r5, #0
 800842a:	4293      	cmp	r3, r2
 800842c:	bfc4      	itt	gt
 800842e:	1a9b      	subgt	r3, r3, r2
 8008430:	18ed      	addgt	r5, r5, r3
 8008432:	2600      	movs	r6, #0
 8008434:	341a      	adds	r4, #26
 8008436:	42b5      	cmp	r5, r6
 8008438:	d11a      	bne.n	8008470 <_printf_common+0xc8>
 800843a:	2000      	movs	r0, #0
 800843c:	e008      	b.n	8008450 <_printf_common+0xa8>
 800843e:	2301      	movs	r3, #1
 8008440:	4652      	mov	r2, sl
 8008442:	4649      	mov	r1, r9
 8008444:	4638      	mov	r0, r7
 8008446:	47c0      	blx	r8
 8008448:	3001      	adds	r0, #1
 800844a:	d103      	bne.n	8008454 <_printf_common+0xac>
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008454:	3501      	adds	r5, #1
 8008456:	e7c6      	b.n	80083e6 <_printf_common+0x3e>
 8008458:	18e1      	adds	r1, r4, r3
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	2030      	movs	r0, #48	; 0x30
 800845e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008462:	4422      	add	r2, r4
 8008464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800846c:	3302      	adds	r3, #2
 800846e:	e7c7      	b.n	8008400 <_printf_common+0x58>
 8008470:	2301      	movs	r3, #1
 8008472:	4622      	mov	r2, r4
 8008474:	4649      	mov	r1, r9
 8008476:	4638      	mov	r0, r7
 8008478:	47c0      	blx	r8
 800847a:	3001      	adds	r0, #1
 800847c:	d0e6      	beq.n	800844c <_printf_common+0xa4>
 800847e:	3601      	adds	r6, #1
 8008480:	e7d9      	b.n	8008436 <_printf_common+0x8e>
	...

08008484 <_printf_i>:
 8008484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008488:	460c      	mov	r4, r1
 800848a:	4691      	mov	r9, r2
 800848c:	7e27      	ldrb	r7, [r4, #24]
 800848e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008490:	2f78      	cmp	r7, #120	; 0x78
 8008492:	4680      	mov	r8, r0
 8008494:	469a      	mov	sl, r3
 8008496:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800849a:	d807      	bhi.n	80084ac <_printf_i+0x28>
 800849c:	2f62      	cmp	r7, #98	; 0x62
 800849e:	d80a      	bhi.n	80084b6 <_printf_i+0x32>
 80084a0:	2f00      	cmp	r7, #0
 80084a2:	f000 80d8 	beq.w	8008656 <_printf_i+0x1d2>
 80084a6:	2f58      	cmp	r7, #88	; 0x58
 80084a8:	f000 80a3 	beq.w	80085f2 <_printf_i+0x16e>
 80084ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084b4:	e03a      	b.n	800852c <_printf_i+0xa8>
 80084b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084ba:	2b15      	cmp	r3, #21
 80084bc:	d8f6      	bhi.n	80084ac <_printf_i+0x28>
 80084be:	a001      	add	r0, pc, #4	; (adr r0, 80084c4 <_printf_i+0x40>)
 80084c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80084c4:	0800851d 	.word	0x0800851d
 80084c8:	08008531 	.word	0x08008531
 80084cc:	080084ad 	.word	0x080084ad
 80084d0:	080084ad 	.word	0x080084ad
 80084d4:	080084ad 	.word	0x080084ad
 80084d8:	080084ad 	.word	0x080084ad
 80084dc:	08008531 	.word	0x08008531
 80084e0:	080084ad 	.word	0x080084ad
 80084e4:	080084ad 	.word	0x080084ad
 80084e8:	080084ad 	.word	0x080084ad
 80084ec:	080084ad 	.word	0x080084ad
 80084f0:	0800863d 	.word	0x0800863d
 80084f4:	08008561 	.word	0x08008561
 80084f8:	0800861f 	.word	0x0800861f
 80084fc:	080084ad 	.word	0x080084ad
 8008500:	080084ad 	.word	0x080084ad
 8008504:	0800865f 	.word	0x0800865f
 8008508:	080084ad 	.word	0x080084ad
 800850c:	08008561 	.word	0x08008561
 8008510:	080084ad 	.word	0x080084ad
 8008514:	080084ad 	.word	0x080084ad
 8008518:	08008627 	.word	0x08008627
 800851c:	680b      	ldr	r3, [r1, #0]
 800851e:	1d1a      	adds	r2, r3, #4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	600a      	str	r2, [r1, #0]
 8008524:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800852c:	2301      	movs	r3, #1
 800852e:	e0a3      	b.n	8008678 <_printf_i+0x1f4>
 8008530:	6825      	ldr	r5, [r4, #0]
 8008532:	6808      	ldr	r0, [r1, #0]
 8008534:	062e      	lsls	r6, r5, #24
 8008536:	f100 0304 	add.w	r3, r0, #4
 800853a:	d50a      	bpl.n	8008552 <_printf_i+0xce>
 800853c:	6805      	ldr	r5, [r0, #0]
 800853e:	600b      	str	r3, [r1, #0]
 8008540:	2d00      	cmp	r5, #0
 8008542:	da03      	bge.n	800854c <_printf_i+0xc8>
 8008544:	232d      	movs	r3, #45	; 0x2d
 8008546:	426d      	negs	r5, r5
 8008548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800854c:	485e      	ldr	r0, [pc, #376]	; (80086c8 <_printf_i+0x244>)
 800854e:	230a      	movs	r3, #10
 8008550:	e019      	b.n	8008586 <_printf_i+0x102>
 8008552:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008556:	6805      	ldr	r5, [r0, #0]
 8008558:	600b      	str	r3, [r1, #0]
 800855a:	bf18      	it	ne
 800855c:	b22d      	sxthne	r5, r5
 800855e:	e7ef      	b.n	8008540 <_printf_i+0xbc>
 8008560:	680b      	ldr	r3, [r1, #0]
 8008562:	6825      	ldr	r5, [r4, #0]
 8008564:	1d18      	adds	r0, r3, #4
 8008566:	6008      	str	r0, [r1, #0]
 8008568:	0628      	lsls	r0, r5, #24
 800856a:	d501      	bpl.n	8008570 <_printf_i+0xec>
 800856c:	681d      	ldr	r5, [r3, #0]
 800856e:	e002      	b.n	8008576 <_printf_i+0xf2>
 8008570:	0669      	lsls	r1, r5, #25
 8008572:	d5fb      	bpl.n	800856c <_printf_i+0xe8>
 8008574:	881d      	ldrh	r5, [r3, #0]
 8008576:	4854      	ldr	r0, [pc, #336]	; (80086c8 <_printf_i+0x244>)
 8008578:	2f6f      	cmp	r7, #111	; 0x6f
 800857a:	bf0c      	ite	eq
 800857c:	2308      	moveq	r3, #8
 800857e:	230a      	movne	r3, #10
 8008580:	2100      	movs	r1, #0
 8008582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008586:	6866      	ldr	r6, [r4, #4]
 8008588:	60a6      	str	r6, [r4, #8]
 800858a:	2e00      	cmp	r6, #0
 800858c:	bfa2      	ittt	ge
 800858e:	6821      	ldrge	r1, [r4, #0]
 8008590:	f021 0104 	bicge.w	r1, r1, #4
 8008594:	6021      	strge	r1, [r4, #0]
 8008596:	b90d      	cbnz	r5, 800859c <_printf_i+0x118>
 8008598:	2e00      	cmp	r6, #0
 800859a:	d04d      	beq.n	8008638 <_printf_i+0x1b4>
 800859c:	4616      	mov	r6, r2
 800859e:	fbb5 f1f3 	udiv	r1, r5, r3
 80085a2:	fb03 5711 	mls	r7, r3, r1, r5
 80085a6:	5dc7      	ldrb	r7, [r0, r7]
 80085a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085ac:	462f      	mov	r7, r5
 80085ae:	42bb      	cmp	r3, r7
 80085b0:	460d      	mov	r5, r1
 80085b2:	d9f4      	bls.n	800859e <_printf_i+0x11a>
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d10b      	bne.n	80085d0 <_printf_i+0x14c>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	07df      	lsls	r7, r3, #31
 80085bc:	d508      	bpl.n	80085d0 <_printf_i+0x14c>
 80085be:	6923      	ldr	r3, [r4, #16]
 80085c0:	6861      	ldr	r1, [r4, #4]
 80085c2:	4299      	cmp	r1, r3
 80085c4:	bfde      	ittt	le
 80085c6:	2330      	movle	r3, #48	; 0x30
 80085c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085d0:	1b92      	subs	r2, r2, r6
 80085d2:	6122      	str	r2, [r4, #16]
 80085d4:	f8cd a000 	str.w	sl, [sp]
 80085d8:	464b      	mov	r3, r9
 80085da:	aa03      	add	r2, sp, #12
 80085dc:	4621      	mov	r1, r4
 80085de:	4640      	mov	r0, r8
 80085e0:	f7ff fee2 	bl	80083a8 <_printf_common>
 80085e4:	3001      	adds	r0, #1
 80085e6:	d14c      	bne.n	8008682 <_printf_i+0x1fe>
 80085e8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ec:	b004      	add	sp, #16
 80085ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f2:	4835      	ldr	r0, [pc, #212]	; (80086c8 <_printf_i+0x244>)
 80085f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	680e      	ldr	r6, [r1, #0]
 80085fc:	061f      	lsls	r7, r3, #24
 80085fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8008602:	600e      	str	r6, [r1, #0]
 8008604:	d514      	bpl.n	8008630 <_printf_i+0x1ac>
 8008606:	07d9      	lsls	r1, r3, #31
 8008608:	bf44      	itt	mi
 800860a:	f043 0320 	orrmi.w	r3, r3, #32
 800860e:	6023      	strmi	r3, [r4, #0]
 8008610:	b91d      	cbnz	r5, 800861a <_printf_i+0x196>
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	f023 0320 	bic.w	r3, r3, #32
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	2310      	movs	r3, #16
 800861c:	e7b0      	b.n	8008580 <_printf_i+0xfc>
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	f043 0320 	orr.w	r3, r3, #32
 8008624:	6023      	str	r3, [r4, #0]
 8008626:	2378      	movs	r3, #120	; 0x78
 8008628:	4828      	ldr	r0, [pc, #160]	; (80086cc <_printf_i+0x248>)
 800862a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800862e:	e7e3      	b.n	80085f8 <_printf_i+0x174>
 8008630:	065e      	lsls	r6, r3, #25
 8008632:	bf48      	it	mi
 8008634:	b2ad      	uxthmi	r5, r5
 8008636:	e7e6      	b.n	8008606 <_printf_i+0x182>
 8008638:	4616      	mov	r6, r2
 800863a:	e7bb      	b.n	80085b4 <_printf_i+0x130>
 800863c:	680b      	ldr	r3, [r1, #0]
 800863e:	6826      	ldr	r6, [r4, #0]
 8008640:	6960      	ldr	r0, [r4, #20]
 8008642:	1d1d      	adds	r5, r3, #4
 8008644:	600d      	str	r5, [r1, #0]
 8008646:	0635      	lsls	r5, r6, #24
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	d501      	bpl.n	8008650 <_printf_i+0x1cc>
 800864c:	6018      	str	r0, [r3, #0]
 800864e:	e002      	b.n	8008656 <_printf_i+0x1d2>
 8008650:	0671      	lsls	r1, r6, #25
 8008652:	d5fb      	bpl.n	800864c <_printf_i+0x1c8>
 8008654:	8018      	strh	r0, [r3, #0]
 8008656:	2300      	movs	r3, #0
 8008658:	6123      	str	r3, [r4, #16]
 800865a:	4616      	mov	r6, r2
 800865c:	e7ba      	b.n	80085d4 <_printf_i+0x150>
 800865e:	680b      	ldr	r3, [r1, #0]
 8008660:	1d1a      	adds	r2, r3, #4
 8008662:	600a      	str	r2, [r1, #0]
 8008664:	681e      	ldr	r6, [r3, #0]
 8008666:	6862      	ldr	r2, [r4, #4]
 8008668:	2100      	movs	r1, #0
 800866a:	4630      	mov	r0, r6
 800866c:	f7f7 fdb8 	bl	80001e0 <memchr>
 8008670:	b108      	cbz	r0, 8008676 <_printf_i+0x1f2>
 8008672:	1b80      	subs	r0, r0, r6
 8008674:	6060      	str	r0, [r4, #4]
 8008676:	6863      	ldr	r3, [r4, #4]
 8008678:	6123      	str	r3, [r4, #16]
 800867a:	2300      	movs	r3, #0
 800867c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008680:	e7a8      	b.n	80085d4 <_printf_i+0x150>
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	4632      	mov	r2, r6
 8008686:	4649      	mov	r1, r9
 8008688:	4640      	mov	r0, r8
 800868a:	47d0      	blx	sl
 800868c:	3001      	adds	r0, #1
 800868e:	d0ab      	beq.n	80085e8 <_printf_i+0x164>
 8008690:	6823      	ldr	r3, [r4, #0]
 8008692:	079b      	lsls	r3, r3, #30
 8008694:	d413      	bmi.n	80086be <_printf_i+0x23a>
 8008696:	68e0      	ldr	r0, [r4, #12]
 8008698:	9b03      	ldr	r3, [sp, #12]
 800869a:	4298      	cmp	r0, r3
 800869c:	bfb8      	it	lt
 800869e:	4618      	movlt	r0, r3
 80086a0:	e7a4      	b.n	80085ec <_printf_i+0x168>
 80086a2:	2301      	movs	r3, #1
 80086a4:	4632      	mov	r2, r6
 80086a6:	4649      	mov	r1, r9
 80086a8:	4640      	mov	r0, r8
 80086aa:	47d0      	blx	sl
 80086ac:	3001      	adds	r0, #1
 80086ae:	d09b      	beq.n	80085e8 <_printf_i+0x164>
 80086b0:	3501      	adds	r5, #1
 80086b2:	68e3      	ldr	r3, [r4, #12]
 80086b4:	9903      	ldr	r1, [sp, #12]
 80086b6:	1a5b      	subs	r3, r3, r1
 80086b8:	42ab      	cmp	r3, r5
 80086ba:	dcf2      	bgt.n	80086a2 <_printf_i+0x21e>
 80086bc:	e7eb      	b.n	8008696 <_printf_i+0x212>
 80086be:	2500      	movs	r5, #0
 80086c0:	f104 0619 	add.w	r6, r4, #25
 80086c4:	e7f5      	b.n	80086b2 <_printf_i+0x22e>
 80086c6:	bf00      	nop
 80086c8:	0800b99d 	.word	0x0800b99d
 80086cc:	0800b9ae 	.word	0x0800b9ae

080086d0 <memcpy>:
 80086d0:	440a      	add	r2, r1
 80086d2:	4291      	cmp	r1, r2
 80086d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086d8:	d100      	bne.n	80086dc <memcpy+0xc>
 80086da:	4770      	bx	lr
 80086dc:	b510      	push	{r4, lr}
 80086de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086e6:	4291      	cmp	r1, r2
 80086e8:	d1f9      	bne.n	80086de <memcpy+0xe>
 80086ea:	bd10      	pop	{r4, pc}

080086ec <memmove>:
 80086ec:	4288      	cmp	r0, r1
 80086ee:	b510      	push	{r4, lr}
 80086f0:	eb01 0402 	add.w	r4, r1, r2
 80086f4:	d902      	bls.n	80086fc <memmove+0x10>
 80086f6:	4284      	cmp	r4, r0
 80086f8:	4623      	mov	r3, r4
 80086fa:	d807      	bhi.n	800870c <memmove+0x20>
 80086fc:	1e43      	subs	r3, r0, #1
 80086fe:	42a1      	cmp	r1, r4
 8008700:	d008      	beq.n	8008714 <memmove+0x28>
 8008702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800870a:	e7f8      	b.n	80086fe <memmove+0x12>
 800870c:	4402      	add	r2, r0
 800870e:	4601      	mov	r1, r0
 8008710:	428a      	cmp	r2, r1
 8008712:	d100      	bne.n	8008716 <memmove+0x2a>
 8008714:	bd10      	pop	{r4, pc}
 8008716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800871a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800871e:	e7f7      	b.n	8008710 <memmove+0x24>

08008720 <_free_r>:
 8008720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008722:	2900      	cmp	r1, #0
 8008724:	d048      	beq.n	80087b8 <_free_r+0x98>
 8008726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800872a:	9001      	str	r0, [sp, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f1a1 0404 	sub.w	r4, r1, #4
 8008732:	bfb8      	it	lt
 8008734:	18e4      	addlt	r4, r4, r3
 8008736:	f000 f8d3 	bl	80088e0 <__malloc_lock>
 800873a:	4a20      	ldr	r2, [pc, #128]	; (80087bc <_free_r+0x9c>)
 800873c:	9801      	ldr	r0, [sp, #4]
 800873e:	6813      	ldr	r3, [r2, #0]
 8008740:	4615      	mov	r5, r2
 8008742:	b933      	cbnz	r3, 8008752 <_free_r+0x32>
 8008744:	6063      	str	r3, [r4, #4]
 8008746:	6014      	str	r4, [r2, #0]
 8008748:	b003      	add	sp, #12
 800874a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800874e:	f000 b8cd 	b.w	80088ec <__malloc_unlock>
 8008752:	42a3      	cmp	r3, r4
 8008754:	d90b      	bls.n	800876e <_free_r+0x4e>
 8008756:	6821      	ldr	r1, [r4, #0]
 8008758:	1862      	adds	r2, r4, r1
 800875a:	4293      	cmp	r3, r2
 800875c:	bf04      	itt	eq
 800875e:	681a      	ldreq	r2, [r3, #0]
 8008760:	685b      	ldreq	r3, [r3, #4]
 8008762:	6063      	str	r3, [r4, #4]
 8008764:	bf04      	itt	eq
 8008766:	1852      	addeq	r2, r2, r1
 8008768:	6022      	streq	r2, [r4, #0]
 800876a:	602c      	str	r4, [r5, #0]
 800876c:	e7ec      	b.n	8008748 <_free_r+0x28>
 800876e:	461a      	mov	r2, r3
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	b10b      	cbz	r3, 8008778 <_free_r+0x58>
 8008774:	42a3      	cmp	r3, r4
 8008776:	d9fa      	bls.n	800876e <_free_r+0x4e>
 8008778:	6811      	ldr	r1, [r2, #0]
 800877a:	1855      	adds	r5, r2, r1
 800877c:	42a5      	cmp	r5, r4
 800877e:	d10b      	bne.n	8008798 <_free_r+0x78>
 8008780:	6824      	ldr	r4, [r4, #0]
 8008782:	4421      	add	r1, r4
 8008784:	1854      	adds	r4, r2, r1
 8008786:	42a3      	cmp	r3, r4
 8008788:	6011      	str	r1, [r2, #0]
 800878a:	d1dd      	bne.n	8008748 <_free_r+0x28>
 800878c:	681c      	ldr	r4, [r3, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	6053      	str	r3, [r2, #4]
 8008792:	4421      	add	r1, r4
 8008794:	6011      	str	r1, [r2, #0]
 8008796:	e7d7      	b.n	8008748 <_free_r+0x28>
 8008798:	d902      	bls.n	80087a0 <_free_r+0x80>
 800879a:	230c      	movs	r3, #12
 800879c:	6003      	str	r3, [r0, #0]
 800879e:	e7d3      	b.n	8008748 <_free_r+0x28>
 80087a0:	6825      	ldr	r5, [r4, #0]
 80087a2:	1961      	adds	r1, r4, r5
 80087a4:	428b      	cmp	r3, r1
 80087a6:	bf04      	itt	eq
 80087a8:	6819      	ldreq	r1, [r3, #0]
 80087aa:	685b      	ldreq	r3, [r3, #4]
 80087ac:	6063      	str	r3, [r4, #4]
 80087ae:	bf04      	itt	eq
 80087b0:	1949      	addeq	r1, r1, r5
 80087b2:	6021      	streq	r1, [r4, #0]
 80087b4:	6054      	str	r4, [r2, #4]
 80087b6:	e7c7      	b.n	8008748 <_free_r+0x28>
 80087b8:	b003      	add	sp, #12
 80087ba:	bd30      	pop	{r4, r5, pc}
 80087bc:	200000b0 	.word	0x200000b0

080087c0 <_malloc_r>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	1ccd      	adds	r5, r1, #3
 80087c4:	f025 0503 	bic.w	r5, r5, #3
 80087c8:	3508      	adds	r5, #8
 80087ca:	2d0c      	cmp	r5, #12
 80087cc:	bf38      	it	cc
 80087ce:	250c      	movcc	r5, #12
 80087d0:	2d00      	cmp	r5, #0
 80087d2:	4606      	mov	r6, r0
 80087d4:	db01      	blt.n	80087da <_malloc_r+0x1a>
 80087d6:	42a9      	cmp	r1, r5
 80087d8:	d903      	bls.n	80087e2 <_malloc_r+0x22>
 80087da:	230c      	movs	r3, #12
 80087dc:	6033      	str	r3, [r6, #0]
 80087de:	2000      	movs	r0, #0
 80087e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e2:	f000 f87d 	bl	80088e0 <__malloc_lock>
 80087e6:	4921      	ldr	r1, [pc, #132]	; (800886c <_malloc_r+0xac>)
 80087e8:	680a      	ldr	r2, [r1, #0]
 80087ea:	4614      	mov	r4, r2
 80087ec:	b99c      	cbnz	r4, 8008816 <_malloc_r+0x56>
 80087ee:	4f20      	ldr	r7, [pc, #128]	; (8008870 <_malloc_r+0xb0>)
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	b923      	cbnz	r3, 80087fe <_malloc_r+0x3e>
 80087f4:	4621      	mov	r1, r4
 80087f6:	4630      	mov	r0, r6
 80087f8:	f000 f862 	bl	80088c0 <_sbrk_r>
 80087fc:	6038      	str	r0, [r7, #0]
 80087fe:	4629      	mov	r1, r5
 8008800:	4630      	mov	r0, r6
 8008802:	f000 f85d 	bl	80088c0 <_sbrk_r>
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d123      	bne.n	8008852 <_malloc_r+0x92>
 800880a:	230c      	movs	r3, #12
 800880c:	6033      	str	r3, [r6, #0]
 800880e:	4630      	mov	r0, r6
 8008810:	f000 f86c 	bl	80088ec <__malloc_unlock>
 8008814:	e7e3      	b.n	80087de <_malloc_r+0x1e>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	1b5b      	subs	r3, r3, r5
 800881a:	d417      	bmi.n	800884c <_malloc_r+0x8c>
 800881c:	2b0b      	cmp	r3, #11
 800881e:	d903      	bls.n	8008828 <_malloc_r+0x68>
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	441c      	add	r4, r3
 8008824:	6025      	str	r5, [r4, #0]
 8008826:	e004      	b.n	8008832 <_malloc_r+0x72>
 8008828:	6863      	ldr	r3, [r4, #4]
 800882a:	42a2      	cmp	r2, r4
 800882c:	bf0c      	ite	eq
 800882e:	600b      	streq	r3, [r1, #0]
 8008830:	6053      	strne	r3, [r2, #4]
 8008832:	4630      	mov	r0, r6
 8008834:	f000 f85a 	bl	80088ec <__malloc_unlock>
 8008838:	f104 000b 	add.w	r0, r4, #11
 800883c:	1d23      	adds	r3, r4, #4
 800883e:	f020 0007 	bic.w	r0, r0, #7
 8008842:	1ac2      	subs	r2, r0, r3
 8008844:	d0cc      	beq.n	80087e0 <_malloc_r+0x20>
 8008846:	1a1b      	subs	r3, r3, r0
 8008848:	50a3      	str	r3, [r4, r2]
 800884a:	e7c9      	b.n	80087e0 <_malloc_r+0x20>
 800884c:	4622      	mov	r2, r4
 800884e:	6864      	ldr	r4, [r4, #4]
 8008850:	e7cc      	b.n	80087ec <_malloc_r+0x2c>
 8008852:	1cc4      	adds	r4, r0, #3
 8008854:	f024 0403 	bic.w	r4, r4, #3
 8008858:	42a0      	cmp	r0, r4
 800885a:	d0e3      	beq.n	8008824 <_malloc_r+0x64>
 800885c:	1a21      	subs	r1, r4, r0
 800885e:	4630      	mov	r0, r6
 8008860:	f000 f82e 	bl	80088c0 <_sbrk_r>
 8008864:	3001      	adds	r0, #1
 8008866:	d1dd      	bne.n	8008824 <_malloc_r+0x64>
 8008868:	e7cf      	b.n	800880a <_malloc_r+0x4a>
 800886a:	bf00      	nop
 800886c:	200000b0 	.word	0x200000b0
 8008870:	200000b4 	.word	0x200000b4

08008874 <_realloc_r>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	4607      	mov	r7, r0
 8008878:	4614      	mov	r4, r2
 800887a:	460e      	mov	r6, r1
 800887c:	b921      	cbnz	r1, 8008888 <_realloc_r+0x14>
 800887e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008882:	4611      	mov	r1, r2
 8008884:	f7ff bf9c 	b.w	80087c0 <_malloc_r>
 8008888:	b922      	cbnz	r2, 8008894 <_realloc_r+0x20>
 800888a:	f7ff ff49 	bl	8008720 <_free_r>
 800888e:	4625      	mov	r5, r4
 8008890:	4628      	mov	r0, r5
 8008892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008894:	f000 f830 	bl	80088f8 <_malloc_usable_size_r>
 8008898:	42a0      	cmp	r0, r4
 800889a:	d20f      	bcs.n	80088bc <_realloc_r+0x48>
 800889c:	4621      	mov	r1, r4
 800889e:	4638      	mov	r0, r7
 80088a0:	f7ff ff8e 	bl	80087c0 <_malloc_r>
 80088a4:	4605      	mov	r5, r0
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d0f2      	beq.n	8008890 <_realloc_r+0x1c>
 80088aa:	4631      	mov	r1, r6
 80088ac:	4622      	mov	r2, r4
 80088ae:	f7ff ff0f 	bl	80086d0 <memcpy>
 80088b2:	4631      	mov	r1, r6
 80088b4:	4638      	mov	r0, r7
 80088b6:	f7ff ff33 	bl	8008720 <_free_r>
 80088ba:	e7e9      	b.n	8008890 <_realloc_r+0x1c>
 80088bc:	4635      	mov	r5, r6
 80088be:	e7e7      	b.n	8008890 <_realloc_r+0x1c>

080088c0 <_sbrk_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4d06      	ldr	r5, [pc, #24]	; (80088dc <_sbrk_r+0x1c>)
 80088c4:	2300      	movs	r3, #0
 80088c6:	4604      	mov	r4, r0
 80088c8:	4608      	mov	r0, r1
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	f7fa f8e2 	bl	8002a94 <_sbrk>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_sbrk_r+0x1a>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_sbrk_r+0x1a>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	20000428 	.word	0x20000428

080088e0 <__malloc_lock>:
 80088e0:	4801      	ldr	r0, [pc, #4]	; (80088e8 <__malloc_lock+0x8>)
 80088e2:	f000 b811 	b.w	8008908 <__retarget_lock_acquire_recursive>
 80088e6:	bf00      	nop
 80088e8:	20000430 	.word	0x20000430

080088ec <__malloc_unlock>:
 80088ec:	4801      	ldr	r0, [pc, #4]	; (80088f4 <__malloc_unlock+0x8>)
 80088ee:	f000 b80c 	b.w	800890a <__retarget_lock_release_recursive>
 80088f2:	bf00      	nop
 80088f4:	20000430 	.word	0x20000430

080088f8 <_malloc_usable_size_r>:
 80088f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088fc:	1f18      	subs	r0, r3, #4
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bfbc      	itt	lt
 8008902:	580b      	ldrlt	r3, [r1, r0]
 8008904:	18c0      	addlt	r0, r0, r3
 8008906:	4770      	bx	lr

08008908 <__retarget_lock_acquire_recursive>:
 8008908:	4770      	bx	lr

0800890a <__retarget_lock_release_recursive>:
 800890a:	4770      	bx	lr

0800890c <_init>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	bf00      	nop
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr

08008918 <_fini>:
 8008918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891a:	bf00      	nop
 800891c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891e:	bc08      	pop	{r3}
 8008920:	469e      	mov	lr, r3
 8008922:	4770      	bx	lr
