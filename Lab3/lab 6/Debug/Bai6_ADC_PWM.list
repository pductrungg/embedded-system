
Bai6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a984  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003108  0800ab14  0800ab14  0001ab14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc1c  0800dc1c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc1c  0800dc1c  0001dc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc24  0800dc24  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc24  0800dc24  0001dc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc28  0800dc28  0001dc28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800dc2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000440  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004dc  200004dc  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023e2d  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cb6  00000000  00000000  00043ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f0  00000000  00000000  00048bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f8  00000000  00000000  0004a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002738f  00000000  00000000  0004b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000220d0  00000000  00000000  00072d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0415  00000000  00000000  00094df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017520c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006614  00000000  00000000  00175260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aafc 	.word	0x0800aafc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800aafc 	.word	0x0800aafc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <MX_ADC1_Init+0x108>)
 8000df8:	4a3d      	ldr	r2, [pc, #244]	; (8000ef0 <MX_ADC1_Init+0x10c>)
 8000dfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dfc:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <MX_ADC1_Init+0x108>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e02:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e08:	4b38      	ldr	r3, [pc, #224]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e0e:	4b37      	ldr	r3, [pc, #220]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e14:	4b35      	ldr	r3, [pc, #212]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1c:	4b33      	ldr	r3, [pc, #204]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e22:	4b32      	ldr	r3, [pc, #200]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e24:	4a33      	ldr	r2, [pc, #204]	; (8000ef4 <MX_ADC1_Init+0x110>)
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e30:	2205      	movs	r2, #5
 8000e32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e34:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e42:	482a      	ldr	r0, [pc, #168]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e44:	f003 fd66 	bl	8004914 <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f001 fbe9 	bl	8002624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e52:	2308      	movs	r3, #8
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4822      	ldr	r0, [pc, #136]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e64:	f003 fec8 	bl	8004bf8 <HAL_ADC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e6e:	f001 fbd9 	bl	8002624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e72:	2309      	movs	r3, #9
 8000e74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e76:	2302      	movs	r3, #2
 8000e78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	481b      	ldr	r0, [pc, #108]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e80:	f003 feba 	bl	8004bf8 <HAL_ADC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e8a:	f001 fbcb 	bl	8002624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e8e:	230a      	movs	r3, #10
 8000e90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e92:	2303      	movs	r3, #3
 8000e94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4814      	ldr	r0, [pc, #80]	; (8000eec <MX_ADC1_Init+0x108>)
 8000e9c:	f003 feac 	bl	8004bf8 <HAL_ADC_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000ea6:	f001 fbbd 	bl	8002624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480d      	ldr	r0, [pc, #52]	; (8000eec <MX_ADC1_Init+0x108>)
 8000eb8:	f003 fe9e 	bl	8004bf8 <HAL_ADC_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ec2:	f001 fbaf 	bl	8002624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000eca:	2305      	movs	r3, #5
 8000ecc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <MX_ADC1_Init+0x108>)
 8000ed4:	f003 fe90 	bl	8004bf8 <HAL_ADC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000ede:	f001 fba1 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000e0 	.word	0x200000e0
 8000ef0:	40012000 	.word	0x40012000
 8000ef4:	0f000001 	.word	0x0f000001

08000ef8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a3c      	ldr	r2, [pc, #240]	; (8001008 <HAL_ADC_MspInit+0x110>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d171      	bne.n	8000ffe <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a3a      	ldr	r2, [pc, #232]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b34      	ldr	r3, [pc, #208]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a33      	ldr	r2, [pc, #204]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b31      	ldr	r3, [pc, #196]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b2d      	ldr	r3, [pc, #180]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a2c      	ldr	r2, [pc, #176]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b2a      	ldr	r3, [pc, #168]	; (800100c <HAL_ADC_MspInit+0x114>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f6e:	2307      	movs	r3, #7
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f72:	2303      	movs	r3, #3
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4823      	ldr	r0, [pc, #140]	; (8001010 <HAL_ADC_MspInit+0x118>)
 8000f82:	f004 fded 	bl	8005b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f86:	2303      	movs	r3, #3
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	481e      	ldr	r0, [pc, #120]	; (8001014 <HAL_ADC_MspInit+0x11c>)
 8000f9a:	f004 fde1 	bl	8005b60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fa0:	4a1e      	ldr	r2, [pc, #120]	; (800101c <HAL_ADC_MspInit+0x124>)
 8000fa2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fe2:	480d      	ldr	r0, [pc, #52]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000fe4:	f004 f9ba 	bl	800535c <HAL_DMA_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fee:	f001 fb19 	bl	8002624 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000ff6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_ADC_MspInit+0x120>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40012000 	.word	0x40012000
 800100c:	40023800 	.word	0x40023800
 8001010:	40020800 	.word	0x40020800
 8001014:	40020400 	.word	0x40020400
 8001018:	20000128 	.word	0x20000128
 800101c:	40026410 	.word	0x40026410

08001020 <button_init>:
/**
 * @brief  Init matrix button
 * @param  None
 * @retval None
 */
void button_init() {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001024:	2201      	movs	r2, #1
 8001026:	2108      	movs	r1, #8
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <button_init+0x14>)
 800102a:	f004 ff35 	bl	8005e98 <HAL_GPIO_WritePin>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020c00 	.word	0x40020c00

08001038 <button_Scan>:
 * @brief  Scan matrix button
 * @param  None
 * @note  	Call every 50ms
 * @retval None
 */
void button_Scan() {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2108      	movs	r1, #8
 8001042:	482f      	ldr	r0, [pc, #188]	; (8001100 <button_Scan+0xc8>)
 8001044:	f004 ff28 	bl	8005e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001048:	2201      	movs	r2, #1
 800104a:	2108      	movs	r1, #8
 800104c:	482c      	ldr	r0, [pc, #176]	; (8001100 <button_Scan+0xc8>)
 800104e:	f004 ff23 	bl	8005e98 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &spi_button, 2, 10);
 8001052:	230a      	movs	r3, #10
 8001054:	2202      	movs	r2, #2
 8001056:	492b      	ldr	r1, [pc, #172]	; (8001104 <button_Scan+0xcc>)
 8001058:	482b      	ldr	r0, [pc, #172]	; (8001108 <button_Scan+0xd0>)
 800105a:	f006 fbf4 	bl	8007846 <HAL_SPI_Receive>
	int button_index = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 8001062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001066:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	e03f      	b.n	80010ee <button_Scan+0xb6>
		if (i >= 0 && i <= 3) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db06      	blt.n	8001082 <button_Scan+0x4a>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b03      	cmp	r3, #3
 8001078:	dc03      	bgt.n	8001082 <button_Scan+0x4a>
			button_index = i + 4;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3304      	adds	r3, #4
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	e018      	b.n	80010b4 <button_Scan+0x7c>
		} else if (i >= 4 && i <= 7) {
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b03      	cmp	r3, #3
 8001086:	dd07      	ble.n	8001098 <button_Scan+0x60>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b07      	cmp	r3, #7
 800108c:	dc04      	bgt.n	8001098 <button_Scan+0x60>
			button_index = 7 - i;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f1c3 0307 	rsb	r3, r3, #7
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e00d      	b.n	80010b4 <button_Scan+0x7c>
		} else if (i >= 8 && i <= 11) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b07      	cmp	r3, #7
 800109c:	dd06      	ble.n	80010ac <button_Scan+0x74>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0b      	cmp	r3, #11
 80010a2:	dc03      	bgt.n	80010ac <button_Scan+0x74>
			button_index = i + 4;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3304      	adds	r3, #4
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e003      	b.n	80010b4 <button_Scan+0x7c>
		} else {
			button_index = 23 - i;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f1c3 0317 	rsb	r3, r3, #23
 80010b2:	60fb      	str	r3, [r7, #12]
		}
		if (spi_button & mask)
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <button_Scan+0xcc>)
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	897b      	ldrh	r3, [r7, #10]
 80010ba:	4013      	ands	r3, r2
 80010bc:	b29b      	uxth	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <button_Scan+0x96>
			button_count[button_index] = 0;
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <button_Scan+0xd4>)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2100      	movs	r1, #0
 80010c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010cc:	e009      	b.n	80010e2 <button_Scan+0xaa>
		else
			button_count[button_index]++;
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <button_Scan+0xd4>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d6:	3301      	adds	r3, #1
 80010d8:	b299      	uxth	r1, r3
 80010da:	4a0c      	ldr	r2, [pc, #48]	; (800110c <button_Scan+0xd4>)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 80010e2:	897b      	ldrh	r3, [r7, #10]
 80010e4:	085b      	lsrs	r3, r3, #1
 80010e6:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3301      	adds	r3, #1
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	ddbc      	ble.n	800106e <button_Scan+0x36>
	}
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40020c00 	.word	0x40020c00
 8001104:	200000b8 	.word	0x200000b8
 8001108:	20000310 	.word	0x20000310
 800110c:	20000188 	.word	0x20000188

08001110 <is_button_pressed>:
 * @brief  check button "id" is pressed
 * @param  id - id of button [0...15]
 * @retval 1: button is pressed
 * 		0: invalid para OR button is not pressed
 */
bool is_button_pressed(uint8_t id) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	if (id > 16)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b10      	cmp	r3, #16
 800111e:	d901      	bls.n	8001124 <is_button_pressed+0x14>
		return 0;
 8001120:	2300      	movs	r3, #0
 8001122:	e008      	b.n	8001136 <is_button_pressed+0x26>
	return button_count[id] != 0;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <is_button_pressed+0x34>)
 8001128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2db      	uxtb	r3, r3
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000188 	.word	0x20000188

08001148 <is_button_long_pressed>:
 * @brief  check button "id" is pressed
 * @param  id - id of button [0...15]
 * @retval 1: button is long pressed
 * 		0: invalid para OR button is not long pressed
 */
bool is_button_long_pressed(uint8_t id) {
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	if (id > 16)
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b10      	cmp	r3, #16
 8001156:	d901      	bls.n	800115c <is_button_long_pressed+0x14>
		return 0;
 8001158:	2300      	movs	r3, #0
 800115a:	e008      	b.n	800116e <is_button_long_pressed+0x26>
	if (button_count[id] < LONG_PRESSED_TIME / READ_BUTTON_TIME) {
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4a07      	ldr	r2, [pc, #28]	; (800117c <is_button_long_pressed+0x34>)
 8001160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001164:	2bc7      	cmp	r3, #199	; 0xc7
 8001166:	d801      	bhi.n	800116c <is_button_long_pressed+0x24>
		return 0;
 8001168:	2300      	movs	r3, #0
 800116a:	e000      	b.n	800116e <is_button_long_pressed+0x26>
	}
	return 1;
 800116c:	2301      	movs	r3, #1
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000188 	.word	0x20000188

08001180 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001184:	2100      	movs	r1, #0
 8001186:	4802      	ldr	r0, [pc, #8]	; (8001190 <buzzer_init+0x10>)
 8001188:	f007 f89e 	bl	80082c8 <HAL_TIM_PWM_Start>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000390 	.word	0x20000390

08001194 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 800119e:	4a07      	ldr	r2, [pc, #28]	; (80011bc <buzzer_SetVolume+0x28>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <buzzer_SetVolume+0x28>)
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <buzzer_SetVolume+0x2c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200000ba 	.word	0x200000ba
 80011c0:	20000390 	.word	0x20000390

080011c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_DMA_Init+0x3c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <MX_DMA_Init+0x3c>)
 80011d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_DMA_Init+0x3c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2038      	movs	r0, #56	; 0x38
 80011ec:	f004 f87f 	bl	80052ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f0:	2038      	movs	r0, #56	; 0x38
 80011f2:	f004 f898 	bl	8005326 <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800

08001204 <ds3231_Write>:
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
		while(1);
	};
}

void ds3231_Write(uint8_t address, uint8_t value){
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af04      	add	r7, sp, #16
 800120a:	4603      	mov	r3, r0
 800120c:	460a      	mov	r2, r1
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	4613      	mov	r3, r2
 8001212:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	4618      	mov	r0, r3
 8001218:	f003 fa98 	bl	800474c <DEC2BCD>
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	b29a      	uxth	r2, r3
 8001224:	230a      	movs	r3, #10
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	2301      	movs	r3, #1
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	f107 030f 	add.w	r3, r7, #15
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	21d0      	movs	r1, #208	; 0xd0
 8001236:	4803      	ldr	r0, [pc, #12]	; (8001244 <ds3231_Write+0x40>)
 8001238:	f004 ff8c 	bl	8006154 <HAL_I2C_Mem_Write>
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000208 	.word	0x20000208

08001248 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800124e:	230a      	movs	r3, #10
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	2307      	movs	r3, #7
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	4b25      	ldr	r3, [pc, #148]	; (80012ec <ds3231_ReadTime+0xa4>)
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	2200      	movs	r2, #0
 800125e:	21d0      	movs	r1, #208	; 0xd0
 8001260:	4823      	ldr	r0, [pc, #140]	; (80012f0 <ds3231_ReadTime+0xa8>)
 8001262:	f005 f871 	bl	8006348 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <ds3231_ReadTime+0xa4>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fa54 	bl	8004718 <BCD2DEC>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <ds3231_ReadTime+0xac>)
 8001276:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <ds3231_ReadTime+0xa4>)
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	4618      	mov	r0, r3
 800127e:	f003 fa4b 	bl	8004718 <BCD2DEC>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <ds3231_ReadTime+0xb0>)
 8001288:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <ds3231_ReadTime+0xa4>)
 800128c:	789b      	ldrb	r3, [r3, #2]
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fa42 	bl	8004718 <BCD2DEC>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <ds3231_ReadTime+0xb4>)
 800129a:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <ds3231_ReadTime+0xa4>)
 800129e:	78db      	ldrb	r3, [r3, #3]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fa39 	bl	8004718 <BCD2DEC>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <ds3231_ReadTime+0xb8>)
 80012ac:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <ds3231_ReadTime+0xa4>)
 80012b0:	791b      	ldrb	r3, [r3, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 fa30 	bl	8004718 <BCD2DEC>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <ds3231_ReadTime+0xbc>)
 80012be:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <ds3231_ReadTime+0xa4>)
 80012c2:	795b      	ldrb	r3, [r3, #5]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 fa27 	bl	8004718 <BCD2DEC>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <ds3231_ReadTime+0xc0>)
 80012d0:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <ds3231_ReadTime+0xa4>)
 80012d4:	799b      	ldrb	r3, [r3, #6]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 fa1e 	bl	8004718 <BCD2DEC>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <ds3231_ReadTime+0xc4>)
 80012e2:	701a      	strb	r2, [r3, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001b0 	.word	0x200001b0
 80012f0:	20000208 	.word	0x20000208
 80012f4:	200001a8 	.word	0x200001a8
 80012f8:	200001aa 	.word	0x200001aa
 80012fc:	200001ad 	.word	0x200001ad
 8001300:	200001ac 	.word	0x200001ac
 8001304:	200001ab 	.word	0x200001ab
 8001308:	200001ae 	.word	0x200001ae
 800130c:	200001a9 	.word	0x200001a9

08001310 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	; 0x38
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
 8001326:	615a      	str	r2, [r3, #20]
 8001328:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800133c:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <MX_FSMC_Init+0xec>)
 800133e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001342:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001344:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <MX_FSMC_Init+0xec>)
 8001346:	4a2e      	ldr	r2, [pc, #184]	; (8001400 <MX_FSMC_Init+0xf0>)
 8001348:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <MX_FSMC_Init+0xec>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001350:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <MX_FSMC_Init+0xec>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <MX_FSMC_Init+0xec>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800135c:	4b27      	ldr	r3, [pc, #156]	; (80013fc <MX_FSMC_Init+0xec>)
 800135e:	2210      	movs	r2, #16
 8001360:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <MX_FSMC_Init+0xec>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <MX_FSMC_Init+0xec>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <MX_FSMC_Init+0xec>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_FSMC_Init+0xec>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <MX_FSMC_Init+0xec>)
 800137c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <MX_FSMC_Init+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <MX_FSMC_Init+0xec>)
 800138a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_FSMC_Init+0xec>)
 8001392:	2200      	movs	r2, #0
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_FSMC_Init+0xec>)
 8001398:	2200      	movs	r2, #0
 800139a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_FSMC_Init+0xec>)
 800139e:	2200      	movs	r2, #0
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80013a2:	230f      	movs	r3, #15
 80013a4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80013a6:	230f      	movs	r3, #15
 80013a8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80013aa:	233c      	movs	r3, #60	; 0x3c
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80013b2:	2310      	movs	r3, #16
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80013b6:	2311      	movs	r3, #17
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80013ba:	2300      	movs	r3, #0
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80013be:	2308      	movs	r3, #8
 80013c0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80013c2:	230f      	movs	r3, #15
 80013c4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80013c6:	2309      	movs	r3, #9
 80013c8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80013ce:	2310      	movs	r3, #16
 80013d0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80013d2:	2311      	movs	r3, #17
 80013d4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80013da:	463a      	mov	r2, r7
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_FSMC_Init+0xec>)
 80013e4:	f006 fe12 	bl	800800c <HAL_SRAM_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80013ee:	f001 f919 	bl	8002624 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80013f2:	bf00      	nop
 80013f4:	3738      	adds	r7, #56	; 0x38
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200001b8 	.word	0x200001b8
 8001400:	a0000104 	.word	0xa0000104

08001404 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <HAL_FSMC_MspInit+0x88>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d131      	bne.n	8001484 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_FSMC_MspInit+0x88>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_FSMC_MspInit+0x8c>)
 800142c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142e:	4a18      	ldr	r2, [pc, #96]	; (8001490 <HAL_FSMC_MspInit+0x8c>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6393      	str	r3, [r2, #56]	; 0x38
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <HAL_FSMC_MspInit+0x8c>)
 8001438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001442:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001446:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001454:	230c      	movs	r3, #12
 8001456:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4619      	mov	r1, r3
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <HAL_FSMC_MspInit+0x90>)
 800145e:	f004 fb7f 	bl	8005b60 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001462:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001466:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001474:	230c      	movs	r3, #12
 8001476:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	4806      	ldr	r0, [pc, #24]	; (8001498 <HAL_FSMC_MspInit+0x94>)
 800147e:	f004 fb6f 	bl	8005b60 <HAL_GPIO_Init>
 8001482:	e000      	b.n	8001486 <HAL_FSMC_MspInit+0x82>
    return;
 8001484:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200000bc 	.word	0x200000bc
 8001490:	40023800 	.word	0x40023800
 8001494:	40021000 	.word	0x40021000
 8001498:	40020c00 	.word	0x40020c00

0800149c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80014a4:	f7ff ffae 	bl	8001404 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	; 0x38
 80014b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
 80014ca:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a75      	ldr	r2, [pc, #468]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	623b      	str	r3, [r7, #32]
 80014e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	4b6f      	ldr	r3, [pc, #444]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a6e      	ldr	r2, [pc, #440]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	4b68      	ldr	r3, [pc, #416]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a67      	ldr	r2, [pc, #412]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001508:	f043 0320 	orr.w	r3, r3, #32
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b65      	ldr	r3, [pc, #404]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a60      	ldr	r2, [pc, #384]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b5a      	ldr	r3, [pc, #360]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a59      	ldr	r2, [pc, #356]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b57      	ldr	r3, [pc, #348]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a4b      	ldr	r2, [pc, #300]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a44      	ldr	r2, [pc, #272]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 8001594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <MX_GPIO_Init+0x1f4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2170      	movs	r1, #112	; 0x70
 80015aa:	483f      	ldr	r0, [pc, #252]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 80015ac:	f004 fc74 	bl	8005e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b6:	483d      	ldr	r0, [pc, #244]	; (80016ac <MX_GPIO_Init+0x1fc>)
 80015b8:	f004 fc6e 	bl	8005e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2140      	movs	r1, #64	; 0x40
 80015c0:	483b      	ldr	r0, [pc, #236]	; (80016b0 <MX_GPIO_Init+0x200>)
 80015c2:	f004 fc69 	bl	8005e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015cc:	4839      	ldr	r0, [pc, #228]	; (80016b4 <MX_GPIO_Init+0x204>)
 80015ce:	f004 fc63 	bl	8005e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2108      	movs	r1, #8
 80015d6:	4838      	ldr	r0, [pc, #224]	; (80016b8 <MX_GPIO_Init+0x208>)
 80015d8:	f004 fc5e 	bl	8005e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80015dc:	2370      	movs	r3, #112	; 0x70
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	482d      	ldr	r0, [pc, #180]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 80015f4:	f004 fab4 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80015f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	4826      	ldr	r0, [pc, #152]	; (80016ac <MX_GPIO_Init+0x1fc>)
 8001612:	f004 faa5 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001616:	23c0      	movs	r3, #192	; 0xc0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <MX_GPIO_Init+0x204>)
 800162a:	f004 fa99 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800162e:	2330      	movs	r3, #48	; 0x30
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001632:	2300      	movs	r3, #0
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	4619      	mov	r1, r3
 8001640:	481a      	ldr	r0, [pc, #104]	; (80016ac <MX_GPIO_Init+0x1fc>)
 8001642:	f004 fa8d 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001646:	2340      	movs	r3, #64	; 0x40
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	4814      	ldr	r0, [pc, #80]	; (80016b0 <MX_GPIO_Init+0x200>)
 800165e:	f004 fa7f 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	4619      	mov	r1, r3
 800167a:	480e      	ldr	r0, [pc, #56]	; (80016b4 <MX_GPIO_Init+0x204>)
 800167c:	f004 fa70 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001680:	2308      	movs	r3, #8
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	4808      	ldr	r0, [pc, #32]	; (80016b8 <MX_GPIO_Init+0x208>)
 8001698:	f004 fa62 	bl	8005b60 <HAL_GPIO_Init>

}
 800169c:	bf00      	nop
 800169e:	3738      	adds	r7, #56	; 0x38
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40021800 	.word	0x40021800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020c00 	.word	0x40020c00

080016bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <MX_I2C1_Init+0x50>)
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <MX_I2C1_Init+0x54>)
 80016c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_I2C1_Init+0x50>)
 80016c8:	4a12      	ldr	r2, [pc, #72]	; (8001714 <MX_I2C1_Init+0x58>)
 80016ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_I2C1_Init+0x50>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_I2C1_Init+0x50>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_I2C1_Init+0x50>)
 80016da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <MX_I2C1_Init+0x50>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_I2C1_Init+0x50>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <MX_I2C1_Init+0x50>)
 80016fa:	f004 fbe7 	bl	8005ecc <HAL_I2C_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001704:	f000 ff8e 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000208 	.word	0x20000208
 8001710:	40005400 	.word	0x40005400
 8001714:	000186a0 	.word	0x000186a0

08001718 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	; (800179c <HAL_I2C_MspInit+0x84>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d12b      	bne.n	8001792 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_I2C_MspInit+0x88>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <HAL_I2C_MspInit+0x88>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_I2C_MspInit+0x88>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001756:	23c0      	movs	r3, #192	; 0xc0
 8001758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175a:	2312      	movs	r3, #18
 800175c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001766:	2304      	movs	r3, #4
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	480c      	ldr	r0, [pc, #48]	; (80017a4 <HAL_I2C_MspInit+0x8c>)
 8001772:	f004 f9f5 	bl	8005b60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_I2C_MspInit+0x88>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <HAL_I2C_MspInit+0x88>)
 8001780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_I2C_MspInit+0x88>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40005400 	.word	0x40005400
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020400 	.word	0x40020400

080017a8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <LCD_WR_REG+0x1c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	8013      	strh	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	600ffffe 	.word	0x600ffffe

080017c8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <LCD_WR_DATA+0x1c>)
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	8053      	strh	r3, [r2, #2]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	600ffffe 	.word	0x600ffffe

080017e8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <LCD_RD_DATA+0x20>)
 80017f0:	885b      	ldrh	r3, [r3, #2]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	b29b      	uxth	r3, r3
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	600ffffe 	.word	0x600ffffe

0800180c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4604      	mov	r4, r0
 8001814:	4608      	mov	r0, r1
 8001816:	4611      	mov	r1, r2
 8001818:	461a      	mov	r2, r3
 800181a:	4623      	mov	r3, r4
 800181c:	80fb      	strh	r3, [r7, #6]
 800181e:	4603      	mov	r3, r0
 8001820:	80bb      	strh	r3, [r7, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	807b      	strh	r3, [r7, #2]
 8001826:	4613      	mov	r3, r2
 8001828:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800182a:	202a      	movs	r0, #42	; 0x2a
 800182c:	f7ff ffbc 	bl	80017a8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	b29b      	uxth	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ffc6 	bl	80017c8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	b29b      	uxth	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ffc0 	bl	80017c8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b29b      	uxth	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ffba 	bl	80017c8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	b29b      	uxth	r3, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ffb4 	bl	80017c8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001860:	202b      	movs	r0, #43	; 0x2b
 8001862:	f7ff ffa1 	bl	80017a8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001866:	88bb      	ldrh	r3, [r7, #4]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	b29b      	uxth	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ffab 	bl	80017c8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001872:	88bb      	ldrh	r3, [r7, #4]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	b29b      	uxth	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ffa5 	bl	80017c8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800187e:	883b      	ldrh	r3, [r7, #0]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	b29b      	uxth	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff9f 	bl	80017c8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800188a:	883b      	ldrh	r3, [r7, #0]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	b29b      	uxth	r3, r3
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff99 	bl	80017c8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001896:	202c      	movs	r0, #44	; 0x2c
 8001898:	f7ff ff86 	bl	80017a8 <LCD_WR_REG>
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <lcd_Clear+0x60>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <lcd_Clear+0x60>)
 80018b8:	885b      	ldrh	r3, [r3, #2]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2100      	movs	r1, #0
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff ffa3 	bl	800180c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	81fb      	strh	r3, [r7, #14]
 80018ca:	e011      	b.n	80018f0 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	81bb      	strh	r3, [r7, #12]
 80018d0:	e006      	b.n	80018e0 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff77 	bl	80017c8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80018da:	89bb      	ldrh	r3, [r7, #12]
 80018dc:	3301      	adds	r3, #1
 80018de:	81bb      	strh	r3, [r7, #12]
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <lcd_Clear+0x60>)
 80018e2:	885b      	ldrh	r3, [r3, #2]
 80018e4:	89ba      	ldrh	r2, [r7, #12]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d3f3      	bcc.n	80018d2 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80018ea:	89fb      	ldrh	r3, [r7, #14]
 80018ec:	3301      	adds	r3, #1
 80018ee:	81fb      	strh	r3, [r7, #14]
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <lcd_Clear+0x60>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	89fa      	ldrh	r2, [r7, #14]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d3e8      	bcc.n	80018cc <lcd_Clear+0x28>
		}
	}
}
 80018fa:	bf00      	nop
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000025c 	.word	0x2000025c

08001908 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	4604      	mov	r4, r0
 8001910:	4608      	mov	r0, r1
 8001912:	4611      	mov	r1, r2
 8001914:	461a      	mov	r2, r3
 8001916:	4623      	mov	r3, r4
 8001918:	80fb      	strh	r3, [r7, #6]
 800191a:	4603      	mov	r3, r0
 800191c:	80bb      	strh	r3, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	807b      	strh	r3, [r7, #2]
 8001922:	4613      	mov	r3, r2
 8001924:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	3b01      	subs	r3, #1
 800192a:	b29a      	uxth	r2, r3
 800192c:	883b      	ldrh	r3, [r7, #0]
 800192e:	3b01      	subs	r3, #1
 8001930:	b29b      	uxth	r3, r3
 8001932:	88b9      	ldrh	r1, [r7, #4]
 8001934:	88f8      	ldrh	r0, [r7, #6]
 8001936:	f7ff ff69 	bl	800180c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	81fb      	strh	r3, [r7, #14]
 800193e:	e010      	b.n	8001962 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	81bb      	strh	r3, [r7, #12]
 8001944:	e006      	b.n	8001954 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001946:	8c3b      	ldrh	r3, [r7, #32]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff3d 	bl	80017c8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800194e:	89bb      	ldrh	r3, [r7, #12]
 8001950:	3301      	adds	r3, #1
 8001952:	81bb      	strh	r3, [r7, #12]
 8001954:	89ba      	ldrh	r2, [r7, #12]
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	429a      	cmp	r2, r3
 800195a:	d3f4      	bcc.n	8001946 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 800195c:	89fb      	ldrh	r3, [r7, #14]
 800195e:	3301      	adds	r3, #1
 8001960:	81fb      	strh	r3, [r7, #14]
 8001962:	89fa      	ldrh	r2, [r7, #14]
 8001964:	883b      	ldrh	r3, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d3ea      	bcc.n	8001940 <lcd_Fill+0x38>
		}
	}
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bd90      	pop	{r4, r7, pc}

08001974 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
 800197e:	460b      	mov	r3, r1
 8001980:	80bb      	strh	r3, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	88fa      	ldrh	r2, [r7, #6]
 800198a:	88b9      	ldrh	r1, [r7, #4]
 800198c:	88f8      	ldrh	r0, [r7, #6]
 800198e:	f7ff ff3d 	bl	800180c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff17 	bl	80017c8 <LCD_WR_DATA>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80019a2:	b590      	push	{r4, r7, lr}
 80019a4:	b08d      	sub	sp, #52	; 0x34
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4604      	mov	r4, r0
 80019aa:	4608      	mov	r0, r1
 80019ac:	4611      	mov	r1, r2
 80019ae:	461a      	mov	r2, r3
 80019b0:	4623      	mov	r3, r4
 80019b2:	80fb      	strh	r3, [r7, #6]
 80019b4:	4603      	mov	r3, r0
 80019b6:	80bb      	strh	r3, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
 80019bc:	4613      	mov	r3, r2
 80019be:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80019c8:	887a      	ldrh	r2, [r7, #2]
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80019d0:	883a      	ldrh	r2, [r7, #0]
 80019d2:	88bb      	ldrh	r3, [r7, #4]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80019dc:	88bb      	ldrh	r3, [r7, #4]
 80019de:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	dd02      	ble.n	80019ec <lcd_DrawLine+0x4a>
 80019e6:	2301      	movs	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e00b      	b.n	8001a04 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <lcd_DrawLine+0x56>
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e005      	b.n	8001a04 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	425b      	negs	r3, r3
 8001a02:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	dd02      	ble.n	8001a10 <lcd_DrawLine+0x6e>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	e00b      	b.n	8001a28 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <lcd_DrawLine+0x7a>
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	e005      	b.n	8001a28 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	425b      	negs	r3, r3
 8001a26:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001a28:	6a3a      	ldr	r2, [r7, #32]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dd02      	ble.n	8001a36 <lcd_DrawLine+0x94>
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	e001      	b.n	8001a3a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001a3e:	e02b      	b.n	8001a98 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	b291      	uxth	r1, r2
 8001a48:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff91 	bl	8001974 <lcd_DrawPoint>
		xerr+=delta_x;
 8001a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	4413      	add	r3, r2
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	4413      	add	r3, r2
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	dd07      	ble.n	8001a7a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	dd07      	ble.n	8001a92 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001a92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a94:	3301      	adds	r3, #1
 8001a96:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001a98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	dacf      	bge.n	8001a40 <lcd_DrawLine+0x9e>
		}
	}
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3734      	adds	r7, #52	; 0x34
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd90      	pop	{r4, r7, pc}

08001aaa <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8001aaa:	b590      	push	{r4, r7, lr}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af02      	add	r7, sp, #8
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	4608      	mov	r0, r1
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4623      	mov	r3, r4
 8001aba:	80fb      	strh	r3, [r7, #6]
 8001abc:	4603      	mov	r3, r0
 8001abe:	80bb      	strh	r3, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001ac8:	88bc      	ldrh	r4, [r7, #4]
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	88b9      	ldrh	r1, [r7, #4]
 8001ace:	88f8      	ldrh	r0, [r7, #6]
 8001ad0:	8b3b      	ldrh	r3, [r7, #24]
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	4623      	mov	r3, r4
 8001ad6:	f7ff ff64 	bl	80019a2 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001ada:	883c      	ldrh	r4, [r7, #0]
 8001adc:	88fa      	ldrh	r2, [r7, #6]
 8001ade:	88b9      	ldrh	r1, [r7, #4]
 8001ae0:	88f8      	ldrh	r0, [r7, #6]
 8001ae2:	8b3b      	ldrh	r3, [r7, #24]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	4623      	mov	r3, r4
 8001ae8:	f7ff ff5b 	bl	80019a2 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001aec:	883c      	ldrh	r4, [r7, #0]
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	8839      	ldrh	r1, [r7, #0]
 8001af2:	88f8      	ldrh	r0, [r7, #6]
 8001af4:	8b3b      	ldrh	r3, [r7, #24]
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	4623      	mov	r3, r4
 8001afa:	f7ff ff52 	bl	80019a2 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8001afe:	883c      	ldrh	r4, [r7, #0]
 8001b00:	887a      	ldrh	r2, [r7, #2]
 8001b02:	88b9      	ldrh	r1, [r7, #4]
 8001b04:	8878      	ldrh	r0, [r7, #2]
 8001b06:	8b3b      	ldrh	r3, [r7, #24]
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	4623      	mov	r3, r4
 8001b0c:	f7ff ff49 	bl	80019a2 <lcd_DrawLine>
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd90      	pop	{r4, r7, pc}

08001b18 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4604      	mov	r4, r0
 8001b20:	4608      	mov	r0, r1
 8001b22:	4611      	mov	r1, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	4623      	mov	r3, r4
 8001b28:	80fb      	strh	r3, [r7, #6]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80bb      	strh	r3, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	70fb      	strb	r3, [r7, #3]
 8001b32:	4613      	mov	r3, r2
 8001b34:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001b3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	08db      	lsrs	r3, r3, #3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	bf14      	ite	ne
 8001b5a:	2301      	movne	r3, #1
 8001b5c:	2300      	moveq	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	fb12 f303 	smulbb	r3, r2, r3
 8001b6e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	3b20      	subs	r3, #32
 8001b74:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29c      	uxth	r4, r3
 8001b84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	88bb      	ldrh	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	88b9      	ldrh	r1, [r7, #4]
 8001b96:	88f8      	ldrh	r0, [r7, #6]
 8001b98:	4622      	mov	r2, r4
 8001b9a:	f7ff fe37 	bl	800180c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	827b      	strh	r3, [r7, #18]
 8001ba2:	e07a      	b.n	8001c9a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001ba4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d028      	beq.n	8001bfe <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001bac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bb0:	2b10      	cmp	r3, #16
 8001bb2:	d108      	bne.n	8001bc6 <lcd_ShowChar+0xae>
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	8a7b      	ldrh	r3, [r7, #18]
 8001bb8:	493c      	ldr	r1, [pc, #240]	; (8001cac <lcd_ShowChar+0x194>)
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	440a      	add	r2, r1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	75fb      	strb	r3, [r7, #23]
 8001bc4:	e01b      	b.n	8001bfe <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001bc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bca:	2b18      	cmp	r3, #24
 8001bcc:	d10b      	bne.n	8001be6 <lcd_ShowChar+0xce>
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	8a79      	ldrh	r1, [r7, #18]
 8001bd2:	4837      	ldr	r0, [pc, #220]	; (8001cb0 <lcd_ShowChar+0x198>)
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	4403      	add	r3, r0
 8001bde:	440b      	add	r3, r1
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	75fb      	strb	r3, [r7, #23]
 8001be4:	e00b      	b.n	8001bfe <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001be6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d15a      	bne.n	8001ca4 <lcd_ShowChar+0x18c>
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	8a7b      	ldrh	r3, [r7, #18]
 8001bf2:	4930      	ldr	r1, [pc, #192]	; (8001cb4 <lcd_ShowChar+0x19c>)
 8001bf4:	0192      	lsls	r2, r2, #6
 8001bf6:	440a      	add	r2, r1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	75bb      	strb	r3, [r7, #22]
 8001c02:	e044      	b.n	8001c8e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001c04:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d120      	bne.n	8001c4e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001c0c:	7dfa      	ldrb	r2, [r7, #23]
 8001c0e:	7dbb      	ldrb	r3, [r7, #22]
 8001c10:	fa42 f303 	asr.w	r3, r2, r3
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d004      	beq.n	8001c26 <lcd_ShowChar+0x10e>
 8001c1c:	883b      	ldrh	r3, [r7, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fdd2 	bl	80017c8 <LCD_WR_DATA>
 8001c24:	e003      	b.n	8001c2e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001c26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fdcd 	bl	80017c8 <LCD_WR_DATA>
				m++;
 8001c2e:	7d7b      	ldrb	r3, [r7, #21]
 8001c30:	3301      	adds	r3, #1
 8001c32:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001c34:	7d7b      	ldrb	r3, [r7, #21]
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c3c:	fb02 f201 	mul.w	r2, r2, r1
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d11f      	bne.n	8001c88 <lcd_ShowChar+0x170>
				{
					m=0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	757b      	strb	r3, [r7, #21]
					break;
 8001c4c:	e022      	b.n	8001c94 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001c4e:	7dfa      	ldrb	r2, [r7, #23]
 8001c50:	7dbb      	ldrb	r3, [r7, #22]
 8001c52:	fa42 f303 	asr.w	r3, r2, r3
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <lcd_ShowChar+0x152>
 8001c5e:	883a      	ldrh	r2, [r7, #0]
 8001c60:	88b9      	ldrh	r1, [r7, #4]
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fe85 	bl	8001974 <lcd_DrawPoint>
				x++;
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	8a3b      	ldrh	r3, [r7, #16]
 8001c74:	1ad2      	subs	r2, r2, r3
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d105      	bne.n	8001c88 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001c7c:	8a3b      	ldrh	r3, [r7, #16]
 8001c7e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001c80:	88bb      	ldrh	r3, [r7, #4]
 8001c82:	3301      	adds	r3, #1
 8001c84:	80bb      	strh	r3, [r7, #4]
					break;
 8001c86:	e005      	b.n	8001c94 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001c88:	7dbb      	ldrb	r3, [r7, #22]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	75bb      	strb	r3, [r7, #22]
 8001c8e:	7dbb      	ldrb	r3, [r7, #22]
 8001c90:	2b07      	cmp	r3, #7
 8001c92:	d9b7      	bls.n	8001c04 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001c94:	8a7b      	ldrh	r3, [r7, #18]
 8001c96:	3301      	adds	r3, #1
 8001c98:	827b      	strh	r3, [r7, #18]
 8001c9a:	8a7a      	ldrh	r2, [r7, #18]
 8001c9c:	89bb      	ldrh	r3, [r7, #12]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d380      	bcc.n	8001ba4 <lcd_ShowChar+0x8c>
 8001ca2:	e000      	b.n	8001ca6 <lcd_ShowChar+0x18e>
		else return;
 8001ca4:	bf00      	nop
				}
			}
		}
	}
}
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd90      	pop	{r4, r7, pc}
 8001cac:	0800ac48 	.word	0x0800ac48
 8001cb0:	0800b238 	.word	0x0800b238
 8001cb4:	0800c408 	.word	0x0800c408

08001cb8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001ccc:	e004      	b.n	8001cd8 <mypow+0x20>
 8001cce:	79fa      	ldrb	r2, [r7, #7]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	fb02 f303 	mul.w	r3, r2, r3
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	79bb      	ldrb	r3, [r7, #6]
 8001cda:	1e5a      	subs	r2, r3, #1
 8001cdc:	71ba      	strb	r2, [r7, #6]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f5      	bne.n	8001cce <mypow+0x16>
	return result;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af04      	add	r7, sp, #16
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4623      	mov	r3, r4
 8001d00:	80fb      	strh	r3, [r7, #6]
 8001d02:	4603      	mov	r3, r0
 8001d04:	80bb      	strh	r3, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	807b      	strh	r3, [r7, #2]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001d12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]
 8001d1e:	e059      	b.n	8001dd4 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001d20:	887c      	ldrh	r4, [r7, #2]
 8001d22:	787a      	ldrb	r2, [r7, #1]
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4619      	mov	r1, r3
 8001d30:	200a      	movs	r0, #10
 8001d32:	f7ff ffc1 	bl	8001cb8 <mypow>
 8001d36:	4603      	mov	r3, r0
 8001d38:	fbb4 f1f3 	udiv	r1, r4, r3
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <lcd_ShowIntNum+0xf8>)
 8001d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	1aca      	subs	r2, r1, r3
 8001d4e:	4613      	mov	r3, r2
 8001d50:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d121      	bne.n	8001d9c <lcd_ShowIntNum+0xac>
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	787b      	ldrb	r3, [r7, #1]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	da1c      	bge.n	8001d9c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001d62:	7b3b      	ldrb	r3, [r7, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d117      	bne.n	8001d98 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	7b7b      	ldrb	r3, [r7, #13]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	fb12 f303 	smulbb	r3, r2, r3
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b298      	uxth	r0, r3
 8001d7c:	8c3a      	ldrh	r2, [r7, #32]
 8001d7e:	88b9      	ldrh	r1, [r7, #4]
 8001d80:	2300      	movs	r3, #0
 8001d82:	9302      	str	r3, [sp, #8]
 8001d84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	2220      	movs	r2, #32
 8001d92:	f7ff fec1 	bl	8001b18 <lcd_ShowChar>
				continue;
 8001d96:	e01a      	b.n	8001dce <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	7b7b      	ldrb	r3, [r7, #13]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	fb12 f303 	smulbb	r3, r2, r3
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	4413      	add	r3, r2
 8001dae:	b298      	uxth	r0, r3
 8001db0:	7b3b      	ldrb	r3, [r7, #12]
 8001db2:	3330      	adds	r3, #48	; 0x30
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	8c3c      	ldrh	r4, [r7, #32]
 8001db8:	88b9      	ldrh	r1, [r7, #4]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9302      	str	r3, [sp, #8]
 8001dbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001dc2:	9301      	str	r3, [sp, #4]
 8001dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	4623      	mov	r3, r4
 8001dca:	f7ff fea5 	bl	8001b18 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	787b      	ldrb	r3, [r7, #1]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d3a1      	bcc.n	8001d20 <lcd_ShowIntNum+0x30>
	}
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd90      	pop	{r4, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	cccccccd 	.word	0xcccccccd

08001dec <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b08b      	sub	sp, #44	; 0x2c
 8001df0:	af04      	add	r7, sp, #16
 8001df2:	4604      	mov	r4, r0
 8001df4:	4608      	mov	r0, r1
 8001df6:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4623      	mov	r3, r4
 8001e00:	81fb      	strh	r3, [r7, #14]
 8001e02:	4603      	mov	r3, r0
 8001e04:	81bb      	strh	r3, [r7, #12]
 8001e06:	460b      	mov	r3, r1
 8001e08:	71fb      	strb	r3, [r7, #7]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001e0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e12:	085b      	lsrs	r3, r3, #1
 8001e14:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001e16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e1a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001ef4 <lcd_ShowFloatNum+0x108>
 8001e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e26:	ee17 3a90 	vmov	r3, s15
 8001e2a:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	75fb      	strb	r3, [r7, #23]
 8001e30:	e057      	b.n	8001ee2 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001e32:	8abc      	ldrh	r4, [r7, #20]
 8001e34:	79fa      	ldrb	r2, [r7, #7]
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	4619      	mov	r1, r3
 8001e42:	200a      	movs	r0, #10
 8001e44:	f7ff ff38 	bl	8001cb8 <mypow>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	fbb4 f1f3 	udiv	r1, r4, r3
 8001e4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <lcd_ShowFloatNum+0x10c>)
 8001e50:	fba3 2301 	umull	r2, r3, r3, r1
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	1aca      	subs	r2, r1, r3
 8001e60:	4613      	mov	r3, r2
 8001e62:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001e64:	7dfa      	ldrb	r2, [r7, #23]
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	3b02      	subs	r3, #2
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d11d      	bne.n	8001eaa <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	3b02      	subs	r3, #2
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	7dbb      	ldrb	r3, [r7, #22]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	fb12 f303 	smulbb	r3, r2, r3
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	89fb      	ldrh	r3, [r7, #14]
 8001e80:	4413      	add	r3, r2
 8001e82:	b298      	uxth	r0, r3
 8001e84:	88ba      	ldrh	r2, [r7, #4]
 8001e86:	89b9      	ldrh	r1, [r7, #12]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9302      	str	r3, [sp, #8]
 8001e8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	4613      	mov	r3, r2
 8001e98:	222e      	movs	r2, #46	; 0x2e
 8001e9a:	f7ff fe3d 	bl	8001b18 <lcd_ShowChar>
			t++;
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001eaa:	7dfb      	ldrb	r3, [r7, #23]
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	7dbb      	ldrb	r3, [r7, #22]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	fb12 f303 	smulbb	r3, r2, r3
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	89fb      	ldrh	r3, [r7, #14]
 8001eba:	4413      	add	r3, r2
 8001ebc:	b298      	uxth	r0, r3
 8001ebe:	7cfb      	ldrb	r3, [r7, #19]
 8001ec0:	3330      	adds	r3, #48	; 0x30
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	88bc      	ldrh	r4, [r7, #4]
 8001ec6:	89b9      	ldrh	r1, [r7, #12]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9302      	str	r3, [sp, #8]
 8001ecc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	f7ff fe1e 	bl	8001b18 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	75fb      	strb	r3, [r7, #23]
 8001ee2:	7dfa      	ldrb	r2, [r7, #23]
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d3a3      	bcc.n	8001e32 <lcd_ShowFloatNum+0x46>
	}
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}
 8001ef4:	42c80000 	.word	0x42c80000
 8001ef8:	cccccccd 	.word	0xcccccccd

08001efc <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <lcd_SetDir+0x44>)
 8001f18:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f1c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <lcd_SetDir+0x44>)
 8001f20:	22f0      	movs	r2, #240	; 0xf0
 8001f22:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001f24:	e006      	b.n	8001f34 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <lcd_SetDir+0x44>)
 8001f28:	22f0      	movs	r2, #240	; 0xf0
 8001f2a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <lcd_SetDir+0x44>)
 8001f2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f32:	805a      	strh	r2, [r3, #2]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	2000025c 	.word	0x2000025c

08001f44 <lcd_init>:


void lcd_init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f4e:	48aa      	ldr	r0, [pc, #680]	; (80021f8 <lcd_init+0x2b4>)
 8001f50:	f003 ffa2 	bl	8005e98 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f58:	f002 fcb8 	bl	80048cc <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f62:	48a5      	ldr	r0, [pc, #660]	; (80021f8 <lcd_init+0x2b4>)
 8001f64:	f003 ff98 	bl	8005e98 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f6c:	f002 fcae 	bl	80048cc <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff ffc3 	bl	8001efc <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001f76:	20d3      	movs	r0, #211	; 0xd3
 8001f78:	f7ff fc16 	bl	80017a8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001f7c:	f7ff fc34 	bl	80017e8 <LCD_RD_DATA>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b9d      	ldr	r3, [pc, #628]	; (80021fc <lcd_init+0x2b8>)
 8001f86:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001f88:	f7ff fc2e 	bl	80017e8 <LCD_RD_DATA>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b9a      	ldr	r3, [pc, #616]	; (80021fc <lcd_init+0x2b8>)
 8001f92:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001f94:	f7ff fc28 	bl	80017e8 <LCD_RD_DATA>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b97      	ldr	r3, [pc, #604]	; (80021fc <lcd_init+0x2b8>)
 8001f9e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001fa0:	4b96      	ldr	r3, [pc, #600]	; (80021fc <lcd_init+0x2b8>)
 8001fa2:	889b      	ldrh	r3, [r3, #4]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b94      	ldr	r3, [pc, #592]	; (80021fc <lcd_init+0x2b8>)
 8001faa:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001fac:	f7ff fc1c 	bl	80017e8 <LCD_RD_DATA>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b91      	ldr	r3, [pc, #580]	; (80021fc <lcd_init+0x2b8>)
 8001fb6:	889b      	ldrh	r3, [r3, #4]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b8f      	ldr	r3, [pc, #572]	; (80021fc <lcd_init+0x2b8>)
 8001fbe:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001fc0:	20cf      	movs	r0, #207	; 0xcf
 8001fc2:	f7ff fbf1 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff fbfe 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001fcc:	20c1      	movs	r0, #193	; 0xc1
 8001fce:	f7ff fbfb 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001fd2:	2030      	movs	r0, #48	; 0x30
 8001fd4:	f7ff fbf8 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001fd8:	20ed      	movs	r0, #237	; 0xed
 8001fda:	f7ff fbe5 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001fde:	2064      	movs	r0, #100	; 0x64
 8001fe0:	f7ff fbf2 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f7ff fbef 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001fea:	2012      	movs	r0, #18
 8001fec:	f7ff fbec 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001ff0:	2081      	movs	r0, #129	; 0x81
 8001ff2:	f7ff fbe9 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001ff6:	20e8      	movs	r0, #232	; 0xe8
 8001ff8:	f7ff fbd6 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001ffc:	2085      	movs	r0, #133	; 0x85
 8001ffe:	f7ff fbe3 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002002:	2010      	movs	r0, #16
 8002004:	f7ff fbe0 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002008:	207a      	movs	r0, #122	; 0x7a
 800200a:	f7ff fbdd 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800200e:	20cb      	movs	r0, #203	; 0xcb
 8002010:	f7ff fbca 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002014:	2039      	movs	r0, #57	; 0x39
 8002016:	f7ff fbd7 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800201a:	202c      	movs	r0, #44	; 0x2c
 800201c:	f7ff fbd4 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff fbd1 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002026:	2034      	movs	r0, #52	; 0x34
 8002028:	f7ff fbce 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800202c:	2002      	movs	r0, #2
 800202e:	f7ff fbcb 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002032:	20f7      	movs	r0, #247	; 0xf7
 8002034:	f7ff fbb8 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002038:	2020      	movs	r0, #32
 800203a:	f7ff fbc5 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800203e:	20ea      	movs	r0, #234	; 0xea
 8002040:	f7ff fbb2 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff fbbf 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800204a:	2000      	movs	r0, #0
 800204c:	f7ff fbbc 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002050:	20c0      	movs	r0, #192	; 0xc0
 8002052:	f7ff fba9 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002056:	201b      	movs	r0, #27
 8002058:	f7ff fbb6 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800205c:	20c1      	movs	r0, #193	; 0xc1
 800205e:	f7ff fba3 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002062:	2001      	movs	r0, #1
 8002064:	f7ff fbb0 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002068:	20c5      	movs	r0, #197	; 0xc5
 800206a:	f7ff fb9d 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800206e:	2030      	movs	r0, #48	; 0x30
 8002070:	f7ff fbaa 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002074:	2030      	movs	r0, #48	; 0x30
 8002076:	f7ff fba7 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800207a:	20c7      	movs	r0, #199	; 0xc7
 800207c:	f7ff fb94 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002080:	20b7      	movs	r0, #183	; 0xb7
 8002082:	f7ff fba1 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002086:	2036      	movs	r0, #54	; 0x36
 8002088:	f7ff fb8e 	bl	80017a8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 800208c:	2008      	movs	r0, #8
 800208e:	f7ff fb9b 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002092:	203a      	movs	r0, #58	; 0x3a
 8002094:	f7ff fb88 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002098:	2055      	movs	r0, #85	; 0x55
 800209a:	f7ff fb95 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800209e:	20b1      	movs	r0, #177	; 0xb1
 80020a0:	f7ff fb82 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff fb8f 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80020aa:	201a      	movs	r0, #26
 80020ac:	f7ff fb8c 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80020b0:	20b6      	movs	r0, #182	; 0xb6
 80020b2:	f7ff fb79 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80020b6:	200a      	movs	r0, #10
 80020b8:	f7ff fb86 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80020bc:	20a2      	movs	r0, #162	; 0xa2
 80020be:	f7ff fb83 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80020c2:	20f2      	movs	r0, #242	; 0xf2
 80020c4:	f7ff fb70 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7ff fb7d 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80020ce:	2026      	movs	r0, #38	; 0x26
 80020d0:	f7ff fb6a 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80020d4:	2001      	movs	r0, #1
 80020d6:	f7ff fb77 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80020da:	20e0      	movs	r0, #224	; 0xe0
 80020dc:	f7ff fb64 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80020e0:	200f      	movs	r0, #15
 80020e2:	f7ff fb71 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80020e6:	202a      	movs	r0, #42	; 0x2a
 80020e8:	f7ff fb6e 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80020ec:	2028      	movs	r0, #40	; 0x28
 80020ee:	f7ff fb6b 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80020f2:	2008      	movs	r0, #8
 80020f4:	f7ff fb68 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80020f8:	200e      	movs	r0, #14
 80020fa:	f7ff fb65 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80020fe:	2008      	movs	r0, #8
 8002100:	f7ff fb62 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002104:	2054      	movs	r0, #84	; 0x54
 8002106:	f7ff fb5f 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800210a:	20a9      	movs	r0, #169	; 0xa9
 800210c:	f7ff fb5c 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002110:	2043      	movs	r0, #67	; 0x43
 8002112:	f7ff fb59 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002116:	200a      	movs	r0, #10
 8002118:	f7ff fb56 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800211c:	200f      	movs	r0, #15
 800211e:	f7ff fb53 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002122:	2000      	movs	r0, #0
 8002124:	f7ff fb50 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff fb4d 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800212e:	2000      	movs	r0, #0
 8002130:	f7ff fb4a 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002134:	2000      	movs	r0, #0
 8002136:	f7ff fb47 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800213a:	20e1      	movs	r0, #225	; 0xe1
 800213c:	f7ff fb34 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff fb41 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002146:	2015      	movs	r0, #21
 8002148:	f7ff fb3e 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800214c:	2017      	movs	r0, #23
 800214e:	f7ff fb3b 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002152:	2007      	movs	r0, #7
 8002154:	f7ff fb38 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002158:	2011      	movs	r0, #17
 800215a:	f7ff fb35 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800215e:	2006      	movs	r0, #6
 8002160:	f7ff fb32 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002164:	202b      	movs	r0, #43	; 0x2b
 8002166:	f7ff fb2f 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800216a:	2056      	movs	r0, #86	; 0x56
 800216c:	f7ff fb2c 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002170:	203c      	movs	r0, #60	; 0x3c
 8002172:	f7ff fb29 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002176:	2005      	movs	r0, #5
 8002178:	f7ff fb26 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800217c:	2010      	movs	r0, #16
 800217e:	f7ff fb23 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002182:	200f      	movs	r0, #15
 8002184:	f7ff fb20 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002188:	203f      	movs	r0, #63	; 0x3f
 800218a:	f7ff fb1d 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800218e:	203f      	movs	r0, #63	; 0x3f
 8002190:	f7ff fb1a 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002194:	200f      	movs	r0, #15
 8002196:	f7ff fb17 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800219a:	202b      	movs	r0, #43	; 0x2b
 800219c:	f7ff fb04 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7ff fb11 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7ff fb0e 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80021ac:	2001      	movs	r0, #1
 80021ae:	f7ff fb0b 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80021b2:	203f      	movs	r0, #63	; 0x3f
 80021b4:	f7ff fb08 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80021b8:	202a      	movs	r0, #42	; 0x2a
 80021ba:	f7ff faf5 	bl	80017a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021be:	2000      	movs	r0, #0
 80021c0:	f7ff fb02 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff faff 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7ff fafc 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80021d0:	20ef      	movs	r0, #239	; 0xef
 80021d2:	f7ff faf9 	bl	80017c8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80021d6:	2011      	movs	r0, #17
 80021d8:	f7ff fae6 	bl	80017a8 <LCD_WR_REG>
	HAL_Delay(120);
 80021dc:	2078      	movs	r0, #120	; 0x78
 80021de:	f002 fb75 	bl	80048cc <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80021e2:	2029      	movs	r0, #41	; 0x29
 80021e4:	f7ff fae0 	bl	80017a8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80021e8:	2201      	movs	r2, #1
 80021ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ee:	4804      	ldr	r0, [pc, #16]	; (8002200 <lcd_init+0x2bc>)
 80021f0:	f003 fe52 	bl	8005e98 <HAL_GPIO_WritePin>
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40020800 	.word	0x40020800
 80021fc:	2000025c 	.word	0x2000025c
 8002200:	40020000 	.word	0x40020000

08002204 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002204:	b590      	push	{r4, r7, lr}
 8002206:	b08b      	sub	sp, #44	; 0x2c
 8002208:	af04      	add	r7, sp, #16
 800220a:	60ba      	str	r2, [r7, #8]
 800220c:	461a      	mov	r2, r3
 800220e:	4603      	mov	r3, r0
 8002210:	81fb      	strh	r3, [r7, #14]
 8002212:	460b      	mov	r3, r1
 8002214:	81bb      	strh	r3, [r7, #12]
 8002216:	4613      	mov	r3, r2
 8002218:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800221a:	89fb      	ldrh	r3, [r7, #14]
 800221c:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 800221e:	2300      	movs	r3, #0
 8002220:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002222:	e048      	b.n	80022b6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d145      	bne.n	80022b6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800222a:	89fa      	ldrh	r2, [r7, #14]
 800222c:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <lcd_ShowStr+0xc4>)
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	1acb      	subs	r3, r1, r3
 800223c:	429a      	cmp	r2, r3
 800223e:	dc3f      	bgt.n	80022c0 <lcd_ShowStr+0xbc>
 8002240:	89ba      	ldrh	r2, [r7, #12]
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <lcd_ShowStr+0xc4>)
 8002244:	885b      	ldrh	r3, [r3, #2]
 8002246:	4619      	mov	r1, r3
 8002248:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800224c:	1acb      	subs	r3, r1, r3
 800224e:	429a      	cmp	r2, r3
 8002250:	dc36      	bgt.n	80022c0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b80      	cmp	r3, #128	; 0x80
 8002258:	d902      	bls.n	8002260 <lcd_ShowStr+0x5c>
 800225a:	2301      	movs	r3, #1
 800225c:	75fb      	strb	r3, [r7, #23]
 800225e:	e02a      	b.n	80022b6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b0d      	cmp	r3, #13
 8002266:	d10b      	bne.n	8002280 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002268:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800226c:	b29a      	uxth	r2, r3
 800226e:	89bb      	ldrh	r3, [r7, #12]
 8002270:	4413      	add	r3, r2
 8002272:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002274:	8abb      	ldrh	r3, [r7, #20]
 8002276:	81fb      	strh	r3, [r7, #14]
					str++;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	3301      	adds	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	e017      	b.n	80022b0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	88fc      	ldrh	r4, [r7, #6]
 8002286:	89b9      	ldrh	r1, [r7, #12]
 8002288:	89f8      	ldrh	r0, [r7, #14]
 800228a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	4623      	mov	r3, r4
 800229c:	f7ff fc3c 	bl	8001b18 <lcd_ShowChar>
					x+=sizey/2;
 80022a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022a4:	085b      	lsrs	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	89fb      	ldrh	r3, [r7, #14]
 80022ac:	4413      	add	r3, r2
 80022ae:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	3301      	adds	r3, #1
 80022b4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1b2      	bne.n	8002224 <lcd_ShowStr+0x20>
 80022be:	e000      	b.n	80022c2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80022c0:	bf00      	nop
			}
		}
	}
}
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	2000025c 	.word	0x2000025c

080022cc <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80022d0:	2201      	movs	r2, #1
 80022d2:	2140      	movs	r1, #64	; 0x40
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <led7_init+0x14>)
 80022d6:	f003 fddf 	bl	8005e98 <HAL_GPIO_WritePin>
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40021800 	.word	0x40021800

080022e4 <led7_SetDigit>:
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	4613      	mov	r3, r2
 80022f0:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0e      	blt.n	8002316 <led7_SetDigit+0x32>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	dc0b      	bgt.n	8002316 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80022fe:	4a09      	ldr	r2, [pc, #36]	; (8002324 <led7_SetDigit+0x40>)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	b2d9      	uxtb	r1, r3
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <led7_SetDigit+0x44>)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	4413      	add	r3, r2
 8002312:	460a      	mov	r2, r1
 8002314:	701a      	strb	r2, [r3, #0]
	}
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000004 	.word	0x20000004
 8002328:	20000000 	.word	0x20000000

0800232c <led7_SetColon>:

void led7_SetColon(uint8_t status){
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d107      	bne.n	800234c <led7_SetColon+0x20>
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <led7_SetColon+0x3c>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	f023 0308 	bic.w	r3, r3, #8
 8002344:	b29a      	uxth	r2, r3
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <led7_SetColon+0x3c>)
 8002348:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 800234a:	e006      	b.n	800235a <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <led7_SetColon+0x3c>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	f043 0308 	orr.w	r3, r3, #8
 8002354:	b29a      	uxth	r2, r3
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <led7_SetColon+0x3c>)
 8002358:	801a      	strh	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	2000000e 	.word	0x2000000e

0800236c <sys_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sys_init(){
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	lcd_init();
 8002370:	f7ff fde8 	bl	8001f44 <lcd_init>
	sensor_init();
 8002374:	f001 f9b2 	bl	80036dc <sensor_init>
	buzzer_init();
 8002378:	f7fe ff02 	bl	8001180 <buzzer_init>
	button_init();
 800237c:	f7fe fe50 	bl	8001020 <button_init>
	uart_init_rs232();
 8002380:	f002 f8b4 	bl	80044ec <uart_init_rs232>
	init_box();
 8002384:	f000 ffa2 	bl	80032cc <init_box>
	set_timer(0, READ_BUTTON_TIME);
 8002388:	210a      	movs	r1, #10
 800238a:	2000      	movs	r0, #0
 800238c:	f001 fa9c 	bl	80038c8 <set_timer>
	set_timer(1, BLINKING_TIME);
 8002390:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002394:	2001      	movs	r0, #1
 8002396:	f001 fa97 	bl	80038c8 <set_timer>
	set_timer(2, INCREASE_TIME);
 800239a:	21c8      	movs	r1, #200	; 0xc8
 800239c:	2002      	movs	r0, #2
 800239e:	f001 fa93 	bl	80038c8 <set_timer>
	set_timer(3, LCD_SENSOR_TIME);
 80023a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80023a6:	2003      	movs	r0, #3
 80023a8:	f001 fa8e 	bl	80038c8 <set_timer>
	set_timer(4, ONE_SECOND);
 80023ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023b0:	2004      	movs	r0, #4
 80023b2:	f001 fa89 	bl	80038c8 <set_timer>
	set_timer(5, ONE_SECOND);
 80023b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023ba:	2005      	movs	r0, #5
 80023bc:	f001 fa84 	bl	80038c8 <set_timer>
	set_timer(6, ONE_SECOND);
 80023c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023c4:	2006      	movs	r0, #6
 80023c6:	f001 fa7f 	bl	80038c8 <set_timer>
	//display_text();
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023d4:	f002 fa08 	bl	80047e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023d8:	f000 f844 	bl	8002464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023dc:	f7ff f868 	bl	80014b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80023e0:	f7fe fef0 	bl	80011c4 <MX_DMA_Init>
  MX_SPI1_Init();
 80023e4:	f001 fae4 	bl	80039b0 <MX_SPI1_Init>
  MX_FSMC_Init();
 80023e8:	f7fe ff92 	bl	8001310 <MX_FSMC_Init>
  MX_I2C1_Init();
 80023ec:	f7ff f966 	bl	80016bc <MX_I2C1_Init>
  MX_TIM13_Init();
 80023f0:	f001 ffb8 	bl	8004364 <MX_TIM13_Init>
  MX_TIM2_Init();
 80023f4:	f001 ff6a 	bl	80042cc <MX_TIM2_Init>
  MX_ADC1_Init();
 80023f8:	f7fe fcf4 	bl	8000de4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80023fc:	f002 f912 	bl	8004624 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8002400:	4817      	ldr	r0, [pc, #92]	; (8002460 <main+0x90>)
 8002402:	f005 fe97 	bl	8008134 <HAL_TIM_Base_Start_IT>
  sys_init();
 8002406:	f7ff ffb1 	bl	800236c <sys_init>
  /* USER CODE END 2 */
  	ds3231_Write(ADDRESS_YEAR, 24);
 800240a:	2118      	movs	r1, #24
 800240c:	2006      	movs	r0, #6
 800240e:	f7fe fef9 	bl	8001204 <ds3231_Write>
  	ds3231_Write(ADDRESS_MONTH, 11);
 8002412:	210b      	movs	r1, #11
 8002414:	2005      	movs	r0, #5
 8002416:	f7fe fef5 	bl	8001204 <ds3231_Write>
  	ds3231_Write(ADDRESS_DATE, 29);
 800241a:	211d      	movs	r1, #29
 800241c:	2004      	movs	r0, #4
 800241e:	f7fe fef1 	bl	8001204 <ds3231_Write>
  	ds3231_Write(ADDRESS_DAY, 6);
 8002422:	2106      	movs	r1, #6
 8002424:	2003      	movs	r0, #3
 8002426:	f7fe feed 	bl	8001204 <ds3231_Write>
  	ds3231_Write(ADDRESS_HOUR, 9);
 800242a:	2109      	movs	r1, #9
 800242c:	2002      	movs	r0, #2
 800242e:	f7fe fee9 	bl	8001204 <ds3231_Write>
  	ds3231_Write(ADDRESS_MIN, 27);
 8002432:	211b      	movs	r1, #27
 8002434:	2001      	movs	r0, #1
 8002436:	f7fe fee5 	bl	8001204 <ds3231_Write>
  	ds3231_Write(ADDRESS_SEC, 0);
 800243a:	2100      	movs	r1, #0
 800243c:	2000      	movs	r0, #0
 800243e:	f7fe fee1 	bl	8001204 <ds3231_Write>
  	led7_SetColon(1);
 8002442:	2001      	movs	r0, #1
 8002444:	f7ff ff72 	bl	800232c <led7_SetColon>
  	led7_init();
 8002448:	f7ff ff40 	bl	80022cc <led7_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(WHITE);
 800244c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002450:	f7ff fa28 	bl	80018a4 <lcd_Clear>
  while (1)
  {

	  system_loop();
 8002454:	f001 ff0a 	bl	800426c <system_loop>
	  current_time();
 8002458:	f000 f86e 	bl	8002538 <current_time>
  {
 800245c:	e7fa      	b.n	8002454 <main+0x84>
 800245e:	bf00      	nop
 8002460:	200003d8 	.word	0x200003d8

08002464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b094      	sub	sp, #80	; 0x50
 8002468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800246a:	f107 0320 	add.w	r3, r7, #32
 800246e:	2230      	movs	r2, #48	; 0x30
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f007 ff0c 	bl	800a290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	4b28      	ldr	r3, [pc, #160]	; (8002530 <SystemClock_Config+0xcc>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	4a27      	ldr	r2, [pc, #156]	; (8002530 <SystemClock_Config+0xcc>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002496:	6413      	str	r3, [r2, #64]	; 0x40
 8002498:	4b25      	ldr	r3, [pc, #148]	; (8002530 <SystemClock_Config+0xcc>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	4b22      	ldr	r3, [pc, #136]	; (8002534 <SystemClock_Config+0xd0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a21      	ldr	r2, [pc, #132]	; (8002534 <SystemClock_Config+0xd0>)
 80024ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <SystemClock_Config+0xd0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024c0:	2302      	movs	r3, #2
 80024c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024c4:	2301      	movs	r3, #1
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024c8:	2310      	movs	r3, #16
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024cc:	2302      	movs	r3, #2
 80024ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024d0:	2300      	movs	r3, #0
 80024d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024d4:	2308      	movs	r3, #8
 80024d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80024d8:	23a8      	movs	r3, #168	; 0xa8
 80024da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024dc:	2302      	movs	r3, #2
 80024de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024e0:	2304      	movs	r3, #4
 80024e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e4:	f107 0320 	add.w	r3, r7, #32
 80024e8:	4618      	mov	r0, r3
 80024ea:	f004 fcaf 	bl	8006e4c <HAL_RCC_OscConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024f4:	f000 f896 	bl	8002624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f8:	230f      	movs	r3, #15
 80024fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024fc:	2302      	movs	r3, #2
 80024fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002504:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002508:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800250a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800250e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002510:	f107 030c 	add.w	r3, r7, #12
 8002514:	2105      	movs	r1, #5
 8002516:	4618      	mov	r0, r3
 8002518:	f004 ff10 	bl	800733c <HAL_RCC_ClockConfig>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002522:	f000 f87f 	bl	8002624 <Error_Handler>
  }
}
 8002526:	bf00      	nop
 8002528:	3750      	adds	r7, #80	; 0x50
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	40007000 	.word	0x40007000

08002538 <current_time>:

/* USER CODE BEGIN 4 */
int hour = 9, minute = 27;
int count_time = 0;
void current_time(){
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	count_time = (count_time + 1) % 1200;
 800253c:	4b34      	ldr	r3, [pc, #208]	; (8002610 <current_time+0xd8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	4b34      	ldr	r3, [pc, #208]	; (8002614 <current_time+0xdc>)
 8002544:	fb83 1302 	smull	r1, r3, r3, r2
 8002548:	11d9      	asrs	r1, r3, #7
 800254a:	17d3      	asrs	r3, r2, #31
 800254c:	1acb      	subs	r3, r1, r3
 800254e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	4a2d      	ldr	r2, [pc, #180]	; (8002610 <current_time+0xd8>)
 800255a:	6013      	str	r3, [r2, #0]
	if(count_time == 0){
 800255c:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <current_time+0xd8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d117      	bne.n	8002594 <current_time+0x5c>
		minute++;
 8002564:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <current_time+0xe0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	4a2b      	ldr	r2, [pc, #172]	; (8002618 <current_time+0xe0>)
 800256c:	6013      	str	r3, [r2, #0]
		if(minute >= 60){
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <current_time+0xe0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b3b      	cmp	r3, #59	; 0x3b
 8002574:	dd07      	ble.n	8002586 <current_time+0x4e>
			minute = 0;
 8002576:	4b28      	ldr	r3, [pc, #160]	; (8002618 <current_time+0xe0>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
			hour++;
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <current_time+0xe4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	4a26      	ldr	r2, [pc, #152]	; (800261c <current_time+0xe4>)
 8002584:	6013      	str	r3, [r2, #0]
		}
		if(hour >= 24){
 8002586:	4b25      	ldr	r3, [pc, #148]	; (800261c <current_time+0xe4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b17      	cmp	r3, #23
 800258c:	dd02      	ble.n	8002594 <current_time+0x5c>
			hour = 0;
 800258e:	4b23      	ldr	r3, [pc, #140]	; (800261c <current_time+0xe4>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
		}
	}
	led7_SetDigit(hour / 10, 0, 0);
 8002594:	4b21      	ldr	r3, [pc, #132]	; (800261c <current_time+0xe4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a21      	ldr	r2, [pc, #132]	; (8002620 <current_time+0xe8>)
 800259a:	fb82 1203 	smull	r1, r2, r2, r3
 800259e:	1092      	asrs	r2, r2, #2
 80025a0:	17db      	asrs	r3, r3, #31
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2200      	movs	r2, #0
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fe9b 	bl	80022e4 <led7_SetDigit>
	led7_SetDigit(hour % 10, 1, 0);
 80025ae:	4b1b      	ldr	r3, [pc, #108]	; (800261c <current_time+0xe4>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <current_time+0xe8>)
 80025b4:	fb83 1302 	smull	r1, r3, r3, r2
 80025b8:	1099      	asrs	r1, r3, #2
 80025ba:	17d3      	asrs	r3, r2, #31
 80025bc:	1ac8      	subs	r0, r1, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4403      	add	r3, r0
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	1ad0      	subs	r0, r2, r3
 80025c8:	2200      	movs	r2, #0
 80025ca:	2101      	movs	r1, #1
 80025cc:	f7ff fe8a 	bl	80022e4 <led7_SetDigit>
	led7_SetDigit(minute / 10, 2, 0);
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <current_time+0xe0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a12      	ldr	r2, [pc, #72]	; (8002620 <current_time+0xe8>)
 80025d6:	fb82 1203 	smull	r1, r2, r2, r3
 80025da:	1092      	asrs	r2, r2, #2
 80025dc:	17db      	asrs	r3, r3, #31
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2200      	movs	r2, #0
 80025e2:	2102      	movs	r1, #2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fe7d 	bl	80022e4 <led7_SetDigit>
	led7_SetDigit(minute % 10, 3, 0);
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <current_time+0xe0>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <current_time+0xe8>)
 80025f0:	fb83 1302 	smull	r1, r3, r3, r2
 80025f4:	1099      	asrs	r1, r3, #2
 80025f6:	17d3      	asrs	r3, r2, #31
 80025f8:	1ac8      	subs	r0, r1, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4403      	add	r3, r0
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	1ad0      	subs	r0, r2, r3
 8002604:	2200      	movs	r2, #0
 8002606:	2103      	movs	r1, #3
 8002608:	f7ff fe6c 	bl	80022e4 <led7_SetDigit>

}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200000c0 	.word	0x200000c0
 8002614:	1b4e81b5 	.word	0x1b4e81b5
 8002618:	20000014 	.word	0x20000014
 800261c:	20000010 	.word	0x20000010
 8002620:	66666667 	.word	0x66666667

08002624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002628:	b672      	cpsid	i
}
 800262a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800262c:	e7fe      	b.n	800262c <Error_Handler+0x8>

0800262e <alarm>:
/*
 * @brief:	alarm function when value of clock is equal to value of alarm
 * @para:	none
 * @retval:	none
 * */
void alarm(void) {
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
//	}
//	else{
//		buzzer_SetVolume(0);
//		lcd_ShowStr(10, 200, "WAKE UP", BLACK, BLACK, 24, 0);
//	}
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <fsm_clock>:
/*
 * @brief:	top-layer state machine of clock
 * @para:	none
 * @retval:	none
 * */
void fsm_clock(void) {
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	switch (st_clock) {
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <fsm_clock+0x50>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d018      	beq.n	800267a <fsm_clock+0x3e>
 8002648:	2b02      	cmp	r3, #2
 800264a:	dc1d      	bgt.n	8002688 <fsm_clock+0x4c>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <fsm_clock+0x1a>
 8002650:	2b01      	cmp	r3, #1
 8002652:	d00b      	beq.n	800266c <fsm_clock+0x30>
	case ALARM:
		fsm_alarm();
		display_mode();
		button0_fsm();
	}
}
 8002654:	e018      	b.n	8002688 <fsm_clock+0x4c>
		update_clock();
 8002656:	f000 fdaf 	bl	80031b8 <update_clock>
		display_all_clock();
 800265a:	f000 fded 	bl	8003238 <display_all_clock>
		display_mode();
 800265e:	f000 fe27 	bl	80032b0 <display_mode>
		alarm();
 8002662:	f7ff ffe4 	bl	800262e <alarm>
		button0_fsm();
 8002666:	f000 fb61 	bl	8002d2c <button0_fsm>
		break;
 800266a:	e00d      	b.n	8002688 <fsm_clock+0x4c>
		fsm_changing();
 800266c:	f000 f992 	bl	8002994 <fsm_changing>
		display_mode();
 8002670:	f000 fe1e 	bl	80032b0 <display_mode>
		button0_fsm();
 8002674:	f000 fb5a 	bl	8002d2c <button0_fsm>
		break;
 8002678:	e006      	b.n	8002688 <fsm_clock+0x4c>
		fsm_alarm();
 800267a:	f000 f809 	bl	8002690 <fsm_alarm>
		display_mode();
 800267e:	f000 fe17 	bl	80032b0 <display_mode>
		button0_fsm();
 8002682:	f000 fb53 	bl	8002d2c <button0_fsm>
}
 8002686:	e7ff      	b.n	8002688 <fsm_clock+0x4c>
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200000c4 	.word	0x200000c4

08002690 <fsm_alarm>:
/*
 * @brief:	blinking number, changing buffer of alarm
 * @para:	none
 * @retval:	none
 * */
void fsm_alarm(void) {
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	switch (st_changing) {
 8002694:	4bb7      	ldr	r3, [pc, #732]	; (8002974 <fsm_alarm+0x2e4>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b06      	cmp	r3, #6
 800269a:	f200 8169 	bhi.w	8002970 <fsm_alarm+0x2e0>
 800269e:	a201      	add	r2, pc, #4	; (adr r2, 80026a4 <fsm_alarm+0x14>)
 80026a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a4:	080026c1 	.word	0x080026c1
 80026a8:	080026d1 	.word	0x080026d1
 80026ac:	08002741 	.word	0x08002741
 80026b0:	080027b1 	.word	0x080027b1
 80026b4:	08002821 	.word	0x08002821
 80026b8:	08002891 	.word	0x08002891
 80026bc:	08002901 	.word	0x08002901
	case SECOND:
		// no set alarm on second
		dis_sec(1, 0);
 80026c0:	2100      	movs	r1, #0
 80026c2:	2001      	movs	r0, #1
 80026c4:	f000 fe3c 	bl	8003340 <dis_sec>
		st_changing = MINUTE;
 80026c8:	4baa      	ldr	r3, [pc, #680]	; (8002974 <fsm_alarm+0x2e4>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
		break;
 80026ce:	e14f      	b.n	8002970 <fsm_alarm+0x2e0>
	case MINUTE:
		//blinking number
		switch (st_blinking) {
 80026d0:	4ba9      	ldr	r3, [pc, #676]	; (8002978 <fsm_alarm+0x2e8>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <fsm_alarm+0x4e>
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d015      	beq.n	8002708 <fsm_alarm+0x78>
 80026dc:	e02a      	b.n	8002734 <fsm_alarm+0xa4>
		case ON:
			dis_min(ala_min, 1);
 80026de:	4ba7      	ldr	r3, [pc, #668]	; (800297c <fsm_alarm+0x2ec>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2101      	movs	r1, #1
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fe69 	bl	80033bc <dis_min>
			if (!is_timer_on(1)) {
 80026ea:	2001      	movs	r0, #1
 80026ec:	f001 f94a 	bl	8003984 <is_timer_on>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d11d      	bne.n	8002732 <fsm_alarm+0xa2>
				st_blinking = OFF;
 80026f6:	4ba0      	ldr	r3, [pc, #640]	; (8002978 <fsm_alarm+0x2e8>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80026fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002700:	2001      	movs	r0, #1
 8002702:	f001 f8e1 	bl	80038c8 <set_timer>
			}
			break;
 8002706:	e014      	b.n	8002732 <fsm_alarm+0xa2>
		case OFF:
			dis_min(ala_min, 0);
 8002708:	4b9c      	ldr	r3, [pc, #624]	; (800297c <fsm_alarm+0x2ec>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fe54 	bl	80033bc <dis_min>
			if (!is_timer_on(1)) {
 8002714:	2001      	movs	r0, #1
 8002716:	f001 f935 	bl	8003984 <is_timer_on>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d109      	bne.n	8002734 <fsm_alarm+0xa4>
				st_blinking = ON;
 8002720:	4b95      	ldr	r3, [pc, #596]	; (8002978 <fsm_alarm+0x2e8>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002726:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800272a:	2001      	movs	r0, #1
 800272c:	f001 f8cc 	bl	80038c8 <set_timer>
 8002730:	e000      	b.n	8002734 <fsm_alarm+0xa4>
			break;
 8002732:	bf00      	nop
			}
		}
		//set value
		button1_fsm(&ala_min);
 8002734:	4891      	ldr	r0, [pc, #580]	; (800297c <fsm_alarm+0x2ec>)
 8002736:	f000 fcdd 	bl	80030f4 <button1_fsm>
		button2_fsm();
 800273a:	f000 fb4d 	bl	8002dd8 <button2_fsm>
		break;
 800273e:	e117      	b.n	8002970 <fsm_alarm+0x2e0>
	case HOUR:
		switch (st_blinking) {
 8002740:	4b8d      	ldr	r3, [pc, #564]	; (8002978 <fsm_alarm+0x2e8>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <fsm_alarm+0xbe>
 8002748:	2b01      	cmp	r3, #1
 800274a:	d015      	beq.n	8002778 <fsm_alarm+0xe8>
 800274c:	e02a      	b.n	80027a4 <fsm_alarm+0x114>
		case ON:
			dis_hour(ala_hour, 1);
 800274e:	4b8c      	ldr	r3, [pc, #560]	; (8002980 <fsm_alarm+0x2f0>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2101      	movs	r1, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fe6f 	bl	8003438 <dis_hour>
			if (!is_timer_on(1)) {
 800275a:	2001      	movs	r0, #1
 800275c:	f001 f912 	bl	8003984 <is_timer_on>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11d      	bne.n	80027a2 <fsm_alarm+0x112>
				st_blinking = OFF;
 8002766:	4b84      	ldr	r3, [pc, #528]	; (8002978 <fsm_alarm+0x2e8>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800276c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002770:	2001      	movs	r0, #1
 8002772:	f001 f8a9 	bl	80038c8 <set_timer>
			}
			break;
 8002776:	e014      	b.n	80027a2 <fsm_alarm+0x112>
		case OFF:
			dis_hour(ala_hour, 0);
 8002778:	4b81      	ldr	r3, [pc, #516]	; (8002980 <fsm_alarm+0x2f0>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fe5a 	bl	8003438 <dis_hour>
			if (!is_timer_on(1)) {
 8002784:	2001      	movs	r0, #1
 8002786:	f001 f8fd 	bl	8003984 <is_timer_on>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <fsm_alarm+0x114>
				st_blinking = ON;
 8002790:	4b79      	ldr	r3, [pc, #484]	; (8002978 <fsm_alarm+0x2e8>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002796:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800279a:	2001      	movs	r0, #1
 800279c:	f001 f894 	bl	80038c8 <set_timer>
 80027a0:	e000      	b.n	80027a4 <fsm_alarm+0x114>
			break;
 80027a2:	bf00      	nop
			}
		}
		button1_fsm(&ala_hour);
 80027a4:	4876      	ldr	r0, [pc, #472]	; (8002980 <fsm_alarm+0x2f0>)
 80027a6:	f000 fca5 	bl	80030f4 <button1_fsm>
		button2_fsm();
 80027aa:	f000 fb15 	bl	8002dd8 <button2_fsm>
		break;
 80027ae:	e0df      	b.n	8002970 <fsm_alarm+0x2e0>
	case DAY:
		switch (st_blinking) {
 80027b0:	4b71      	ldr	r3, [pc, #452]	; (8002978 <fsm_alarm+0x2e8>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <fsm_alarm+0x12e>
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d015      	beq.n	80027e8 <fsm_alarm+0x158>
 80027bc:	e02a      	b.n	8002814 <fsm_alarm+0x184>
		case ON:
			dis_day(ala_day, 1);
 80027be:	4b71      	ldr	r3, [pc, #452]	; (8002984 <fsm_alarm+0x2f4>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fe75 	bl	80034b4 <dis_day>
			if (!is_timer_on(1)) {
 80027ca:	2001      	movs	r0, #1
 80027cc:	f001 f8da 	bl	8003984 <is_timer_on>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d11d      	bne.n	8002812 <fsm_alarm+0x182>
				st_blinking = OFF;
 80027d6:	4b68      	ldr	r3, [pc, #416]	; (8002978 <fsm_alarm+0x2e8>)
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80027dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027e0:	2001      	movs	r0, #1
 80027e2:	f001 f871 	bl	80038c8 <set_timer>
			}
			break;
 80027e6:	e014      	b.n	8002812 <fsm_alarm+0x182>
		case OFF:
			dis_day(ala_day, 0);
 80027e8:	4b66      	ldr	r3, [pc, #408]	; (8002984 <fsm_alarm+0x2f4>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fe60 	bl	80034b4 <dis_day>
			if (!is_timer_on(1)) {
 80027f4:	2001      	movs	r0, #1
 80027f6:	f001 f8c5 	bl	8003984 <is_timer_on>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <fsm_alarm+0x184>
				st_blinking = ON;
 8002800:	4b5d      	ldr	r3, [pc, #372]	; (8002978 <fsm_alarm+0x2e8>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002806:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800280a:	2001      	movs	r0, #1
 800280c:	f001 f85c 	bl	80038c8 <set_timer>
 8002810:	e000      	b.n	8002814 <fsm_alarm+0x184>
			break;
 8002812:	bf00      	nop
			}
		}
		button1_fsm(&ala_day);
 8002814:	485b      	ldr	r0, [pc, #364]	; (8002984 <fsm_alarm+0x2f4>)
 8002816:	f000 fc6d 	bl	80030f4 <button1_fsm>
		button2_fsm();
 800281a:	f000 fadd 	bl	8002dd8 <button2_fsm>
		break;
 800281e:	e0a7      	b.n	8002970 <fsm_alarm+0x2e0>
	case DATE:
		switch (st_blinking) {
 8002820:	4b55      	ldr	r3, [pc, #340]	; (8002978 <fsm_alarm+0x2e8>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <fsm_alarm+0x19e>
 8002828:	2b01      	cmp	r3, #1
 800282a:	d015      	beq.n	8002858 <fsm_alarm+0x1c8>
 800282c:	e02a      	b.n	8002884 <fsm_alarm+0x1f4>
		case ON:
			dis_date(ala_date, 1);
 800282e:	4b56      	ldr	r3, [pc, #344]	; (8002988 <fsm_alarm+0x2f8>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fe97 	bl	8003568 <dis_date>
			if (!is_timer_on(1)) {
 800283a:	2001      	movs	r0, #1
 800283c:	f001 f8a2 	bl	8003984 <is_timer_on>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d11d      	bne.n	8002882 <fsm_alarm+0x1f2>
				st_blinking = OFF;
 8002846:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <fsm_alarm+0x2e8>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800284c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002850:	2001      	movs	r0, #1
 8002852:	f001 f839 	bl	80038c8 <set_timer>
			}
			break;
 8002856:	e014      	b.n	8002882 <fsm_alarm+0x1f2>
		case OFF:
			dis_date(ala_date, 0);
 8002858:	4b4b      	ldr	r3, [pc, #300]	; (8002988 <fsm_alarm+0x2f8>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f000 fe82 	bl	8003568 <dis_date>
			if (!is_timer_on(1)) {
 8002864:	2001      	movs	r0, #1
 8002866:	f001 f88d 	bl	8003984 <is_timer_on>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <fsm_alarm+0x1f4>
				st_blinking = ON;
 8002870:	4b41      	ldr	r3, [pc, #260]	; (8002978 <fsm_alarm+0x2e8>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002876:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800287a:	2001      	movs	r0, #1
 800287c:	f001 f824 	bl	80038c8 <set_timer>
 8002880:	e000      	b.n	8002884 <fsm_alarm+0x1f4>
			break;
 8002882:	bf00      	nop
			}
		}
		button1_fsm(&ala_date);
 8002884:	4840      	ldr	r0, [pc, #256]	; (8002988 <fsm_alarm+0x2f8>)
 8002886:	f000 fc35 	bl	80030f4 <button1_fsm>
		button2_fsm();
 800288a:	f000 faa5 	bl	8002dd8 <button2_fsm>
		break;
 800288e:	e06f      	b.n	8002970 <fsm_alarm+0x2e0>
	case MONTH:
		switch (st_blinking) {
 8002890:	4b39      	ldr	r3, [pc, #228]	; (8002978 <fsm_alarm+0x2e8>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <fsm_alarm+0x20e>
 8002898:	2b01      	cmp	r3, #1
 800289a:	d015      	beq.n	80028c8 <fsm_alarm+0x238>
 800289c:	e02a      	b.n	80028f4 <fsm_alarm+0x264>
		case ON:
			dis_month(ala_mon, 1);
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <fsm_alarm+0x2fc>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2101      	movs	r1, #1
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fe9d 	bl	80035e4 <dis_month>
			if (!is_timer_on(1)) {
 80028aa:	2001      	movs	r0, #1
 80028ac:	f001 f86a 	bl	8003984 <is_timer_on>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d11d      	bne.n	80028f2 <fsm_alarm+0x262>
				st_blinking = OFF;
 80028b6:	4b30      	ldr	r3, [pc, #192]	; (8002978 <fsm_alarm+0x2e8>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80028bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028c0:	2001      	movs	r0, #1
 80028c2:	f001 f801 	bl	80038c8 <set_timer>
			}
			break;
 80028c6:	e014      	b.n	80028f2 <fsm_alarm+0x262>
		case OFF:
			dis_month(ala_mon, 0);
 80028c8:	4b30      	ldr	r3, [pc, #192]	; (800298c <fsm_alarm+0x2fc>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fe88 	bl	80035e4 <dis_month>
			if (!is_timer_on(1)) {
 80028d4:	2001      	movs	r0, #1
 80028d6:	f001 f855 	bl	8003984 <is_timer_on>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <fsm_alarm+0x264>
				st_blinking = ON;
 80028e0:	4b25      	ldr	r3, [pc, #148]	; (8002978 <fsm_alarm+0x2e8>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80028e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028ea:	2001      	movs	r0, #1
 80028ec:	f000 ffec 	bl	80038c8 <set_timer>
 80028f0:	e000      	b.n	80028f4 <fsm_alarm+0x264>
			break;
 80028f2:	bf00      	nop
			}
		}
		button1_fsm(&ala_mon);
 80028f4:	4825      	ldr	r0, [pc, #148]	; (800298c <fsm_alarm+0x2fc>)
 80028f6:	f000 fbfd 	bl	80030f4 <button1_fsm>
		button2_fsm();
 80028fa:	f000 fa6d 	bl	8002dd8 <button2_fsm>
		break;
 80028fe:	e037      	b.n	8002970 <fsm_alarm+0x2e0>
	case YEAR:
		switch (st_blinking) {
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <fsm_alarm+0x2e8>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <fsm_alarm+0x27e>
 8002908:	2b01      	cmp	r3, #1
 800290a:	d015      	beq.n	8002938 <fsm_alarm+0x2a8>
 800290c:	e02a      	b.n	8002964 <fsm_alarm+0x2d4>
		case ON:
			dis_year(ala_year, 1);
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <fsm_alarm+0x300>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2101      	movs	r1, #1
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fea3 	bl	8003660 <dis_year>
			if (!is_timer_on(1)) {
 800291a:	2001      	movs	r0, #1
 800291c:	f001 f832 	bl	8003984 <is_timer_on>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d11d      	bne.n	8002962 <fsm_alarm+0x2d2>
				st_blinking = OFF;
 8002926:	4b14      	ldr	r3, [pc, #80]	; (8002978 <fsm_alarm+0x2e8>)
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800292c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002930:	2001      	movs	r0, #1
 8002932:	f000 ffc9 	bl	80038c8 <set_timer>
			}
			break;
 8002936:	e014      	b.n	8002962 <fsm_alarm+0x2d2>
		case OFF:
			dis_year(ala_year, 0);
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <fsm_alarm+0x300>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fe8e 	bl	8003660 <dis_year>
			if (!is_timer_on(1)) {
 8002944:	2001      	movs	r0, #1
 8002946:	f001 f81d 	bl	8003984 <is_timer_on>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <fsm_alarm+0x2d4>
				st_blinking = ON;
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <fsm_alarm+0x2e8>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002956:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800295a:	2001      	movs	r0, #1
 800295c:	f000 ffb4 	bl	80038c8 <set_timer>
 8002960:	e000      	b.n	8002964 <fsm_alarm+0x2d4>
			break;
 8002962:	bf00      	nop
			}
		}
		button1_fsm(&ala_year);
 8002964:	480a      	ldr	r0, [pc, #40]	; (8002990 <fsm_alarm+0x300>)
 8002966:	f000 fbc5 	bl	80030f4 <button1_fsm>
		button2_fsm();
 800296a:	f000 fa35 	bl	8002dd8 <button2_fsm>
	}
}
 800296e:	e7ff      	b.n	8002970 <fsm_alarm+0x2e0>
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}
 8002974:	200000c5 	.word	0x200000c5
 8002978:	2000029b 	.word	0x2000029b
 800297c:	2000001f 	.word	0x2000001f
 8002980:	20000020 	.word	0x20000020
 8002984:	20000021 	.word	0x20000021
 8002988:	20000022 	.word	0x20000022
 800298c:	20000023 	.word	0x20000023
 8002990:	20000024 	.word	0x20000024

08002994 <fsm_changing>:
/*
 * @brief:	blinking number, changing buffer of clock
 * @para:	none
 * @retval:	none
 * */
void fsm_changing(void) {
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
	switch (st_changing) {
 8002998:	4bc0      	ldr	r3, [pc, #768]	; (8002c9c <fsm_changing+0x308>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b06      	cmp	r3, #6
 800299e:	f200 81ab 	bhi.w	8002cf8 <fsm_changing+0x364>
 80029a2:	a201      	add	r2, pc, #4	; (adr r2, 80029a8 <fsm_changing+0x14>)
 80029a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a8:	080029c5 	.word	0x080029c5
 80029ac:	08002a35 	.word	0x08002a35
 80029b0:	08002aa5 	.word	0x08002aa5
 80029b4:	08002b15 	.word	0x08002b15
 80029b8:	08002b85 	.word	0x08002b85
 80029bc:	08002bf5 	.word	0x08002bf5
 80029c0:	08002c65 	.word	0x08002c65
	case SECOND:
		//blinking number
		switch (st_blinking) {
 80029c4:	4bb6      	ldr	r3, [pc, #728]	; (8002ca0 <fsm_changing+0x30c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <fsm_changing+0x3e>
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d015      	beq.n	80029fc <fsm_changing+0x68>
 80029d0:	e02a      	b.n	8002a28 <fsm_changing+0x94>
		case ON:
			dis_sec(buf_sec, 1);
 80029d2:	4bb4      	ldr	r3, [pc, #720]	; (8002ca4 <fsm_changing+0x310>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2101      	movs	r1, #1
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fcb1 	bl	8003340 <dis_sec>
			if (!is_timer_on(1)) {
 80029de:	2001      	movs	r0, #1
 80029e0:	f000 ffd0 	bl	8003984 <is_timer_on>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d11d      	bne.n	8002a26 <fsm_changing+0x92>
				st_blinking = OFF;
 80029ea:	4bad      	ldr	r3, [pc, #692]	; (8002ca0 <fsm_changing+0x30c>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80029f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029f4:	2001      	movs	r0, #1
 80029f6:	f000 ff67 	bl	80038c8 <set_timer>
			}
			break;
 80029fa:	e014      	b.n	8002a26 <fsm_changing+0x92>
		case OFF:
			dis_sec(buf_sec, 0);
 80029fc:	4ba9      	ldr	r3, [pc, #676]	; (8002ca4 <fsm_changing+0x310>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fc9c 	bl	8003340 <dis_sec>
			if (!is_timer_on(1)) {
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f000 ffbb 	bl	8003984 <is_timer_on>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d109      	bne.n	8002a28 <fsm_changing+0x94>
				st_blinking = ON;
 8002a14:	4ba2      	ldr	r3, [pc, #648]	; (8002ca0 <fsm_changing+0x30c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002a1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f000 ff52 	bl	80038c8 <set_timer>
 8002a24:	e000      	b.n	8002a28 <fsm_changing+0x94>
			break;
 8002a26:	bf00      	nop
			}
		}
		button1_fsm(&buf_sec);
 8002a28:	489e      	ldr	r0, [pc, #632]	; (8002ca4 <fsm_changing+0x310>)
 8002a2a:	f000 fb63 	bl	80030f4 <button1_fsm>
		button2_fsm();
 8002a2e:	f000 f9d3 	bl	8002dd8 <button2_fsm>
		break;
 8002a32:	e161      	b.n	8002cf8 <fsm_changing+0x364>
	case MINUTE:
		switch (st_blinking) {
 8002a34:	4b9a      	ldr	r3, [pc, #616]	; (8002ca0 <fsm_changing+0x30c>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <fsm_changing+0xae>
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d015      	beq.n	8002a6c <fsm_changing+0xd8>
 8002a40:	e02a      	b.n	8002a98 <fsm_changing+0x104>
		case ON:
			dis_min(buf_min, 1);
 8002a42:	4b99      	ldr	r3, [pc, #612]	; (8002ca8 <fsm_changing+0x314>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2101      	movs	r1, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fcb7 	bl	80033bc <dis_min>
			if (!is_timer_on(1)) {
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f000 ff98 	bl	8003984 <is_timer_on>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d11d      	bne.n	8002a96 <fsm_changing+0x102>
				st_blinking = OFF;
 8002a5a:	4b91      	ldr	r3, [pc, #580]	; (8002ca0 <fsm_changing+0x30c>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002a60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a64:	2001      	movs	r0, #1
 8002a66:	f000 ff2f 	bl	80038c8 <set_timer>
			}
			break;
 8002a6a:	e014      	b.n	8002a96 <fsm_changing+0x102>
		case OFF:
			dis_min(buf_min, 0);
 8002a6c:	4b8e      	ldr	r3, [pc, #568]	; (8002ca8 <fsm_changing+0x314>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fca2 	bl	80033bc <dis_min>
			if (!is_timer_on(1)) {
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f000 ff83 	bl	8003984 <is_timer_on>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <fsm_changing+0x104>
				st_blinking = ON;
 8002a84:	4b86      	ldr	r3, [pc, #536]	; (8002ca0 <fsm_changing+0x30c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002a8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f000 ff1a 	bl	80038c8 <set_timer>
 8002a94:	e000      	b.n	8002a98 <fsm_changing+0x104>
			break;
 8002a96:	bf00      	nop
			}
		}
		button1_fsm(&buf_min);
 8002a98:	4883      	ldr	r0, [pc, #524]	; (8002ca8 <fsm_changing+0x314>)
 8002a9a:	f000 fb2b 	bl	80030f4 <button1_fsm>
		button2_fsm();
 8002a9e:	f000 f99b 	bl	8002dd8 <button2_fsm>
		break;
 8002aa2:	e129      	b.n	8002cf8 <fsm_changing+0x364>
	case HOUR:
		switch (st_blinking) {
 8002aa4:	4b7e      	ldr	r3, [pc, #504]	; (8002ca0 <fsm_changing+0x30c>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <fsm_changing+0x11e>
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d015      	beq.n	8002adc <fsm_changing+0x148>
 8002ab0:	e02a      	b.n	8002b08 <fsm_changing+0x174>
		case ON:
			dis_hour(buf_hour, 1);
 8002ab2:	4b7e      	ldr	r3, [pc, #504]	; (8002cac <fsm_changing+0x318>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fcbd 	bl	8003438 <dis_hour>
			if (!is_timer_on(1)) {
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f000 ff60 	bl	8003984 <is_timer_on>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d11d      	bne.n	8002b06 <fsm_changing+0x172>
				st_blinking = OFF;
 8002aca:	4b75      	ldr	r3, [pc, #468]	; (8002ca0 <fsm_changing+0x30c>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002ad0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	f000 fef7 	bl	80038c8 <set_timer>
			}
			break;
 8002ada:	e014      	b.n	8002b06 <fsm_changing+0x172>
		case OFF:
			dis_hour(buf_hour, 0);
 8002adc:	4b73      	ldr	r3, [pc, #460]	; (8002cac <fsm_changing+0x318>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fca8 	bl	8003438 <dis_hour>
			if (!is_timer_on(1)) {
 8002ae8:	2001      	movs	r0, #1
 8002aea:	f000 ff4b 	bl	8003984 <is_timer_on>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <fsm_changing+0x174>
				st_blinking = ON;
 8002af4:	4b6a      	ldr	r3, [pc, #424]	; (8002ca0 <fsm_changing+0x30c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002afa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002afe:	2001      	movs	r0, #1
 8002b00:	f000 fee2 	bl	80038c8 <set_timer>
 8002b04:	e000      	b.n	8002b08 <fsm_changing+0x174>
			break;
 8002b06:	bf00      	nop
			}
		}
		button1_fsm(&buf_hour);
 8002b08:	4868      	ldr	r0, [pc, #416]	; (8002cac <fsm_changing+0x318>)
 8002b0a:	f000 faf3 	bl	80030f4 <button1_fsm>
		button2_fsm();
 8002b0e:	f000 f963 	bl	8002dd8 <button2_fsm>
		break;
 8002b12:	e0f1      	b.n	8002cf8 <fsm_changing+0x364>
	case DAY:
		switch (st_blinking) {
 8002b14:	4b62      	ldr	r3, [pc, #392]	; (8002ca0 <fsm_changing+0x30c>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <fsm_changing+0x18e>
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d015      	beq.n	8002b4c <fsm_changing+0x1b8>
 8002b20:	e02a      	b.n	8002b78 <fsm_changing+0x1e4>
		case ON:
			dis_day(buf_day, 1);
 8002b22:	4b63      	ldr	r3, [pc, #396]	; (8002cb0 <fsm_changing+0x31c>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2101      	movs	r1, #1
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fcc3 	bl	80034b4 <dis_day>
			if (!is_timer_on(1)) {
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f000 ff28 	bl	8003984 <is_timer_on>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d11d      	bne.n	8002b76 <fsm_changing+0x1e2>
				st_blinking = OFF;
 8002b3a:	4b59      	ldr	r3, [pc, #356]	; (8002ca0 <fsm_changing+0x30c>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002b40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b44:	2001      	movs	r0, #1
 8002b46:	f000 febf 	bl	80038c8 <set_timer>
			}
			break;
 8002b4a:	e014      	b.n	8002b76 <fsm_changing+0x1e2>
		case OFF:
			dis_day(buf_day, 0);
 8002b4c:	4b58      	ldr	r3, [pc, #352]	; (8002cb0 <fsm_changing+0x31c>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fcae 	bl	80034b4 <dis_day>
			if (!is_timer_on(1)) {
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f000 ff13 	bl	8003984 <is_timer_on>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <fsm_changing+0x1e4>
				st_blinking = ON;
 8002b64:	4b4e      	ldr	r3, [pc, #312]	; (8002ca0 <fsm_changing+0x30c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002b6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b6e:	2001      	movs	r0, #1
 8002b70:	f000 feaa 	bl	80038c8 <set_timer>
 8002b74:	e000      	b.n	8002b78 <fsm_changing+0x1e4>
			break;
 8002b76:	bf00      	nop
			}
		}
		button1_fsm(&buf_day);
 8002b78:	484d      	ldr	r0, [pc, #308]	; (8002cb0 <fsm_changing+0x31c>)
 8002b7a:	f000 fabb 	bl	80030f4 <button1_fsm>
		button2_fsm();
 8002b7e:	f000 f92b 	bl	8002dd8 <button2_fsm>
		break;
 8002b82:	e0b9      	b.n	8002cf8 <fsm_changing+0x364>
	case DATE:
		switch (st_blinking) {
 8002b84:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <fsm_changing+0x30c>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <fsm_changing+0x1fe>
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d015      	beq.n	8002bbc <fsm_changing+0x228>
 8002b90:	e02a      	b.n	8002be8 <fsm_changing+0x254>
		case ON:
			dis_date(buf_date, 1);
 8002b92:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <fsm_changing+0x320>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2101      	movs	r1, #1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fce5 	bl	8003568 <dis_date>
			if (!is_timer_on(1)) {
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f000 fef0 	bl	8003984 <is_timer_on>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11d      	bne.n	8002be6 <fsm_changing+0x252>
				st_blinking = OFF;
 8002baa:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <fsm_changing+0x30c>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002bb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f000 fe87 	bl	80038c8 <set_timer>
			}
			break;
 8002bba:	e014      	b.n	8002be6 <fsm_changing+0x252>
		case OFF:
			dis_date(buf_date, 0);
 8002bbc:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <fsm_changing+0x320>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fcd0 	bl	8003568 <dis_date>
			if (!is_timer_on(1)) {
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f000 fedb 	bl	8003984 <is_timer_on>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <fsm_changing+0x254>
				st_blinking = ON;
 8002bd4:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <fsm_changing+0x30c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002bda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bde:	2001      	movs	r0, #1
 8002be0:	f000 fe72 	bl	80038c8 <set_timer>
 8002be4:	e000      	b.n	8002be8 <fsm_changing+0x254>
			break;
 8002be6:	bf00      	nop
			}
		}
		button1_fsm(&buf_date);
 8002be8:	4832      	ldr	r0, [pc, #200]	; (8002cb4 <fsm_changing+0x320>)
 8002bea:	f000 fa83 	bl	80030f4 <button1_fsm>
		button2_fsm();
 8002bee:	f000 f8f3 	bl	8002dd8 <button2_fsm>
		break;
 8002bf2:	e081      	b.n	8002cf8 <fsm_changing+0x364>
	case MONTH:
		switch (st_blinking) {
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <fsm_changing+0x30c>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <fsm_changing+0x26e>
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d015      	beq.n	8002c2c <fsm_changing+0x298>
 8002c00:	e02a      	b.n	8002c58 <fsm_changing+0x2c4>
		case ON:
			dis_month(buf_mon, 1);
 8002c02:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <fsm_changing+0x324>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2101      	movs	r1, #1
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fceb 	bl	80035e4 <dis_month>
			if (!is_timer_on(1)) {
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f000 feb8 	bl	8003984 <is_timer_on>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d11d      	bne.n	8002c56 <fsm_changing+0x2c2>
				st_blinking = OFF;
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <fsm_changing+0x30c>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002c20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c24:	2001      	movs	r0, #1
 8002c26:	f000 fe4f 	bl	80038c8 <set_timer>
			}
			break;
 8002c2a:	e014      	b.n	8002c56 <fsm_changing+0x2c2>
		case OFF:
			dis_month(buf_mon, 0);
 8002c2c:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <fsm_changing+0x324>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fcd6 	bl	80035e4 <dis_month>
			if (!is_timer_on(1)) {
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f000 fea3 	bl	8003984 <is_timer_on>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <fsm_changing+0x2c4>
				st_blinking = ON;
 8002c44:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <fsm_changing+0x30c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002c4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f000 fe3a 	bl	80038c8 <set_timer>
 8002c54:	e000      	b.n	8002c58 <fsm_changing+0x2c4>
			break;
 8002c56:	bf00      	nop
			}
		}
		button1_fsm(&buf_mon);
 8002c58:	4817      	ldr	r0, [pc, #92]	; (8002cb8 <fsm_changing+0x324>)
 8002c5a:	f000 fa4b 	bl	80030f4 <button1_fsm>
		button2_fsm();
 8002c5e:	f000 f8bb 	bl	8002dd8 <button2_fsm>
		break;
 8002c62:	e049      	b.n	8002cf8 <fsm_changing+0x364>
	case YEAR:
		switch (st_blinking) {
 8002c64:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <fsm_changing+0x30c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <fsm_changing+0x2de>
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d027      	beq.n	8002cc0 <fsm_changing+0x32c>
 8002c70:	e03c      	b.n	8002cec <fsm_changing+0x358>
		case ON:
			dis_year(buf_year, 1);
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <fsm_changing+0x328>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2101      	movs	r1, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fcf1 	bl	8003660 <dis_year>
			if (!is_timer_on(1)) {
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f000 fe80 	bl	8003984 <is_timer_on>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d12f      	bne.n	8002cea <fsm_changing+0x356>
				st_blinking = OFF;
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <fsm_changing+0x30c>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002c90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c94:	2001      	movs	r0, #1
 8002c96:	f000 fe17 	bl	80038c8 <set_timer>
			}
			break;
 8002c9a:	e026      	b.n	8002cea <fsm_changing+0x356>
 8002c9c:	200000c5 	.word	0x200000c5
 8002ca0:	2000029b 	.word	0x2000029b
 8002ca4:	20000018 	.word	0x20000018
 8002ca8:	20000019 	.word	0x20000019
 8002cac:	2000001a 	.word	0x2000001a
 8002cb0:	2000001b 	.word	0x2000001b
 8002cb4:	2000001c 	.word	0x2000001c
 8002cb8:	2000001d 	.word	0x2000001d
 8002cbc:	2000001e 	.word	0x2000001e
		case OFF:
			dis_year(buf_year, 0);
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <fsm_changing+0x368>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fcca 	bl	8003660 <dis_year>
			if (!is_timer_on(1)) {
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f000 fe59 	bl	8003984 <is_timer_on>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d109      	bne.n	8002cec <fsm_changing+0x358>
				st_blinking = ON;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <fsm_changing+0x36c>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002cde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	f000 fdf0 	bl	80038c8 <set_timer>
 8002ce8:	e000      	b.n	8002cec <fsm_changing+0x358>
			break;
 8002cea:	bf00      	nop
			}
		}
		button1_fsm(&buf_year);
 8002cec:	4803      	ldr	r0, [pc, #12]	; (8002cfc <fsm_changing+0x368>)
 8002cee:	f000 fa01 	bl	80030f4 <button1_fsm>
		button2_fsm();
 8002cf2:	f000 f871 	bl	8002dd8 <button2_fsm>
	}
}
 8002cf6:	e7ff      	b.n	8002cf8 <fsm_changing+0x364>
 8002cf8:	bf00      	nop
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	2000001e 	.word	0x2000001e
 8002d00:	2000029b 	.word	0x2000029b

08002d04 <reset_str>:
/*
 * @brief:	reset the string when transitioning mode
 * @para:	none
 * @retval:	none
 * */
void reset_str(void){
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af04      	add	r7, sp, #16
	lcd_ShowStr(20, 30, "MODE: CHANGE TIME", BLACK, BLACK, 24, 0);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9302      	str	r3, [sp, #8]
 8002d0e:	2318      	movs	r3, #24
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	2300      	movs	r3, #0
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	2300      	movs	r3, #0
 8002d18:	4a03      	ldr	r2, [pc, #12]	; (8002d28 <reset_str+0x24>)
 8002d1a:	211e      	movs	r1, #30
 8002d1c:	2014      	movs	r0, #20
 8002d1e:	f7ff fa71 	bl	8002204 <lcd_ShowStr>
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	0800ab14 	.word	0x0800ab14

08002d2c <button0_fsm>:
 * @brief:	mode button fsm - 2 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button0_fsm(void) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	switch (button_st[0]) {
 8002d30:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <button0_fsm+0xa0>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <button0_fsm+0x12>
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d034      	beq.n	8002da6 <button0_fsm+0x7a>
 8002d3c:	e03f      	b.n	8002dbe <button0_fsm+0x92>
	case release:
		if (is_button_pressed(0) == 1) {
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7fe f9e6 	bl	8001110 <is_button_pressed>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d125      	bne.n	8002d96 <button0_fsm+0x6a>
			// to do
			switch (st_clock) {
 8002d4a:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <button0_fsm+0xa4>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d018      	beq.n	8002d84 <button0_fsm+0x58>
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	dc19      	bgt.n	8002d8a <button0_fsm+0x5e>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <button0_fsm+0x34>
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d009      	beq.n	8002d72 <button0_fsm+0x46>
 8002d5e:	e014      	b.n	8002d8a <button0_fsm+0x5e>
			case DISPLAY:
				display_all_clock();
 8002d60:	f000 fa6a 	bl	8003238 <display_all_clock>
				st_clock = CHANGE_TIME;
 8002d64:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <button0_fsm+0xa4>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
				st_changing = SECOND;
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <button0_fsm+0xa8>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
				break;
 8002d70:	e00b      	b.n	8002d8a <button0_fsm+0x5e>
			case CHANGE_TIME:
				display_all_alarm();
 8002d72:	f000 faa4 	bl	80032be <display_all_alarm>
				st_changing = SECOND;
 8002d76:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <button0_fsm+0xa8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
				st_clock = ALARM;
 8002d7c:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <button0_fsm+0xa4>)
 8002d7e:	2202      	movs	r2, #2
 8002d80:	701a      	strb	r2, [r3, #0]
				break;
 8002d82:	e002      	b.n	8002d8a <button0_fsm+0x5e>
			case ALARM:
				st_clock = DISPLAY;
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <button0_fsm+0xa4>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
			}
			reset_str();
 8002d8a:	f7ff ffbb 	bl	8002d04 <reset_str>
			button_st[0] = pressed;
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <button0_fsm+0xa0>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
		} else if (is_button_pressed(0) == ERROR)
			return 0;
		break;
 8002d94:	e015      	b.n	8002dc2 <button0_fsm+0x96>
		} else if (is_button_pressed(0) == ERROR)
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fe f9ba 	bl	8001110 <is_button_pressed>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d10f      	bne.n	8002dc2 <button0_fsm+0x96>
			return 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e00f      	b.n	8002dc6 <button0_fsm+0x9a>
	case pressed:
		if (!is_button_pressed(0)) {
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7fe f9b2 	bl	8001110 <is_button_pressed>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d103      	bne.n	8002dba <button0_fsm+0x8e>
			button_st[0] = release;
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <button0_fsm+0xa0>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
		} else {
			return 0;
		}
		break;
 8002db8:	e004      	b.n	8002dc4 <button0_fsm+0x98>
			return 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e003      	b.n	8002dc6 <button0_fsm+0x9a>
	default:
		return 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e001      	b.n	8002dc6 <button0_fsm+0x9a>
		break;
 8002dc2:	bf00      	nop
	}
	return 1;
 8002dc4:	2301      	movs	r3, #1
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000298 	.word	0x20000298
 8002dd0:	200000c4 	.word	0x200000c4
 8002dd4:	200000c5 	.word	0x200000c5

08002dd8 <button2_fsm>:
 * @brief:	set value button fsm - 2 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button2_fsm(void) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
	switch (button_st[2]) {
 8002ddc:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <button2_fsm+0x184>)
 8002dde:	789b      	ldrb	r3, [r3, #2]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <button2_fsm+0x14>
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	f000 80a7 	beq.w	8002f38 <button2_fsm+0x160>
 8002dea:	e0b1      	b.n	8002f50 <button2_fsm+0x178>
	case release:
		if (is_button_pressed(12) == 1) {
 8002dec:	200c      	movs	r0, #12
 8002dee:	f7fe f98f 	bl	8001110 <is_button_pressed>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	f040 8097 	bne.w	8002f28 <button2_fsm+0x150>
			// to do
			if (st_clock == CHANGE_TIME) {
 8002dfa:	4b59      	ldr	r3, [pc, #356]	; (8002f60 <button2_fsm+0x188>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d15d      	bne.n	8002ebe <button2_fsm+0xe6>
				switch (st_changing) {
 8002e02:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <button2_fsm+0x18c>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	d856      	bhi.n	8002eb8 <button2_fsm+0xe0>
 8002e0a:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <button2_fsm+0x38>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002e2d 	.word	0x08002e2d
 8002e14:	08002e41 	.word	0x08002e41
 8002e18:	08002e55 	.word	0x08002e55
 8002e1c:	08002e69 	.word	0x08002e69
 8002e20:	08002ea5 	.word	0x08002ea5
 8002e24:	08002e91 	.word	0x08002e91
 8002e28:	08002e7d 	.word	0x08002e7d
				case SECOND:

					ds3231_Write(ADDRESS_SEC, buf_sec);
 8002e2c:	4b4e      	ldr	r3, [pc, #312]	; (8002f68 <button2_fsm+0x190>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	4619      	mov	r1, r3
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7fe f9e6 	bl	8001204 <ds3231_Write>
					st_changing = MINUTE;
 8002e38:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <button2_fsm+0x18c>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
					break;
 8002e3e:	e03b      	b.n	8002eb8 <button2_fsm+0xe0>
				case MINUTE:
					ds3231_Write(ADDRESS_MIN, buf_min);
 8002e40:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <button2_fsm+0x194>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	4619      	mov	r1, r3
 8002e46:	2001      	movs	r0, #1
 8002e48:	f7fe f9dc 	bl	8001204 <ds3231_Write>
					st_changing = HOUR;
 8002e4c:	4b45      	ldr	r3, [pc, #276]	; (8002f64 <button2_fsm+0x18c>)
 8002e4e:	2202      	movs	r2, #2
 8002e50:	701a      	strb	r2, [r3, #0]
					break;
 8002e52:	e031      	b.n	8002eb8 <button2_fsm+0xe0>
				case HOUR:
					ds3231_Write(ADDRESS_HOUR, buf_hour);
 8002e54:	4b46      	ldr	r3, [pc, #280]	; (8002f70 <button2_fsm+0x198>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	2002      	movs	r0, #2
 8002e5c:	f7fe f9d2 	bl	8001204 <ds3231_Write>
					st_changing = DAY;
 8002e60:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <button2_fsm+0x18c>)
 8002e62:	2203      	movs	r2, #3
 8002e64:	701a      	strb	r2, [r3, #0]
					break;
 8002e66:	e027      	b.n	8002eb8 <button2_fsm+0xe0>
				case DAY:
					ds3231_Write(ADDRESS_DAY, buf_day);
 8002e68:	4b42      	ldr	r3, [pc, #264]	; (8002f74 <button2_fsm+0x19c>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	2003      	movs	r0, #3
 8002e70:	f7fe f9c8 	bl	8001204 <ds3231_Write>
					st_changing = YEAR;
 8002e74:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <button2_fsm+0x18c>)
 8002e76:	2206      	movs	r2, #6
 8002e78:	701a      	strb	r2, [r3, #0]
					break;
 8002e7a:	e01d      	b.n	8002eb8 <button2_fsm+0xe0>
				case YEAR:
					ds3231_Write(ADDRESS_YEAR, buf_year);
 8002e7c:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <button2_fsm+0x1a0>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	4619      	mov	r1, r3
 8002e82:	2006      	movs	r0, #6
 8002e84:	f7fe f9be 	bl	8001204 <ds3231_Write>
					st_changing = MONTH;
 8002e88:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <button2_fsm+0x18c>)
 8002e8a:	2205      	movs	r2, #5
 8002e8c:	701a      	strb	r2, [r3, #0]
					break;
 8002e8e:	e013      	b.n	8002eb8 <button2_fsm+0xe0>
				case MONTH:
					ds3231_Write(ADDRESS_MONTH, buf_mon);
 8002e90:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <button2_fsm+0x1a4>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4619      	mov	r1, r3
 8002e96:	2005      	movs	r0, #5
 8002e98:	f7fe f9b4 	bl	8001204 <ds3231_Write>
					st_changing = DATE;
 8002e9c:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <button2_fsm+0x18c>)
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	701a      	strb	r2, [r3, #0]
					break;
 8002ea2:	e009      	b.n	8002eb8 <button2_fsm+0xe0>
				case DATE:
					ds3231_Write(ADDRESS_DATE, buf_date);
 8002ea4:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <button2_fsm+0x1a8>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	2004      	movs	r0, #4
 8002eac:	f7fe f9aa 	bl	8001204 <ds3231_Write>
					st_changing = SECOND;
 8002eb0:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <button2_fsm+0x18c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
					break;
 8002eb6:	bf00      	nop
				}
				display_all_clock();
 8002eb8:	f000 f9be 	bl	8003238 <display_all_clock>
 8002ebc:	e030      	b.n	8002f20 <button2_fsm+0x148>
			} else {
				switch (st_changing) {
 8002ebe:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <button2_fsm+0x18c>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d82c      	bhi.n	8002f20 <button2_fsm+0x148>
 8002ec6:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <button2_fsm+0xf4>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002ee9 	.word	0x08002ee9
 8002ed0:	08002ef1 	.word	0x08002ef1
 8002ed4:	08002ef9 	.word	0x08002ef9
 8002ed8:	08002f01 	.word	0x08002f01
 8002edc:	08002f19 	.word	0x08002f19
 8002ee0:	08002f11 	.word	0x08002f11
 8002ee4:	08002f09 	.word	0x08002f09
				case SECOND:
					st_changing = MINUTE;
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <button2_fsm+0x18c>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
					break;
 8002eee:	e017      	b.n	8002f20 <button2_fsm+0x148>
				case MINUTE:
					st_changing = HOUR;
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <button2_fsm+0x18c>)
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	701a      	strb	r2, [r3, #0]
					break;
 8002ef6:	e013      	b.n	8002f20 <button2_fsm+0x148>
				case HOUR:
					st_changing = DAY;
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <button2_fsm+0x18c>)
 8002efa:	2203      	movs	r2, #3
 8002efc:	701a      	strb	r2, [r3, #0]
					break;
 8002efe:	e00f      	b.n	8002f20 <button2_fsm+0x148>
				case DAY:
					st_changing = YEAR;
 8002f00:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <button2_fsm+0x18c>)
 8002f02:	2206      	movs	r2, #6
 8002f04:	701a      	strb	r2, [r3, #0]
					break;
 8002f06:	e00b      	b.n	8002f20 <button2_fsm+0x148>
				case YEAR:
					st_changing = MONTH;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <button2_fsm+0x18c>)
 8002f0a:	2205      	movs	r2, #5
 8002f0c:	701a      	strb	r2, [r3, #0]
					break;
 8002f0e:	e007      	b.n	8002f20 <button2_fsm+0x148>
				case MONTH:
					st_changing = DATE;
 8002f10:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <button2_fsm+0x18c>)
 8002f12:	2204      	movs	r2, #4
 8002f14:	701a      	strb	r2, [r3, #0]
					break;
 8002f16:	e003      	b.n	8002f20 <button2_fsm+0x148>
				case DATE:
					st_changing = SECOND;
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <button2_fsm+0x18c>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
					break;
 8002f1e:	bf00      	nop
				}
			}
			button_st[2] = pressed;
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <button2_fsm+0x184>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	709a      	strb	r2, [r3, #2]
		} else if (is_button_pressed(12) == ERROR)
			return 0;
		break;
 8002f26:	e015      	b.n	8002f54 <button2_fsm+0x17c>
		} else if (is_button_pressed(12) == ERROR)
 8002f28:	200c      	movs	r0, #12
 8002f2a:	f7fe f8f1 	bl	8001110 <is_button_pressed>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d10f      	bne.n	8002f54 <button2_fsm+0x17c>
			return 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e00f      	b.n	8002f58 <button2_fsm+0x180>
	case pressed:
		if (!is_button_pressed(12)) {
 8002f38:	200c      	movs	r0, #12
 8002f3a:	f7fe f8e9 	bl	8001110 <is_button_pressed>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d103      	bne.n	8002f4c <button2_fsm+0x174>
			button_st[2] = release;
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <button2_fsm+0x184>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	709a      	strb	r2, [r3, #2]
		} else {
			return 0;
		}
		break;
 8002f4a:	e004      	b.n	8002f56 <button2_fsm+0x17e>
			return 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e003      	b.n	8002f58 <button2_fsm+0x180>
	default:
		return 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e001      	b.n	8002f58 <button2_fsm+0x180>
		break;
 8002f54:	bf00      	nop
	}
	return 1;
 8002f56:	2301      	movs	r3, #1
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000298 	.word	0x20000298
 8002f60:	200000c4 	.word	0x200000c4
 8002f64:	200000c5 	.word	0x200000c5
 8002f68:	20000018 	.word	0x20000018
 8002f6c:	20000019 	.word	0x20000019
 8002f70:	2000001a 	.word	0x2000001a
 8002f74:	2000001b 	.word	0x2000001b
 8002f78:	2000001e 	.word	0x2000001e
 8002f7c:	2000001d 	.word	0x2000001d
 8002f80:	2000001c 	.word	0x2000001c

08002f84 <increase_value>:
/*
 * @brief:	increase the value of number based on conditions
 * @para:	number - the value need to be risen
 * @retval:	none
 * */
void increase_value(uint8_t *number) {
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	switch (st_changing) {
 8002f8c:	4b56      	ldr	r3, [pc, #344]	; (80030e8 <increase_value+0x164>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b06      	cmp	r3, #6
 8002f92:	f200 80a2 	bhi.w	80030da <increase_value+0x156>
 8002f96:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <increase_value+0x18>)
 8002f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9c:	08002fb9 	.word	0x08002fb9
 8002fa0:	08002fb9 	.word	0x08002fb9
 8002fa4:	08002fd5 	.word	0x08002fd5
 8002fa8:	08002ff1 	.word	0x08002ff1
 8002fac:	08003045 	.word	0x08003045
 8002fb0:	08003029 	.word	0x08003029
 8002fb4:	0800300d 	.word	0x0800300d
	case SECOND:
	case MINUTE:
		(*number)++;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	701a      	strb	r2, [r3, #0]
		if (*number > 59)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b3b      	cmp	r3, #59	; 0x3b
 8002fca:	d97d      	bls.n	80030c8 <increase_value+0x144>
			*number = 0;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
		break;
 8002fd2:	e079      	b.n	80030c8 <increase_value+0x144>
	case HOUR:
		(*number)++;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	701a      	strb	r2, [r3, #0]
		if (*number > 23)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b17      	cmp	r3, #23
 8002fe6:	d971      	bls.n	80030cc <increase_value+0x148>
			*number = 0;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
		break;
 8002fee:	e06d      	b.n	80030cc <increase_value+0x148>
	case DAY:
		(*number)++;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	701a      	strb	r2, [r3, #0]
		if (*number > 7)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b07      	cmp	r3, #7
 8003002:	d965      	bls.n	80030d0 <increase_value+0x14c>
			*number = 1;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
		break;
 800300a:	e061      	b.n	80030d0 <increase_value+0x14c>
	case YEAR:
		(*number)++;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	3301      	adds	r3, #1
 8003012:	b2da      	uxtb	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	701a      	strb	r2, [r3, #0]
		if (*number > 99)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b63      	cmp	r3, #99	; 0x63
 800301e:	d959      	bls.n	80030d4 <increase_value+0x150>
			*number = 0;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
		break;
 8003026:	e055      	b.n	80030d4 <increase_value+0x150>
	case MONTH:
		(*number)++;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	701a      	strb	r2, [r3, #0]
		if (*number > 12)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b0c      	cmp	r3, #12
 800303a:	d94d      	bls.n	80030d8 <increase_value+0x154>
			*number = 1;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	701a      	strb	r2, [r3, #0]
		break;
 8003042:	e049      	b.n	80030d8 <increase_value+0x154>
	case DATE:
		(*number)++;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	b2da      	uxtb	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	701a      	strb	r2, [r3, #0]
		uint8_t max_date = 30;
 8003050:	231e      	movs	r3, #30
 8003052:	73fb      	strb	r3, [r7, #15]
		switch (buf_mon) {
 8003054:	4b25      	ldr	r3, [pc, #148]	; (80030ec <increase_value+0x168>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	3b01      	subs	r3, #1
 800305a:	2b0b      	cmp	r3, #11
 800305c:	d82a      	bhi.n	80030b4 <increase_value+0x130>
 800305e:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <increase_value+0xe0>)
 8003060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003064:	08003095 	.word	0x08003095
 8003068:	0800309b 	.word	0x0800309b
 800306c:	08003095 	.word	0x08003095
 8003070:	080030b5 	.word	0x080030b5
 8003074:	08003095 	.word	0x08003095
 8003078:	080030b5 	.word	0x080030b5
 800307c:	08003095 	.word	0x08003095
 8003080:	08003095 	.word	0x08003095
 8003084:	080030b5 	.word	0x080030b5
 8003088:	08003095 	.word	0x08003095
 800308c:	080030b5 	.word	0x080030b5
 8003090:	08003095 	.word	0x08003095
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			max_date = 31;
 8003094:	231f      	movs	r3, #31
 8003096:	73fb      	strb	r3, [r7, #15]
			break;
 8003098:	e00d      	b.n	80030b6 <increase_value+0x132>
		case 2:
			if (buf_year % 4)
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <increase_value+0x16c>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <increase_value+0x12a>
				max_date = 28;
 80030a8:	231c      	movs	r3, #28
 80030aa:	73fb      	strb	r3, [r7, #15]
			else
				max_date = 29;
			break;
 80030ac:	e003      	b.n	80030b6 <increase_value+0x132>
				max_date = 29;
 80030ae:	231d      	movs	r3, #29
 80030b0:	73fb      	strb	r3, [r7, #15]
			break;
 80030b2:	e000      	b.n	80030b6 <increase_value+0x132>
		default:
			break;
 80030b4:	bf00      	nop
		}
		if (*number > max_date)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d20c      	bcs.n	80030da <increase_value+0x156>
			*number = 1;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]

	}
}
 80030c6:	e008      	b.n	80030da <increase_value+0x156>
		break;
 80030c8:	bf00      	nop
 80030ca:	e006      	b.n	80030da <increase_value+0x156>
		break;
 80030cc:	bf00      	nop
 80030ce:	e004      	b.n	80030da <increase_value+0x156>
		break;
 80030d0:	bf00      	nop
 80030d2:	e002      	b.n	80030da <increase_value+0x156>
		break;
 80030d4:	bf00      	nop
 80030d6:	e000      	b.n	80030da <increase_value+0x156>
		break;
 80030d8:	bf00      	nop
}
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	200000c5 	.word	0x200000c5
 80030ec:	2000001d 	.word	0x2000001d
 80030f0:	2000001e 	.word	0x2000001e

080030f4 <button1_fsm>:
 * @brief:	increasing-value button fsm - 3 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button1_fsm(uint8_t *number) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	switch (button_st[1]) {
 80030fc:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <button1_fsm+0xbc>)
 80030fe:	785b      	ldrb	r3, [r3, #1]
 8003100:	2b02      	cmp	r3, #2
 8003102:	d031      	beq.n	8003168 <button1_fsm+0x74>
 8003104:	2b02      	cmp	r3, #2
 8003106:	dc49      	bgt.n	800319c <button1_fsm+0xa8>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <button1_fsm+0x1e>
 800310c:	2b01      	cmp	r3, #1
 800310e:	d015      	beq.n	800313c <button1_fsm+0x48>
 8003110:	e044      	b.n	800319c <button1_fsm+0xa8>
	case release:
		if (is_button_pressed(3) == 1) {
 8003112:	2003      	movs	r0, #3
 8003114:	f7fd fffc 	bl	8001110 <is_button_pressed>
 8003118:	4603      	mov	r3, r0
 800311a:	2b01      	cmp	r3, #1
 800311c:	d106      	bne.n	800312c <button1_fsm+0x38>
			// to do
			increase_value(number);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff ff30 	bl	8002f84 <increase_value>
			button_st[1] = pressed;
 8003124:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <button1_fsm+0xbc>)
 8003126:	2201      	movs	r2, #1
 8003128:	705a      	strb	r2, [r3, #1]
		} else if (is_button_pressed(3) == ERROR)
			return 0;
		break;
 800312a:	e039      	b.n	80031a0 <button1_fsm+0xac>
		} else if (is_button_pressed(3) == ERROR)
 800312c:	2003      	movs	r0, #3
 800312e:	f7fd ffef 	bl	8001110 <is_button_pressed>
 8003132:	4603      	mov	r3, r0
 8003134:	2b01      	cmp	r3, #1
 8003136:	d133      	bne.n	80031a0 <button1_fsm+0xac>
			return 0;
 8003138:	2300      	movs	r3, #0
 800313a:	e035      	b.n	80031a8 <button1_fsm+0xb4>
	case pressed:
		if (!is_button_pressed(3)) {
 800313c:	2003      	movs	r0, #3
 800313e:	f7fd ffe7 	bl	8001110 <is_button_pressed>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d103      	bne.n	8003150 <button1_fsm+0x5c>
			button_st[1] = release;
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <button1_fsm+0xbc>)
 800314a:	2200      	movs	r2, #0
 800314c:	705a      	strb	r2, [r3, #1]
		} else if (is_button_long_pressed(3) == 1) {
			button_st[1] = long_pressed;
		} else {
			return 0;
		}
		break;
 800314e:	e02a      	b.n	80031a6 <button1_fsm+0xb2>
		} else if (is_button_long_pressed(3) == 1) {
 8003150:	2003      	movs	r0, #3
 8003152:	f7fd fff9 	bl	8001148 <is_button_long_pressed>
 8003156:	4603      	mov	r3, r0
 8003158:	2b01      	cmp	r3, #1
 800315a:	d103      	bne.n	8003164 <button1_fsm+0x70>
			button_st[1] = long_pressed;
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <button1_fsm+0xbc>)
 800315e:	2202      	movs	r2, #2
 8003160:	705a      	strb	r2, [r3, #1]
		break;
 8003162:	e020      	b.n	80031a6 <button1_fsm+0xb2>
			return 0;
 8003164:	2300      	movs	r3, #0
 8003166:	e01f      	b.n	80031a8 <button1_fsm+0xb4>
	case long_pressed:
		// to do
		st_blinking = ON;
 8003168:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <button1_fsm+0xc0>)
 800316a:	2200      	movs	r2, #0
 800316c:	701a      	strb	r2, [r3, #0]
		if (!is_timer_on(2)) {
 800316e:	2002      	movs	r0, #2
 8003170:	f000 fc08 	bl	8003984 <is_timer_on>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <button1_fsm+0x94>
			increase_value(number);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ff02 	bl	8002f84 <increase_value>
			set_timer(2, INCREASE_TIME);
 8003180:	21c8      	movs	r1, #200	; 0xc8
 8003182:	2002      	movs	r0, #2
 8003184:	f000 fba0 	bl	80038c8 <set_timer>
		}
		if (!is_button_pressed(3)) {
 8003188:	2003      	movs	r0, #3
 800318a:	f7fd ffc1 	bl	8001110 <is_button_pressed>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d107      	bne.n	80031a4 <button1_fsm+0xb0>
			button_st[1] = release;
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <button1_fsm+0xbc>)
 8003196:	2200      	movs	r2, #0
 8003198:	705a      	strb	r2, [r3, #1]
		}
		break;
 800319a:	e003      	b.n	80031a4 <button1_fsm+0xb0>
	default:
		return 0;
 800319c:	2300      	movs	r3, #0
 800319e:	e003      	b.n	80031a8 <button1_fsm+0xb4>
		break;
 80031a0:	bf00      	nop
 80031a2:	e000      	b.n	80031a6 <button1_fsm+0xb2>
		break;
 80031a4:	bf00      	nop
		break;
	}
	return 1;
 80031a6:	2301      	movs	r3, #1
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20000298 	.word	0x20000298
 80031b4:	2000029b 	.word	0x2000029b

080031b8 <update_clock>:
/*
 * @brief:	update the data of clock in display mode
 * @para:	none
 * @retval:	none
 * */
void update_clock(void) {
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
	buf_sec = ds3231_sec;
 80031bc:	4b10      	ldr	r3, [pc, #64]	; (8003200 <update_clock+0x48>)
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	4b10      	ldr	r3, [pc, #64]	; (8003204 <update_clock+0x4c>)
 80031c2:	701a      	strb	r2, [r3, #0]
	buf_min = ds3231_min;
 80031c4:	4b10      	ldr	r3, [pc, #64]	; (8003208 <update_clock+0x50>)
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <update_clock+0x54>)
 80031ca:	701a      	strb	r2, [r3, #0]
	buf_hour = ds3231_hours;
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <update_clock+0x58>)
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	4b10      	ldr	r3, [pc, #64]	; (8003214 <update_clock+0x5c>)
 80031d2:	701a      	strb	r2, [r3, #0]
	buf_day = ds3231_day;
 80031d4:	4b10      	ldr	r3, [pc, #64]	; (8003218 <update_clock+0x60>)
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	4b10      	ldr	r3, [pc, #64]	; (800321c <update_clock+0x64>)
 80031da:	701a      	strb	r2, [r3, #0]
	buf_date = ds3231_date;
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <update_clock+0x68>)
 80031de:	781a      	ldrb	r2, [r3, #0]
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <update_clock+0x6c>)
 80031e2:	701a      	strb	r2, [r3, #0]
	buf_mon = ds3231_month;
 80031e4:	4b10      	ldr	r3, [pc, #64]	; (8003228 <update_clock+0x70>)
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	4b10      	ldr	r3, [pc, #64]	; (800322c <update_clock+0x74>)
 80031ea:	701a      	strb	r2, [r3, #0]
	buf_year = ds3231_year;
 80031ec:	4b10      	ldr	r3, [pc, #64]	; (8003230 <update_clock+0x78>)
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	4b10      	ldr	r3, [pc, #64]	; (8003234 <update_clock+0x7c>)
 80031f2:	701a      	strb	r2, [r3, #0]
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	200001a8 	.word	0x200001a8
 8003204:	20000018 	.word	0x20000018
 8003208:	200001aa 	.word	0x200001aa
 800320c:	20000019 	.word	0x20000019
 8003210:	200001ad 	.word	0x200001ad
 8003214:	2000001a 	.word	0x2000001a
 8003218:	200001ac 	.word	0x200001ac
 800321c:	2000001b 	.word	0x2000001b
 8003220:	200001ab 	.word	0x200001ab
 8003224:	2000001c 	.word	0x2000001c
 8003228:	200001ae 	.word	0x200001ae
 800322c:	2000001d 	.word	0x2000001d
 8003230:	200001a9 	.word	0x200001a9
 8003234:	2000001e 	.word	0x2000001e

08003238 <display_all_clock>:
/*
 * @brief:	display all data of clock
 * @para:	none
 * @retval:	none
 * */
void display_all_clock(void) {
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
	dis_date(buf_date, 1);
 800323c:	4b15      	ldr	r3, [pc, #84]	; (8003294 <display_all_clock+0x5c>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2101      	movs	r1, #1
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f990 	bl	8003568 <dis_date>
	dis_day(buf_day, 1);
 8003248:	4b13      	ldr	r3, [pc, #76]	; (8003298 <display_all_clock+0x60>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2101      	movs	r1, #1
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f930 	bl	80034b4 <dis_day>
	dis_hour(buf_hour, 1);
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <display_all_clock+0x64>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2101      	movs	r1, #1
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f8ec 	bl	8003438 <dis_hour>
	dis_min(buf_min, 1);
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <display_all_clock+0x68>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f8a8 	bl	80033bc <dis_min>
	dis_month(buf_mon, 1);
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <display_all_clock+0x6c>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2101      	movs	r1, #1
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f9b6 	bl	80035e4 <dis_month>
	dis_year(buf_year, 1);
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <display_all_clock+0x70>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2101      	movs	r1, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f9ee 	bl	8003660 <dis_year>
	dis_sec(buf_sec, 1);
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <display_all_clock+0x74>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2101      	movs	r1, #1
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f858 	bl	8003340 <dis_sec>
}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}
 8003294:	2000001c 	.word	0x2000001c
 8003298:	2000001b 	.word	0x2000001b
 800329c:	2000001a 	.word	0x2000001a
 80032a0:	20000019 	.word	0x20000019
 80032a4:	2000001d 	.word	0x2000001d
 80032a8:	2000001e 	.word	0x2000001e
 80032ac:	20000018 	.word	0x20000018

080032b0 <display_mode>:
/*
 * @brief:	display the current mode
 * @para:	none
 * @retval:	none
 * */
void display_mode(void) {
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
//		break;
//	case ALARM:
//		lcd_ShowStr(20, 30, "MODE: ALARM", WHITE, RED, 24, 0);
//		break;
//	}
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <display_all_alarm>:
/*
 * @brief:	display all data of alarm
 * @para:	none
 * @retval:	none
 * */
void display_all_alarm(void) {
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0
//	dis_day(ala_day, 1);
//	dis_hour(ala_hour, 1);
//	dis_min(ala_min, 1);
//	dis_month(ala_mon, 1);
//	dis_year(ala_year, 1);
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <init_box>:
	uint8_t x_month;
	uint8_t y_month;
	uint8_t x_year;
	uint8_t y_year;
} box;
void init_box() {
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
	box.text_color = GREEN;
 80032d0:	4b1a      	ldr	r3, [pc, #104]	; (800333c <init_box+0x70>)
 80032d2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80032d6:	601a      	str	r2, [r3, #0]
	box.background_color = BLACK;
 80032d8:	4b18      	ldr	r3, [pc, #96]	; (800333c <init_box+0x70>)
 80032da:	2200      	movs	r2, #0
 80032dc:	605a      	str	r2, [r3, #4]
	box.x_second = 150;
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <init_box+0x70>)
 80032e0:	2296      	movs	r2, #150	; 0x96
 80032e2:	721a      	strb	r2, [r3, #8]
	box.y_second = 6;
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <init_box+0x70>)
 80032e6:	2206      	movs	r2, #6
 80032e8:	725a      	strb	r2, [r3, #9]
	box.x_minute = 110;
 80032ea:	4b14      	ldr	r3, [pc, #80]	; (800333c <init_box+0x70>)
 80032ec:	226e      	movs	r2, #110	; 0x6e
 80032ee:	729a      	strb	r2, [r3, #10]
	box.y_minute = 6;
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <init_box+0x70>)
 80032f2:	2206      	movs	r2, #6
 80032f4:	72da      	strb	r2, [r3, #11]
	box.x_hour = 70;
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <init_box+0x70>)
 80032f8:	2246      	movs	r2, #70	; 0x46
 80032fa:	731a      	strb	r2, [r3, #12]
	box.y_hour = 6;
 80032fc:	4b0f      	ldr	r3, [pc, #60]	; (800333c <init_box+0x70>)
 80032fe:	2206      	movs	r2, #6
 8003300:	735a      	strb	r2, [r3, #13]
	box.x_day = 20;
 8003302:	4b0e      	ldr	r3, [pc, #56]	; (800333c <init_box+0x70>)
 8003304:	2214      	movs	r2, #20
 8003306:	739a      	strb	r2, [r3, #14]
	box.y_day = 60;
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <init_box+0x70>)
 800330a:	223c      	movs	r2, #60	; 0x3c
 800330c:	73da      	strb	r2, [r3, #15]
	box.x_date = 70;
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <init_box+0x70>)
 8003310:	2246      	movs	r2, #70	; 0x46
 8003312:	741a      	strb	r2, [r3, #16]
	box.y_date = 60;
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <init_box+0x70>)
 8003316:	223c      	movs	r2, #60	; 0x3c
 8003318:	745a      	strb	r2, [r3, #17]
	box.x_month = 110;
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <init_box+0x70>)
 800331c:	226e      	movs	r2, #110	; 0x6e
 800331e:	749a      	strb	r2, [r3, #18]
	box.y_month = 60;
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <init_box+0x70>)
 8003322:	223c      	movs	r2, #60	; 0x3c
 8003324:	74da      	strb	r2, [r3, #19]
	box.x_year = 150;
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <init_box+0x70>)
 8003328:	2296      	movs	r2, #150	; 0x96
 800332a:	751a      	strb	r2, [r3, #20]
	box.y_year = 60;
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <init_box+0x70>)
 800332e:	223c      	movs	r2, #60	; 0x3c
 8003330:	755a      	strb	r2, [r3, #21]
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	2000029c 	.word	0x2000029c

08003340 <dis_sec>:
 * @brief  display second in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in seconds area
 * @retval none
 */
void dis_sec(uint8_t number, bool i) {
 8003340:	b5b0      	push	{r4, r5, r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af04      	add	r7, sp, #16
 8003346:	4603      	mov	r3, r0
 8003348:	460a      	mov	r2, r1
 800334a:	71fb      	strb	r3, [r7, #7]
 800334c:	4613      	mov	r3, r2
 800334e:	71bb      	strb	r3, [r7, #6]
	if (i)
 8003350:	79bb      	ldrb	r3, [r7, #6]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d016      	beq.n	8003384 <dis_sec+0x44>
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2, box.text_color,
 8003356:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <dis_sec+0x78>)
 8003358:	7a1b      	ldrb	r3, [r3, #8]
 800335a:	b298      	uxth	r0, r3
 800335c:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <dis_sec+0x78>)
 800335e:	7a5b      	ldrb	r3, [r3, #9]
 8003360:	b299      	uxth	r1, r3
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	b29c      	uxth	r4, r3
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <dis_sec+0x78>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
				box.background_color, 24);
 800336c:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <dis_sec+0x78>)
 800336e:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2, box.text_color,
 8003370:	b292      	uxth	r2, r2
 8003372:	2518      	movs	r5, #24
 8003374:	9502      	str	r5, [sp, #8]
 8003376:	9201      	str	r2, [sp, #4]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	2302      	movs	r3, #2
 800337c:	4622      	mov	r2, r4
 800337e:	f7fe fcb7 	bl	8001cf0 <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
				box.background_color, box.background_color, 24);
}
 8003382:	e015      	b.n	80033b0 <dis_sec+0x70>
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <dis_sec+0x78>)
 8003386:	7a1b      	ldrb	r3, [r3, #8]
 8003388:	b298      	uxth	r0, r3
 800338a:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <dis_sec+0x78>)
 800338c:	7a5b      	ldrb	r3, [r3, #9]
 800338e:	b299      	uxth	r1, r3
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	b29c      	uxth	r4, r3
				box.background_color, box.background_color, 24);
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <dis_sec+0x78>)
 8003396:	685b      	ldr	r3, [r3, #4]
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
 8003398:	b29b      	uxth	r3, r3
				box.background_color, box.background_color, 24);
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <dis_sec+0x78>)
 800339c:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
 800339e:	b292      	uxth	r2, r2
 80033a0:	2518      	movs	r5, #24
 80033a2:	9502      	str	r5, [sp, #8]
 80033a4:	9201      	str	r2, [sp, #4]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	2302      	movs	r3, #2
 80033aa:	4622      	mov	r2, r4
 80033ac:	f7fe fca0 	bl	8001cf0 <lcd_ShowIntNum>
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bdb0      	pop	{r4, r5, r7, pc}
 80033b8:	2000029c 	.word	0x2000029c

080033bc <dis_min>:
 * @brief  display minutes in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in minutes area
 * @retval none
 */
void dis_min(uint8_t number, bool i) {
 80033bc:	b5b0      	push	{r4, r5, r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af04      	add	r7, sp, #16
 80033c2:	4603      	mov	r3, r0
 80033c4:	460a      	mov	r2, r1
 80033c6:	71fb      	strb	r3, [r7, #7]
 80033c8:	4613      	mov	r3, r2
 80033ca:	71bb      	strb	r3, [r7, #6]
	if (i)
 80033cc:	79bb      	ldrb	r3, [r7, #6]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <dis_min+0x44>
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2, box.text_color,
 80033d2:	4b18      	ldr	r3, [pc, #96]	; (8003434 <dis_min+0x78>)
 80033d4:	7a9b      	ldrb	r3, [r3, #10]
 80033d6:	b298      	uxth	r0, r3
 80033d8:	4b16      	ldr	r3, [pc, #88]	; (8003434 <dis_min+0x78>)
 80033da:	7adb      	ldrb	r3, [r3, #11]
 80033dc:	b299      	uxth	r1, r3
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	b29c      	uxth	r4, r3
 80033e2:	4b14      	ldr	r3, [pc, #80]	; (8003434 <dis_min+0x78>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
				box.background_color, 24);
 80033e8:	4a12      	ldr	r2, [pc, #72]	; (8003434 <dis_min+0x78>)
 80033ea:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2, box.text_color,
 80033ec:	b292      	uxth	r2, r2
 80033ee:	2518      	movs	r5, #24
 80033f0:	9502      	str	r5, [sp, #8]
 80033f2:	9201      	str	r2, [sp, #4]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	2302      	movs	r3, #2
 80033f8:	4622      	mov	r2, r4
 80033fa:	f7fe fc79 	bl	8001cf0 <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
				box.background_color, box.background_color, 24);

}
 80033fe:	e015      	b.n	800342c <dis_min+0x70>
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <dis_min+0x78>)
 8003402:	7a9b      	ldrb	r3, [r3, #10]
 8003404:	b298      	uxth	r0, r3
 8003406:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <dis_min+0x78>)
 8003408:	7adb      	ldrb	r3, [r3, #11]
 800340a:	b299      	uxth	r1, r3
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	b29c      	uxth	r4, r3
				box.background_color, box.background_color, 24);
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <dis_min+0x78>)
 8003412:	685b      	ldr	r3, [r3, #4]
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
 8003414:	b29b      	uxth	r3, r3
				box.background_color, box.background_color, 24);
 8003416:	4a07      	ldr	r2, [pc, #28]	; (8003434 <dis_min+0x78>)
 8003418:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
 800341a:	b292      	uxth	r2, r2
 800341c:	2518      	movs	r5, #24
 800341e:	9502      	str	r5, [sp, #8]
 8003420:	9201      	str	r2, [sp, #4]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2302      	movs	r3, #2
 8003426:	4622      	mov	r2, r4
 8003428:	f7fe fc62 	bl	8001cf0 <lcd_ShowIntNum>
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bdb0      	pop	{r4, r5, r7, pc}
 8003434:	2000029c 	.word	0x2000029c

08003438 <dis_hour>:
 * @brief  display hours in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in hours area
 * @retval none
 */
void dis_hour(uint8_t number, bool i) {
 8003438:	b5b0      	push	{r4, r5, r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af04      	add	r7, sp, #16
 800343e:	4603      	mov	r3, r0
 8003440:	460a      	mov	r2, r1
 8003442:	71fb      	strb	r3, [r7, #7]
 8003444:	4613      	mov	r3, r2
 8003446:	71bb      	strb	r3, [r7, #6]
	if (i)
 8003448:	79bb      	ldrb	r3, [r7, #6]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <dis_hour+0x44>
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.text_color,
 800344e:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <dis_hour+0x78>)
 8003450:	7b1b      	ldrb	r3, [r3, #12]
 8003452:	b298      	uxth	r0, r3
 8003454:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <dis_hour+0x78>)
 8003456:	7b5b      	ldrb	r3, [r3, #13]
 8003458:	b299      	uxth	r1, r3
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	b29c      	uxth	r4, r3
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <dis_hour+0x78>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8003464:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <dis_hour+0x78>)
 8003466:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.text_color,
 8003468:	b292      	uxth	r2, r2
 800346a:	2518      	movs	r5, #24
 800346c:	9502      	str	r5, [sp, #8]
 800346e:	9201      	str	r2, [sp, #4]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2302      	movs	r3, #2
 8003474:	4622      	mov	r2, r4
 8003476:	f7fe fc3b 	bl	8001cf0 <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.background_color,
				box.background_color, 24);
}
 800347a:	e015      	b.n	80034a8 <dis_hour+0x70>
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.background_color,
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <dis_hour+0x78>)
 800347e:	7b1b      	ldrb	r3, [r3, #12]
 8003480:	b298      	uxth	r0, r3
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <dis_hour+0x78>)
 8003484:	7b5b      	ldrb	r3, [r3, #13]
 8003486:	b299      	uxth	r1, r3
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	b29c      	uxth	r4, r3
 800348c:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <dis_hour+0x78>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8003492:	4a07      	ldr	r2, [pc, #28]	; (80034b0 <dis_hour+0x78>)
 8003494:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.background_color,
 8003496:	b292      	uxth	r2, r2
 8003498:	2518      	movs	r5, #24
 800349a:	9502      	str	r5, [sp, #8]
 800349c:	9201      	str	r2, [sp, #4]
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	2302      	movs	r3, #2
 80034a2:	4622      	mov	r2, r4
 80034a4:	f7fe fc24 	bl	8001cf0 <lcd_ShowIntNum>
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bdb0      	pop	{r4, r5, r7, pc}
 80034b0:	2000029c 	.word	0x2000029c

080034b4 <dis_day>:
 * @brief  display day in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in day area
 * @retval none
 */
void dis_day(uint8_t number, bool i) {
 80034b4:	b5b0      	push	{r4, r5, r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af04      	add	r7, sp, #16
 80034ba:	4603      	mov	r3, r0
 80034bc:	460a      	mov	r2, r1
 80034be:	71fb      	strb	r3, [r7, #7]
 80034c0:	4613      	mov	r3, r2
 80034c2:	71bb      	strb	r3, [r7, #6]
	//lcd_ShowStr(box.x_day, box.y_day - 5, ": Day", box.text_color, box.background_color, 24, 0);
	if (i){
 80034c4:	79bb      	ldrb	r3, [r7, #6]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d02f      	beq.n	800352a <dis_day+0x76>
		if(number != 1)
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d016      	beq.n	80034fe <dis_day+0x4a>
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.text_color,
 80034d0:	4b23      	ldr	r3, [pc, #140]	; (8003560 <dis_day+0xac>)
 80034d2:	7b9b      	ldrb	r3, [r3, #14]
 80034d4:	b298      	uxth	r0, r3
 80034d6:	4b22      	ldr	r3, [pc, #136]	; (8003560 <dis_day+0xac>)
 80034d8:	7bdb      	ldrb	r3, [r3, #15]
 80034da:	b299      	uxth	r1, r3
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	b29c      	uxth	r4, r3
 80034e0:	4b1f      	ldr	r3, [pc, #124]	; (8003560 <dis_day+0xac>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
						box.background_color, 24);
 80034e6:	4a1e      	ldr	r2, [pc, #120]	; (8003560 <dis_day+0xac>)
 80034e8:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.text_color,
 80034ea:	b292      	uxth	r2, r2
 80034ec:	2518      	movs	r5, #24
 80034ee:	9502      	str	r5, [sp, #8]
 80034f0:	9201      	str	r2, [sp, #4]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	2302      	movs	r3, #2
 80034f6:	4622      	mov	r2, r4
 80034f8:	f7fe fbfa 	bl	8001cf0 <lcd_ShowIntNum>
					box.background_color, 24, 0);
	}
	else
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.background_color,
				box.background_color, 24);
}
 80034fc:	e02b      	b.n	8003556 <dis_day+0xa2>
			lcd_ShowStr(box.x_day, box.y_day, "CN", box.text_color,
 80034fe:	4b18      	ldr	r3, [pc, #96]	; (8003560 <dis_day+0xac>)
 8003500:	7b9b      	ldrb	r3, [r3, #14]
 8003502:	b298      	uxth	r0, r3
 8003504:	4b16      	ldr	r3, [pc, #88]	; (8003560 <dis_day+0xac>)
 8003506:	7bdb      	ldrb	r3, [r3, #15]
 8003508:	b299      	uxth	r1, r3
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <dis_day+0xac>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	b29a      	uxth	r2, r3
					box.background_color, 24, 0);
 8003510:	4b13      	ldr	r3, [pc, #76]	; (8003560 <dis_day+0xac>)
 8003512:	685b      	ldr	r3, [r3, #4]
			lcd_ShowStr(box.x_day, box.y_day, "CN", box.text_color,
 8003514:	b29b      	uxth	r3, r3
 8003516:	2400      	movs	r4, #0
 8003518:	9402      	str	r4, [sp, #8]
 800351a:	2418      	movs	r4, #24
 800351c:	9401      	str	r4, [sp, #4]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	4a10      	ldr	r2, [pc, #64]	; (8003564 <dis_day+0xb0>)
 8003524:	f7fe fe6e 	bl	8002204 <lcd_ShowStr>
}
 8003528:	e015      	b.n	8003556 <dis_day+0xa2>
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.background_color,
 800352a:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <dis_day+0xac>)
 800352c:	7b9b      	ldrb	r3, [r3, #14]
 800352e:	b298      	uxth	r0, r3
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <dis_day+0xac>)
 8003532:	7bdb      	ldrb	r3, [r3, #15]
 8003534:	b299      	uxth	r1, r3
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	b29c      	uxth	r4, r3
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <dis_day+0xac>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8003540:	4a07      	ldr	r2, [pc, #28]	; (8003560 <dis_day+0xac>)
 8003542:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.background_color,
 8003544:	b292      	uxth	r2, r2
 8003546:	2518      	movs	r5, #24
 8003548:	9502      	str	r5, [sp, #8]
 800354a:	9201      	str	r2, [sp, #4]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2302      	movs	r3, #2
 8003550:	4622      	mov	r2, r4
 8003552:	f7fe fbcd 	bl	8001cf0 <lcd_ShowIntNum>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bdb0      	pop	{r4, r5, r7, pc}
 800355e:	bf00      	nop
 8003560:	2000029c 	.word	0x2000029c
 8003564:	0800ab28 	.word	0x0800ab28

08003568 <dis_date>:
 * @brief  display dates in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in dates area
 * @retval none
 */
void dis_date(uint8_t number, bool i) {
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af04      	add	r7, sp, #16
 800356e:	4603      	mov	r3, r0
 8003570:	460a      	mov	r2, r1
 8003572:	71fb      	strb	r3, [r7, #7]
 8003574:	4613      	mov	r3, r2
 8003576:	71bb      	strb	r3, [r7, #6]
	//lcd_ShowStr(box.x_date, box.y_date - 5, ": Date", box.text_color, box.background_color, 24, 0);
	if (i)
 8003578:	79bb      	ldrb	r3, [r7, #6]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d016      	beq.n	80035ac <dis_date+0x44>
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.text_color,
 800357e:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <dis_date+0x78>)
 8003580:	7c1b      	ldrb	r3, [r3, #16]
 8003582:	b298      	uxth	r0, r3
 8003584:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <dis_date+0x78>)
 8003586:	7c5b      	ldrb	r3, [r3, #17]
 8003588:	b299      	uxth	r1, r3
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	b29c      	uxth	r4, r3
 800358e:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <dis_date+0x78>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8003594:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <dis_date+0x78>)
 8003596:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.text_color,
 8003598:	b292      	uxth	r2, r2
 800359a:	2518      	movs	r5, #24
 800359c:	9502      	str	r5, [sp, #8]
 800359e:	9201      	str	r2, [sp, #4]
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	2302      	movs	r3, #2
 80035a4:	4622      	mov	r2, r4
 80035a6:	f7fe fba3 	bl	8001cf0 <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.background_color,
				box.background_color, 24);
}
 80035aa:	e015      	b.n	80035d8 <dis_date+0x70>
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.background_color,
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <dis_date+0x78>)
 80035ae:	7c1b      	ldrb	r3, [r3, #16]
 80035b0:	b298      	uxth	r0, r3
 80035b2:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <dis_date+0x78>)
 80035b4:	7c5b      	ldrb	r3, [r3, #17]
 80035b6:	b299      	uxth	r1, r3
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	b29c      	uxth	r4, r3
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <dis_date+0x78>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	b29b      	uxth	r3, r3
				box.background_color, 24);
 80035c2:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <dis_date+0x78>)
 80035c4:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.background_color,
 80035c6:	b292      	uxth	r2, r2
 80035c8:	2518      	movs	r5, #24
 80035ca:	9502      	str	r5, [sp, #8]
 80035cc:	9201      	str	r2, [sp, #4]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	2302      	movs	r3, #2
 80035d2:	4622      	mov	r2, r4
 80035d4:	f7fe fb8c 	bl	8001cf0 <lcd_ShowIntNum>
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bdb0      	pop	{r4, r5, r7, pc}
 80035e0:	2000029c 	.word	0x2000029c

080035e4 <dis_month>:
 * @brief  display months in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in months area
 * @retval none
 */
void dis_month(uint8_t number, bool i) {
 80035e4:	b5b0      	push	{r4, r5, r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af04      	add	r7, sp, #16
 80035ea:	4603      	mov	r3, r0
 80035ec:	460a      	mov	r2, r1
 80035ee:	71fb      	strb	r3, [r7, #7]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71bb      	strb	r3, [r7, #6]
	//lcd_ShowStr(box.x_month, box.y_month - 5, ": Month", box.text_color, box.background_color, 24, 0);
	if (i)
 80035f4:	79bb      	ldrb	r3, [r7, #6]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <dis_month+0x44>
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.text_color,
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <dis_month+0x78>)
 80035fc:	7c9b      	ldrb	r3, [r3, #18]
 80035fe:	b298      	uxth	r0, r3
 8003600:	4b16      	ldr	r3, [pc, #88]	; (800365c <dis_month+0x78>)
 8003602:	7cdb      	ldrb	r3, [r3, #19]
 8003604:	b299      	uxth	r1, r3
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	b29c      	uxth	r4, r3
 800360a:	4b14      	ldr	r3, [pc, #80]	; (800365c <dis_month+0x78>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8003610:	4a12      	ldr	r2, [pc, #72]	; (800365c <dis_month+0x78>)
 8003612:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.text_color,
 8003614:	b292      	uxth	r2, r2
 8003616:	2518      	movs	r5, #24
 8003618:	9502      	str	r5, [sp, #8]
 800361a:	9201      	str	r2, [sp, #4]
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2302      	movs	r3, #2
 8003620:	4622      	mov	r2, r4
 8003622:	f7fe fb65 	bl	8001cf0 <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.background_color,
				box.background_color, 24);
}
 8003626:	e015      	b.n	8003654 <dis_month+0x70>
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.background_color,
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <dis_month+0x78>)
 800362a:	7c9b      	ldrb	r3, [r3, #18]
 800362c:	b298      	uxth	r0, r3
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <dis_month+0x78>)
 8003630:	7cdb      	ldrb	r3, [r3, #19]
 8003632:	b299      	uxth	r1, r3
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	b29c      	uxth	r4, r3
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <dis_month+0x78>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	b29b      	uxth	r3, r3
				box.background_color, 24);
 800363e:	4a07      	ldr	r2, [pc, #28]	; (800365c <dis_month+0x78>)
 8003640:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.background_color,
 8003642:	b292      	uxth	r2, r2
 8003644:	2518      	movs	r5, #24
 8003646:	9502      	str	r5, [sp, #8]
 8003648:	9201      	str	r2, [sp, #4]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	2302      	movs	r3, #2
 800364e:	4622      	mov	r2, r4
 8003650:	f7fe fb4e 	bl	8001cf0 <lcd_ShowIntNum>
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bdb0      	pop	{r4, r5, r7, pc}
 800365c:	2000029c 	.word	0x2000029c

08003660 <dis_year>:
 * @brief  display years in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in years area
 * @retval none
 */
void dis_year(uint8_t number, bool i) {
 8003660:	b5b0      	push	{r4, r5, r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af04      	add	r7, sp, #16
 8003666:	4603      	mov	r3, r0
 8003668:	460a      	mov	r2, r1
 800366a:	71fb      	strb	r3, [r7, #7]
 800366c:	4613      	mov	r3, r2
 800366e:	71bb      	strb	r3, [r7, #6]
	if (i)
 8003670:	79bb      	ldrb	r3, [r7, #6]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d016      	beq.n	80036a4 <dis_year+0x44>
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.text_color,
 8003676:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <dis_year+0x78>)
 8003678:	7d1b      	ldrb	r3, [r3, #20]
 800367a:	b298      	uxth	r0, r3
 800367c:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <dis_year+0x78>)
 800367e:	7d5b      	ldrb	r3, [r3, #21]
 8003680:	b299      	uxth	r1, r3
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	b29c      	uxth	r4, r3
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <dis_year+0x78>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
				box.background_color, 24);
 800368c:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <dis_year+0x78>)
 800368e:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.text_color,
 8003690:	b292      	uxth	r2, r2
 8003692:	2518      	movs	r5, #24
 8003694:	9502      	str	r5, [sp, #8]
 8003696:	9201      	str	r2, [sp, #4]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2302      	movs	r3, #2
 800369c:	4622      	mov	r2, r4
 800369e:	f7fe fb27 	bl	8001cf0 <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.background_color,
				box.background_color, 24);
}
 80036a2:	e015      	b.n	80036d0 <dis_year+0x70>
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.background_color,
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <dis_year+0x78>)
 80036a6:	7d1b      	ldrb	r3, [r3, #20]
 80036a8:	b298      	uxth	r0, r3
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <dis_year+0x78>)
 80036ac:	7d5b      	ldrb	r3, [r3, #21]
 80036ae:	b299      	uxth	r1, r3
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	b29c      	uxth	r4, r3
 80036b4:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <dis_year+0x78>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	b29b      	uxth	r3, r3
				box.background_color, 24);
 80036ba:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <dis_year+0x78>)
 80036bc:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.background_color,
 80036be:	b292      	uxth	r2, r2
 80036c0:	2518      	movs	r5, #24
 80036c2:	9502      	str	r5, [sp, #8]
 80036c4:	9201      	str	r2, [sp, #4]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	2302      	movs	r3, #2
 80036ca:	4622      	mov	r2, r4
 80036cc:	f7fe fb10 	bl	8001cf0 <lcd_ShowIntNum>
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bdb0      	pop	{r4, r5, r7, pc}
 80036d8:	2000029c 	.word	0x2000029c

080036dc <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 80036e0:	2205      	movs	r2, #5
 80036e2:	4903      	ldr	r1, [pc, #12]	; (80036f0 <sensor_init+0x14>)
 80036e4:	4803      	ldr	r0, [pc, #12]	; (80036f4 <sensor_init+0x18>)
 80036e6:	f001 f959 	bl	800499c <HAL_ADC_Start_DMA>
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	200002b4 	.word	0x200002b4
 80036f4:	200000e0 	.word	0x200000e0

080036f8 <sensor_Read>:

void sensor_Read(){
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80036fc:	2205      	movs	r2, #5
 80036fe:	4903      	ldr	r1, [pc, #12]	; (800370c <sensor_Read+0x14>)
 8003700:	4803      	ldr	r0, [pc, #12]	; (8003710 <sensor_Read+0x18>)
 8003702:	f001 f94b 	bl	800499c <HAL_ADC_Start_DMA>
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	200002b4 	.word	0x200002b4
 8003710:	200000e0 	.word	0x200000e0

08003714 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <sensor_GetLight+0x14>)
 800371a:	889b      	ldrh	r3, [r3, #4]
}
 800371c:	4618      	mov	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	200002b4 	.word	0x200002b4

0800372c <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8003730:	4b03      	ldr	r3, [pc, #12]	; (8003740 <sensor_GetPotentiometer+0x14>)
 8003732:	88db      	ldrh	r3, [r3, #6]
}
 8003734:	4618      	mov	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	200002b4 	.word	0x200002b4
 8003744:	00000000 	.word	0x00000000

08003748 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <sensor_GetVoltage+0x70>)
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003758:	ee17 0a90 	vmov	r0, s15
 800375c:	f7fc feec 	bl	8000538 <__aeabi_f2d>
 8003760:	a311      	add	r3, pc, #68	; (adr r3, 80037a8 <sensor_GetVoltage+0x60>)
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f7fc ff3f 	bl	80005e8 <__aeabi_dmul>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4610      	mov	r0, r2
 8003770:	4619      	mov	r1, r3
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	4b11      	ldr	r3, [pc, #68]	; (80037bc <sensor_GetVoltage+0x74>)
 8003778:	f7fc ff36 	bl	80005e8 <__aeabi_dmul>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	a30a      	add	r3, pc, #40	; (adr r3, 80037b0 <sensor_GetVoltage+0x68>)
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f7fd f857 	bl	800083c <__aeabi_ddiv>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	f7fd f959 	bl	8000a4c <__aeabi_d2f>
 800379a:	4603      	mov	r3, r0
 800379c:	ee07 3a90 	vmov	s15, r3
}
 80037a0:	eeb0 0a67 	vmov.f32	s0, s15
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	66666666 	.word	0x66666666
 80037ac:	400a6666 	.word	0x400a6666
 80037b0:	cccccccd 	.word	0xcccccccd
 80037b4:	40b908ac 	.word	0x40b908ac
 80037b8:	200002b4 	.word	0x200002b4
 80037bc:	40280000 	.word	0x40280000

080037c0 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 80037c4:	4b28      	ldr	r3, [pc, #160]	; (8003868 <sensor_GetCurrent+0xa8>)
 80037c6:	885b      	ldrh	r3, [r3, #2]
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d0:	ee17 0a90 	vmov	r0, s15
 80037d4:	f7fc feb0 	bl	8000538 <__aeabi_f2d>
 80037d8:	a31f      	add	r3, pc, #124	; (adr r3, 8003858 <sensor_GetCurrent+0x98>)
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f7fc ff03 	bl	80005e8 <__aeabi_dmul>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	4b1f      	ldr	r3, [pc, #124]	; (800386c <sensor_GetCurrent+0xac>)
 80037f0:	f7fc fefa 	bl	80005e8 <__aeabi_dmul>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	a318      	add	r3, pc, #96	; (adr r3, 8003860 <sensor_GetCurrent+0xa0>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f7fd f81b 	bl	800083c <__aeabi_ddiv>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4610      	mov	r0, r2
 800380c:	4619      	mov	r1, r3
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	4b17      	ldr	r3, [pc, #92]	; (8003870 <sensor_GetCurrent+0xb0>)
 8003814:	f7fc fd30 	bl	8000278 <__aeabi_dsub>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <sensor_GetCurrent+0xb4>)
 8003826:	f7fc fedf 	bl	80005e8 <__aeabi_dmul>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <sensor_GetCurrent+0xb0>)
 8003838:	f7fd f800 	bl	800083c <__aeabi_ddiv>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	f7fd f902 	bl	8000a4c <__aeabi_d2f>
 8003848:	4603      	mov	r3, r0
 800384a:	ee07 3a90 	vmov	s15, r3
}
 800384e:	eeb0 0a67 	vmov.f32	s0, s15
 8003852:	bd80      	pop	{r7, pc}
 8003854:	f3af 8000 	nop.w
 8003858:	66666666 	.word	0x66666666
 800385c:	400a6666 	.word	0x400a6666
 8003860:	147ae148 	.word	0x147ae148
 8003864:	40a4b2ee 	.word	0x40a4b2ee
 8003868:	200002b4 	.word	0x200002b4
 800386c:	408f4000 	.word	0x408f4000
 8003870:	40040000 	.word	0x40040000
 8003874:	40140000 	.word	0x40140000

08003878 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <sensor_GetTemperature+0x30>)
 800387e:	891b      	ldrh	r3, [r3, #8]
 8003880:	ee07 3a90 	vmov	s15, r3
 8003884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003888:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80038ac <sensor_GetTemperature+0x34>
 800388c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003890:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80038b0 <sensor_GetTemperature+0x38>
 8003894:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003898:	eef0 7a66 	vmov.f32	s15, s13
}
 800389c:	eeb0 0a67 	vmov.f32	s0, s15
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	200002b4 	.word	0x200002b4
 80038ac:	43a50000 	.word	0x43a50000
 80038b0:	457ff000 	.word	0x457ff000

080038b4 <HAL_TIM_PeriodElapsedCallback>:
 * timer[2]: to increase value by 1 over time
 * timer[3]: to lcd show sensor time
 * timer[4]: to notify Potentiometer
 * */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	run_timer();
 80038bc:	f000 f830 	bl	8003920 <run_timer>
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <set_timer>:
 * @brief:	turn timer on and set value
 * @para:	i: id of timer
 * 			time: unit is ms
 * @retval:	none
 * */
void set_timer(unsigned i, unsigned int time) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
	timer[i].count = time * FREQUENCY_OF_TIM / 1000.0;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fc fe09 	bl	80004f4 <__aeabi_ui2d>
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <set_timer+0x50>)
 80038e8:	f7fc ffa8 	bl	800083c <__aeabi_ddiv>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	f7fd f88a 	bl	8000a0c <__aeabi_d2uiz>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4908      	ldr	r1, [pc, #32]	; (800391c <set_timer+0x54>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	605a      	str	r2, [r3, #4]
	timer[i].state = 1;
 8003904:	4a05      	ldr	r2, [pc, #20]	; (800391c <set_timer+0x54>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2101      	movs	r1, #1
 800390a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	408f4000 	.word	0x408f4000
 800391c:	200002c0 	.word	0x200002c0

08003920 <run_timer>:
/*
 * @brief:	run all timers that is on
 * @para:	none
 * @retval:	none
 * */
void run_timer(void) {
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	e01f      	b.n	800396c <run_timer+0x4c>
		if (timer[i].state) {
 800392c:	4a14      	ldr	r2, [pc, #80]	; (8003980 <run_timer+0x60>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d016      	beq.n	8003966 <run_timer+0x46>
			timer[i].count--;
 8003938:	4a11      	ldr	r2, [pc, #68]	; (8003980 <run_timer+0x60>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	1e5a      	subs	r2, r3, #1
 8003944:	490e      	ldr	r1, [pc, #56]	; (8003980 <run_timer+0x60>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	440b      	add	r3, r1
 800394c:	605a      	str	r2, [r3, #4]
			if (timer[i].count <= 0) {
 800394e:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <run_timer+0x60>)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4413      	add	r3, r2
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <run_timer+0x46>
				timer[i].state = 0;
 800395c:	4a08      	ldr	r2, [pc, #32]	; (8003980 <run_timer+0x60>)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2100      	movs	r1, #0
 8003962:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3301      	adds	r3, #1
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b09      	cmp	r3, #9
 8003970:	d9dc      	bls.n	800392c <run_timer+0xc>
			}
		}
	}
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	200002c0 	.word	0x200002c0

08003984 <is_timer_on>:

bool is_timer_on(unsigned i) {
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	return (timer[i].state == 1);
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <is_timer_on+0x28>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003994:	2b01      	cmp	r3, #1
 8003996:	bf0c      	ite	eq
 8003998:	2301      	moveq	r3, #1
 800399a:	2300      	movne	r3, #0
 800399c:	b2db      	uxtb	r3, r3
}
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	200002c0 	.word	0x200002c0

080039b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <MX_SPI1_Init+0x64>)
 80039b6:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <MX_SPI1_Init+0x68>)
 80039b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039ba:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <MX_SPI1_Init+0x64>)
 80039bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039c2:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <MX_SPI1_Init+0x64>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039c8:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <MX_SPI1_Init+0x64>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <MX_SPI1_Init+0x64>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <MX_SPI1_Init+0x64>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039da:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <MX_SPI1_Init+0x64>)
 80039dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039e2:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <MX_SPI1_Init+0x64>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <MX_SPI1_Init+0x64>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <MX_SPI1_Init+0x64>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <MX_SPI1_Init+0x64>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <MX_SPI1_Init+0x64>)
 80039fc:	220a      	movs	r2, #10
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a00:	4804      	ldr	r0, [pc, #16]	; (8003a14 <MX_SPI1_Init+0x64>)
 8003a02:	f003 fe97 	bl	8007734 <HAL_SPI_Init>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003a0c:	f7fe fe0a 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000310 	.word	0x20000310
 8003a18:	40013000 	.word	0x40013000

08003a1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <HAL_SPI_MspInit+0x84>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d12b      	bne.n	8003a96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	4b18      	ldr	r3, [pc, #96]	; (8003aa4 <HAL_SPI_MspInit+0x88>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <HAL_SPI_MspInit+0x88>)
 8003a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <HAL_SPI_MspInit+0x88>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <HAL_SPI_MspInit+0x88>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	4a10      	ldr	r2, [pc, #64]	; (8003aa4 <HAL_SPI_MspInit+0x88>)
 8003a64:	f043 0302 	orr.w	r3, r3, #2
 8003a68:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6a:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <HAL_SPI_MspInit+0x88>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003a76:	2338      	movs	r3, #56	; 0x38
 8003a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a86:	2305      	movs	r3, #5
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8a:	f107 0314 	add.w	r3, r7, #20
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4805      	ldr	r0, [pc, #20]	; (8003aa8 <HAL_SPI_MspInit+0x8c>)
 8003a92:	f002 f865 	bl	8005b60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a96:	bf00      	nop
 8003a98:	3728      	adds	r7, #40	; 0x28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40013000 	.word	0x40013000
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40020400 	.word	0x40020400

08003aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
 8003ab6:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <HAL_MspInit+0x4c>)
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	4a0f      	ldr	r2, [pc, #60]	; (8003af8 <HAL_MspInit+0x4c>)
 8003abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <HAL_MspInit+0x4c>)
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aca:	607b      	str	r3, [r7, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <HAL_MspInit+0x4c>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <HAL_MspInit+0x4c>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003adc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_MspInit+0x4c>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800

08003afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b00:	e7fe      	b.n	8003b00 <NMI_Handler+0x4>

08003b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b02:	b480      	push	{r7}
 8003b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b06:	e7fe      	b.n	8003b06 <HardFault_Handler+0x4>

08003b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b0c:	e7fe      	b.n	8003b0c <MemManage_Handler+0x4>

08003b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b12:	e7fe      	b.n	8003b12 <BusFault_Handler+0x4>

08003b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b18:	e7fe      	b.n	8003b18 <UsageFault_Handler+0x4>

08003b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b3a:	bf00      	nop
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b48:	f000 fea0 	bl	800488c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <TIM2_IRQHandler+0x10>)
 8003b56:	f004 fc7f 	bl	8008458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	200003d8 	.word	0x200003d8

08003b64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <USART1_IRQHandler+0x10>)
 8003b6a:	f005 fbdf 	bl	800932c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000484 	.word	0x20000484

08003b78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <DMA2_Stream0_IRQHandler+0x10>)
 8003b7e:	f001 fd85 	bl	800568c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000128 	.word	0x20000128

08003b8c <_sbrk>:
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	4a14      	ldr	r2, [pc, #80]	; (8003be8 <_sbrk+0x5c>)
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <_sbrk+0x60>)
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <_sbrk+0x64>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d102      	bne.n	8003bae <_sbrk+0x22>
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <_sbrk+0x64>)
 8003baa:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <_sbrk+0x68>)
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <_sbrk+0x64>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d207      	bcs.n	8003bcc <_sbrk+0x40>
 8003bbc:	f006 fb3e 	bl	800a23c <__errno>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	220c      	movs	r2, #12
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bca:	e009      	b.n	8003be0 <_sbrk+0x54>
 8003bcc:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <_sbrk+0x64>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <_sbrk+0x64>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <_sbrk+0x64>)
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20020000 	.word	0x20020000
 8003bec:	00000400 	.word	0x00000400
 8003bf0:	200000c8 	.word	0x200000c8
 8003bf4:	200004e0 	.word	0x200004e0

08003bf8 <sensor_diplay>:
/*
 * @brief:	update sensor value
 * @para:	none
 * @retval:	none
 * */
void sensor_diplay(){
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af04      	add	r7, sp, #16
	  if(!is_timer_on(0)){
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f7ff fec0 	bl	8003984 <is_timer_on>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f040 8090 	bne.w	8003d2c <sensor_diplay+0x134>
		  set_timer(0, READ_BUTTON_TIME);
 8003c0c:	210a      	movs	r1, #10
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f7ff fe5a 	bl	80038c8 <set_timer>
		  ds3231_ReadTime();
 8003c14:	f7fd fb18 	bl	8001248 <ds3231_ReadTime>
		  button_Scan();
 8003c18:	f7fd fa0e 	bl	8001038 <button_Scan>
		  sensor_Read();
 8003c1c:	f7ff fd6c 	bl	80036f8 <sensor_Read>
		  //Check Potentiometer value and send notify
		  if(sensor_GetPotentiometer() >= 4095 * 0.7){
 8003c20:	f7ff fd84 	bl	800372c <sensor_GetPotentiometer>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461a      	mov	r2, r3
 8003c28:	f640 3332 	movw	r3, #2866	; 0xb32
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d937      	bls.n	8003ca0 <sensor_diplay+0xa8>
			  uart_print = 1;
 8003c30:	4b46      	ldr	r3, [pc, #280]	; (8003d4c <sensor_diplay+0x154>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
			  if(isnotify == 1){
 8003c36:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <sensor_diplay+0x158>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d11a      	bne.n	8003c74 <sensor_diplay+0x7c>
				  buzzer_SetVolume(volval);
 8003c3e:	4b45      	ldr	r3, [pc, #276]	; (8003d54 <sensor_diplay+0x15c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fd faa5 	bl	8001194 <buzzer_SetVolume>
				  if(!is_timer_on(4)){
 8003c4a:	2004      	movs	r0, #4
 8003c4c:	f7ff fe9a 	bl	8003984 <is_timer_on>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d12a      	bne.n	8003cac <sensor_diplay+0xb4>
					  set_timer(4, ONE_SECOND);
 8003c56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c5a:	2004      	movs	r0, #4
 8003c5c:	f7ff fe34 	bl	80038c8 <set_timer>
					  isnotify = 0;
 8003c60:	4b3b      	ldr	r3, [pc, #236]	; (8003d50 <sensor_diplay+0x158>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	701a      	strb	r2, [r3, #0]
	  				  uart_Rs232SendString("Potentiometer > 70%\n");
 8003c66:	483c      	ldr	r0, [pc, #240]	; (8003d58 <sensor_diplay+0x160>)
 8003c68:	f000 fc4e 	bl	8004508 <uart_Rs232SendString>
	  				  uart_Rs232SendString("Please reduce Potentiometer\n\n");
 8003c6c:	483b      	ldr	r0, [pc, #236]	; (8003d5c <sensor_diplay+0x164>)
 8003c6e:	f000 fc4b 	bl	8004508 <uart_Rs232SendString>
 8003c72:	e01b      	b.n	8003cac <sensor_diplay+0xb4>
				  }
			  }
			  else if(isnotify == 0){
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <sensor_diplay+0x158>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d117      	bne.n	8003cac <sensor_diplay+0xb4>
				  buzzer_SetVolume(0);
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f7fd fa89 	bl	8001194 <buzzer_SetVolume>
				  if(!is_timer_on(4)){
 8003c82:	2004      	movs	r0, #4
 8003c84:	f7ff fe7e 	bl	8003984 <is_timer_on>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10e      	bne.n	8003cac <sensor_diplay+0xb4>
					  set_timer(4, ONE_SECOND);
 8003c8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c92:	2004      	movs	r0, #4
 8003c94:	f7ff fe18 	bl	80038c8 <set_timer>
					  isnotify = 1;
 8003c98:	4b2d      	ldr	r3, [pc, #180]	; (8003d50 <sensor_diplay+0x158>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e005      	b.n	8003cac <sensor_diplay+0xb4>
				  }
			  }
	  	  }
		  else{
			  uart_print = 0;
 8003ca0:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <sensor_diplay+0x154>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
			  buzzer_SetVolume(0);
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f7fd fa74 	bl	8001194 <buzzer_SetVolume>
		  }

		  //change volume value
		  if(button_count[11] == 1){
 8003cac:	4b2c      	ldr	r3, [pc, #176]	; (8003d60 <sensor_diplay+0x168>)
 8003cae:	8adb      	ldrh	r3, [r3, #22]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d11b      	bne.n	8003cec <sensor_diplay+0xf4>
			  volval += 10;
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <sensor_diplay+0x15c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	330a      	adds	r3, #10
 8003cba:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <sensor_diplay+0x15c>)
 8003cbc:	6013      	str	r3, [r2, #0]
			  if(volval > 99){
 8003cbe:	4b25      	ldr	r3, [pc, #148]	; (8003d54 <sensor_diplay+0x15c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b63      	cmp	r3, #99	; 0x63
 8003cc4:	dd02      	ble.n	8003ccc <sensor_diplay+0xd4>
				  volval = 0;
 8003cc6:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <sensor_diplay+0x15c>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
			  }
			  lcd_ShowIntNum(10, 300, volval, 2, WHITE, BLACK, 16);
 8003ccc:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <sensor_diplay+0x15c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	2310      	movs	r3, #16
 8003cd4:	9302      	str	r3, [sp, #8]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003ce6:	200a      	movs	r0, #10
 8003ce8:	f7fe f802 	bl	8001cf0 <lcd_ShowIntNum>
		  }
		  if(button_count[15] == 1){
 8003cec:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <sensor_diplay+0x168>)
 8003cee:	8bdb      	ldrh	r3, [r3, #30]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d11b      	bne.n	8003d2c <sensor_diplay+0x134>
			  volval -= 10;
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <sensor_diplay+0x15c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3b0a      	subs	r3, #10
 8003cfa:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <sensor_diplay+0x15c>)
 8003cfc:	6013      	str	r3, [r2, #0]
			  if(volval < 0){
 8003cfe:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <sensor_diplay+0x15c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	da02      	bge.n	8003d0c <sensor_diplay+0x114>
				  volval = 99;
 8003d06:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <sensor_diplay+0x15c>)
 8003d08:	2263      	movs	r2, #99	; 0x63
 8003d0a:	601a      	str	r2, [r3, #0]
			  }
			  lcd_ShowIntNum(10, 300, volval, 2, WHITE, BLACK, 16);
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <sensor_diplay+0x15c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	2310      	movs	r3, #16
 8003d14:	9302      	str	r3, [sp, #8]
 8003d16:	2300      	movs	r3, #0
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	2302      	movs	r3, #2
 8003d22:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003d26:	200a      	movs	r0, #10
 8003d28:	f7fd ffe2 	bl	8001cf0 <lcd_ShowIntNum>
		  }
	  }
	  //show sensor value to LCD
	  if(!is_timer_on(3)){
 8003d2c:	2003      	movs	r0, #3
 8003d2e:	f7ff fe29 	bl	8003984 <is_timer_on>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <sensor_diplay+0x14e>
		  set_timer(3, LCD_SENSOR_TIME);
 8003d38:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d3c:	2003      	movs	r0, #3
 8003d3e:	f7ff fdc3 	bl	80038c8 <set_timer>
		  LCD_show_sensor();
 8003d42:	f000 f80f 	bl	8003d64 <LCD_show_sensor>
	  }
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	200000d0 	.word	0x200000d0
 8003d50:	200000cd 	.word	0x200000cd
 8003d54:	20000028 	.word	0x20000028
 8003d58:	0800ab4c 	.word	0x0800ab4c
 8003d5c:	0800ab64 	.word	0x0800ab64
 8003d60:	20000188 	.word	0x20000188

08003d64 <LCD_show_sensor>:
/*
 * @brief:	show sensor value to screen
 * @para:	none
 * @retval:	none
 * */
void LCD_show_sensor(){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	ed2d 8b02 	vpush	{d8}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af04      	add	r7, sp, #16
	lcd_ShowStr(10, 100, "Voltage(V):", WHITE, BLACK, 16, 0);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	9302      	str	r3, [sp, #8]
 8003d72:	2310      	movs	r3, #16
 8003d74:	9301      	str	r3, [sp, #4]
 8003d76:	2300      	movs	r3, #0
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d7e:	4a77      	ldr	r2, [pc, #476]	; (8003f5c <LCD_show_sensor+0x1f8>)
 8003d80:	2164      	movs	r1, #100	; 0x64
 8003d82:	200a      	movs	r0, #10
 8003d84:	f7fe fa3e 	bl	8002204 <lcd_ShowStr>
	lcd_ShowFloatNum(130, 100, sensor_GetVoltage(), 4, WHITE, BLACK, 16);
 8003d88:	f7ff fcde 	bl	8003748 <sensor_GetVoltage>
 8003d8c:	eef0 7a40 	vmov.f32	s15, s0
 8003d90:	2310      	movs	r3, #16
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	2300      	movs	r3, #0
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003da2:	2164      	movs	r1, #100	; 0x64
 8003da4:	2082      	movs	r0, #130	; 0x82
 8003da6:	f7fe f821 	bl	8001dec <lcd_ShowFloatNum>

	lcd_ShowStr(10, 120, "Current(mA):", WHITE, BLACK, 16, 0);
 8003daa:	2300      	movs	r3, #0
 8003dac:	9302      	str	r3, [sp, #8]
 8003dae:	2310      	movs	r3, #16
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	2300      	movs	r3, #0
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dba:	4a69      	ldr	r2, [pc, #420]	; (8003f60 <LCD_show_sensor+0x1fc>)
 8003dbc:	2178      	movs	r1, #120	; 0x78
 8003dbe:	200a      	movs	r0, #10
 8003dc0:	f7fe fa20 	bl	8002204 <lcd_ShowStr>
	lcd_ShowFloatNum(130, 120, sensor_GetCurrent(), 4, WHITE, BLACK, 16);
 8003dc4:	f7ff fcfc 	bl	80037c0 <sensor_GetCurrent>
 8003dc8:	eef0 7a40 	vmov.f32	s15, s0
 8003dcc:	2310      	movs	r3, #16
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dd8:	2204      	movs	r2, #4
 8003dda:	eeb0 0a67 	vmov.f32	s0, s15
 8003dde:	2178      	movs	r1, #120	; 0x78
 8003de0:	2082      	movs	r0, #130	; 0x82
 8003de2:	f7fe f803 	bl	8001dec <lcd_ShowFloatNum>

	lcd_ShowStr(10, 140, "Power(mW):", WHITE, BLACK, 16, 0);
 8003de6:	2300      	movs	r3, #0
 8003de8:	9302      	str	r3, [sp, #8]
 8003dea:	2310      	movs	r3, #16
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	2300      	movs	r3, #0
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003df6:	4a5b      	ldr	r2, [pc, #364]	; (8003f64 <LCD_show_sensor+0x200>)
 8003df8:	218c      	movs	r1, #140	; 0x8c
 8003dfa:	200a      	movs	r0, #10
 8003dfc:	f7fe fa02 	bl	8002204 <lcd_ShowStr>
	lcd_ShowFloatNum(130, 140, sensor_GetCurrent() * sensor_GetVoltage(), 5, WHITE, BLACK, 16);
 8003e00:	f7ff fcde 	bl	80037c0 <sensor_GetCurrent>
 8003e04:	eeb0 8a40 	vmov.f32	s16, s0
 8003e08:	f7ff fc9e 	bl	8003748 <sensor_GetVoltage>
 8003e0c:	eef0 7a40 	vmov.f32	s15, s0
 8003e10:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e14:	2310      	movs	r3, #16
 8003e16:	9301      	str	r3, [sp, #4]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e20:	2205      	movs	r2, #5
 8003e22:	eeb0 0a67 	vmov.f32	s0, s15
 8003e26:	218c      	movs	r1, #140	; 0x8c
 8003e28:	2082      	movs	r0, #130	; 0x82
 8003e2a:	f7fd ffdf 	bl	8001dec <lcd_ShowFloatNum>

	lcd_ShowStr(10, 160, "Light:", WHITE, BLACK, 16, 0);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	9302      	str	r3, [sp, #8]
 8003e32:	2310      	movs	r3, #16
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	2300      	movs	r3, #0
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e3e:	4a4a      	ldr	r2, [pc, #296]	; (8003f68 <LCD_show_sensor+0x204>)
 8003e40:	21a0      	movs	r1, #160	; 0xa0
 8003e42:	200a      	movs	r0, #10
 8003e44:	f7fe f9de 	bl	8002204 <lcd_ShowStr>
	if(sensor_GetLight() <= 4095*0.75){
 8003e48:	f7ff fc64 	bl	8003714 <sensor_GetLight>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e52:	d20d      	bcs.n	8003e70 <LCD_show_sensor+0x10c>
			lcd_ShowStr(60, 160, "(Strong)", WHITE, BLACK, 16, 0);
 8003e54:	2300      	movs	r3, #0
 8003e56:	9302      	str	r3, [sp, #8]
 8003e58:	2310      	movs	r3, #16
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e64:	4a41      	ldr	r2, [pc, #260]	; (8003f6c <LCD_show_sensor+0x208>)
 8003e66:	21a0      	movs	r1, #160	; 0xa0
 8003e68:	203c      	movs	r0, #60	; 0x3c
 8003e6a:	f7fe f9cb 	bl	8002204 <lcd_ShowStr>
 8003e6e:	e00c      	b.n	8003e8a <LCD_show_sensor+0x126>
		}
		else{
			lcd_ShowStr(60, 160, "(Weak)  ", WHITE, BLACK, 16, 0);
 8003e70:	2300      	movs	r3, #0
 8003e72:	9302      	str	r3, [sp, #8]
 8003e74:	2310      	movs	r3, #16
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e80:	4a3b      	ldr	r2, [pc, #236]	; (8003f70 <LCD_show_sensor+0x20c>)
 8003e82:	21a0      	movs	r1, #160	; 0xa0
 8003e84:	203c      	movs	r0, #60	; 0x3c
 8003e86:	f7fe f9bd 	bl	8002204 <lcd_ShowStr>
		}
	lcd_ShowIntNum(130, 160, sensor_GetLight(), 4, WHITE, BLACK, 16);
 8003e8a:	f7ff fc43 	bl	8003714 <sensor_GetLight>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	461a      	mov	r2, r3
 8003e92:	2310      	movs	r3, #16
 8003e94:	9302      	str	r3, [sp, #8]
 8003e96:	2300      	movs	r3, #0
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	21a0      	movs	r1, #160	; 0xa0
 8003ea4:	2082      	movs	r0, #130	; 0x82
 8003ea6:	f7fd ff23 	bl	8001cf0 <lcd_ShowIntNum>


	lcd_ShowStr(10, 180, "Poten(Ohm):", WHITE, BLACK, 16, 0);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	9302      	str	r3, [sp, #8]
 8003eae:	2310      	movs	r3, #16
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eba:	4a2e      	ldr	r2, [pc, #184]	; (8003f74 <LCD_show_sensor+0x210>)
 8003ebc:	21b4      	movs	r1, #180	; 0xb4
 8003ebe:	200a      	movs	r0, #10
 8003ec0:	f7fe f9a0 	bl	8002204 <lcd_ShowStr>
	lcd_ShowIntNum(130, 180, sensor_GetPotentiometer()*100/4095, 2, WHITE, BLACK, 16);
 8003ec4:	f7ff fc32 	bl	800372c <sensor_GetPotentiometer>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2364      	movs	r3, #100	; 0x64
 8003ece:	fb03 f302 	mul.w	r3, r3, r2
 8003ed2:	4a29      	ldr	r2, [pc, #164]	; (8003f78 <LCD_show_sensor+0x214>)
 8003ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8003ed8:	441a      	add	r2, r3
 8003eda:	12d2      	asrs	r2, r2, #11
 8003edc:	17db      	asrs	r3, r3, #31
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	2310      	movs	r3, #16
 8003ee4:	9302      	str	r3, [sp, #8]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	21b4      	movs	r1, #180	; 0xb4
 8003ef4:	2082      	movs	r0, #130	; 0x82
 8003ef6:	f7fd fefb 	bl	8001cf0 <lcd_ShowIntNum>
	lcd_ShowStr(180, 180, "%", WHITE, BLACK, 16, 0);
 8003efa:	2300      	movs	r3, #0
 8003efc:	9302      	str	r3, [sp, #8]
 8003efe:	2310      	movs	r3, #16
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	2300      	movs	r3, #0
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f0a:	4a1c      	ldr	r2, [pc, #112]	; (8003f7c <LCD_show_sensor+0x218>)
 8003f0c:	21b4      	movs	r1, #180	; 0xb4
 8003f0e:	20b4      	movs	r0, #180	; 0xb4
 8003f10:	f7fe f978 	bl	8002204 <lcd_ShowStr>

	lcd_ShowStr (10, 200, "Temp(C):", WHITE, BLACK, 16, 0);
 8003f14:	2300      	movs	r3, #0
 8003f16:	9302      	str	r3, [sp, #8]
 8003f18:	2310      	movs	r3, #16
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f24:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <LCD_show_sensor+0x21c>)
 8003f26:	21c8      	movs	r1, #200	; 0xc8
 8003f28:	200a      	movs	r0, #10
 8003f2a:	f7fe f96b 	bl	8002204 <lcd_ShowStr>
	lcd_ShowFloatNum (130, 200, sensor_GetTemperature(), 4, WHITE, BLACK, 16);
 8003f2e:	f7ff fca3 	bl	8003878 <sensor_GetTemperature>
 8003f32:	eef0 7a40 	vmov.f32	s15, s0
 8003f36:	2310      	movs	r3, #16
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f42:	2204      	movs	r2, #4
 8003f44:	eeb0 0a67 	vmov.f32	s0, s15
 8003f48:	21c8      	movs	r1, #200	; 0xc8
 8003f4a:	2082      	movs	r0, #130	; 0x82
 8003f4c:	f7fd ff4e 	bl	8001dec <lcd_ShowFloatNum>
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	ecbd 8b02 	vpop	{d8}
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	0800ab84 	.word	0x0800ab84
 8003f60:	0800ab90 	.word	0x0800ab90
 8003f64:	0800aba0 	.word	0x0800aba0
 8003f68:	0800abac 	.word	0x0800abac
 8003f6c:	0800abb4 	.word	0x0800abb4
 8003f70:	0800abc0 	.word	0x0800abc0
 8003f74:	0800abcc 	.word	0x0800abcc
 8003f78:	80080081 	.word	0x80080081
 8003f7c:	0800abd8 	.word	0x0800abd8
 8003f80:	0800abdc 	.word	0x0800abdc

08003f84 <uart_test>:


void uart_test(){
 8003f84:	b580      	push	{r7, lr}
 8003f86:	ed2d 8b02 	vpush	{d8}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
	if(!is_timer_on(5)){
 8003f8e:	2005      	movs	r0, #5
 8003f90:	f7ff fcf8 	bl	8003984 <is_timer_on>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d177      	bne.n	800408a <uart_test+0x106>
			  set_timer(5, ONE_SECOND*5);
 8003f9a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003f9e:	2005      	movs	r0, #5
 8003fa0:	f7ff fc92 	bl	80038c8 <set_timer>
			  uart_Rs232SendString("Voltage: ");
 8003fa4:	483c      	ldr	r0, [pc, #240]	; (8004098 <uart_test+0x114>)
 8003fa6:	f000 faaf 	bl	8004508 <uart_Rs232SendString>
			  int t = sensor_GetVoltage();
 8003faa:	f7ff fbcd 	bl	8003748 <sensor_GetVoltage>
 8003fae:	eef0 7a40 	vmov.f32	s15, s0
 8003fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fb6:	ee17 3a90 	vmov	r3, s15
 8003fba:	607b      	str	r3, [r7, #4]
			  uart_Rs232SendNum(t);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fabd 	bl	800453c <uart_Rs232SendNum>
			  uart_Rs232SendString("\n");
 8003fc2:	4836      	ldr	r0, [pc, #216]	; (800409c <uart_test+0x118>)
 8003fc4:	f000 faa0 	bl	8004508 <uart_Rs232SendString>

			  uart_Rs232SendString("Current: ");
 8003fc8:	4835      	ldr	r0, [pc, #212]	; (80040a0 <uart_test+0x11c>)
 8003fca:	f000 fa9d 	bl	8004508 <uart_Rs232SendString>
			  t = sensor_GetCurrent();
 8003fce:	f7ff fbf7 	bl	80037c0 <sensor_GetCurrent>
 8003fd2:	eef0 7a40 	vmov.f32	s15, s0
 8003fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fda:	ee17 3a90 	vmov	r3, s15
 8003fde:	607b      	str	r3, [r7, #4]
			  uart_Rs232SendNum(t);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 faab 	bl	800453c <uart_Rs232SendNum>
			  uart_Rs232SendString("\n");
 8003fe6:	482d      	ldr	r0, [pc, #180]	; (800409c <uart_test+0x118>)
 8003fe8:	f000 fa8e 	bl	8004508 <uart_Rs232SendString>

			  uart_Rs232SendString("Power: ");
 8003fec:	482d      	ldr	r0, [pc, #180]	; (80040a4 <uart_test+0x120>)
 8003fee:	f000 fa8b 	bl	8004508 <uart_Rs232SendString>
			  t = sensor_GetCurrent() * sensor_GetVoltage();
 8003ff2:	f7ff fbe5 	bl	80037c0 <sensor_GetCurrent>
 8003ff6:	eeb0 8a40 	vmov.f32	s16, s0
 8003ffa:	f7ff fba5 	bl	8003748 <sensor_GetVoltage>
 8003ffe:	eef0 7a40 	vmov.f32	s15, s0
 8004002:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800400a:	ee17 3a90 	vmov	r3, s15
 800400e:	607b      	str	r3, [r7, #4]
			  uart_Rs232SendNum(t);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fa93 	bl	800453c <uart_Rs232SendNum>
			  uart_Rs232SendString("\n");
 8004016:	4821      	ldr	r0, [pc, #132]	; (800409c <uart_test+0x118>)
 8004018:	f000 fa76 	bl	8004508 <uart_Rs232SendString>

			  uart_Rs232SendString("Light: ");
 800401c:	4822      	ldr	r0, [pc, #136]	; (80040a8 <uart_test+0x124>)
 800401e:	f000 fa73 	bl	8004508 <uart_Rs232SendString>
			  t = sensor_GetLight();
 8004022:	f7ff fb77 	bl	8003714 <sensor_GetLight>
 8004026:	4603      	mov	r3, r0
 8004028:	607b      	str	r3, [r7, #4]
			  uart_Rs232SendNum(t);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fa86 	bl	800453c <uart_Rs232SendNum>
			  uart_Rs232SendString("\n");
 8004030:	481a      	ldr	r0, [pc, #104]	; (800409c <uart_test+0x118>)
 8004032:	f000 fa69 	bl	8004508 <uart_Rs232SendString>

			  uart_Rs232SendString("Poter: ");
 8004036:	481d      	ldr	r0, [pc, #116]	; (80040ac <uart_test+0x128>)
 8004038:	f000 fa66 	bl	8004508 <uart_Rs232SendString>
			  t = sensor_GetPotentiometer()*100/4095;
 800403c:	f7ff fb76 	bl	800372c <sensor_GetPotentiometer>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	2364      	movs	r3, #100	; 0x64
 8004046:	fb03 f302 	mul.w	r3, r3, r2
 800404a:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <uart_test+0x12c>)
 800404c:	fb82 1203 	smull	r1, r2, r2, r3
 8004050:	441a      	add	r2, r3
 8004052:	12d2      	asrs	r2, r2, #11
 8004054:	17db      	asrs	r3, r3, #31
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	607b      	str	r3, [r7, #4]
			  uart_Rs232SendNum(t);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa6e 	bl	800453c <uart_Rs232SendNum>
			  uart_Rs232SendString("\n");
 8004060:	480e      	ldr	r0, [pc, #56]	; (800409c <uart_test+0x118>)
 8004062:	f000 fa51 	bl	8004508 <uart_Rs232SendString>

			  uart_Rs232SendString("Temperature: ");
 8004066:	4813      	ldr	r0, [pc, #76]	; (80040b4 <uart_test+0x130>)
 8004068:	f000 fa4e 	bl	8004508 <uart_Rs232SendString>
			  t = sensor_GetTemperature();
 800406c:	f7ff fc04 	bl	8003878 <sensor_GetTemperature>
 8004070:	eef0 7a40 	vmov.f32	s15, s0
 8004074:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004078:	ee17 3a90 	vmov	r3, s15
 800407c:	607b      	str	r3, [r7, #4]
			  uart_Rs232SendNum(t);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa5c 	bl	800453c <uart_Rs232SendNum>
			  uart_Rs232SendString("\n");
 8004084:	4805      	ldr	r0, [pc, #20]	; (800409c <uart_test+0x118>)
 8004086:	f000 fa3f 	bl	8004508 <uart_Rs232SendString>
		  }
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	ecbd 8b02 	vpop	{d8}
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	0800abe8 	.word	0x0800abe8
 800409c:	0800abf4 	.word	0x0800abf4
 80040a0:	0800abf8 	.word	0x0800abf8
 80040a4:	0800ac04 	.word	0x0800ac04
 80040a8:	0800ac0c 	.word	0x0800ac0c
 80040ac:	0800ac14 	.word	0x0800ac14
 80040b0:	80080081 	.word	0x80080081
 80040b4:	0800ac1c 	.word	0x0800ac1c

080040b8 <drawGraph>:


void drawGraph() {
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b08b      	sub	sp, #44	; 0x2c
 80040bc:	af04      	add	r7, sp, #16
    // Xóa vùng biểu đồ
    lcd_Fill(GRAPH_X_START, GRAPH_Y_START, GRAPH_X_START + GRAPH_WIDTH, GRAPH_Y_START + GRAPH_HEIGHT, BACKGROUND_COLOR);
 80040be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80040c8:	22dc      	movs	r2, #220	; 0xdc
 80040ca:	21f0      	movs	r1, #240	; 0xf0
 80040cc:	2014      	movs	r0, #20
 80040ce:	f7fd fc1b 	bl	8001908 <lcd_Fill>

    // Vẽ khung biểu đồ
    lcd_DrawRectangle(GRAPH_X_START, GRAPH_Y_START, GRAPH_X_START + GRAPH_WIDTH, GRAPH_Y_START + GRAPH_HEIGHT, LINE_COLOR);
 80040d2:	231f      	movs	r3, #31
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80040da:	22dc      	movs	r2, #220	; 0xdc
 80040dc:	21f0      	movs	r1, #240	; 0xf0
 80040de:	2014      	movs	r0, #20
 80040e0:	f7fd fce3 	bl	8001aaa <lcd_DrawRectangle>

    // Vẽ các điểm trên biểu đồ
    for (uint8_t i = 0; i < numPoints - 1; i++) {
 80040e4:	2300      	movs	r3, #0
 80040e6:	75fb      	strb	r3, [r7, #23]
 80040e8:	e04b      	b.n	8004182 <drawGraph+0xca>
        uint16_t x1 = GRAPH_X_START + (i * GRAPH_WIDTH) / MAX_POINTS;
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	0092      	lsls	r2, r2, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3314      	adds	r3, #20
 80040fa:	82bb      	strh	r3, [r7, #20]
        uint16_t y1 = GRAPH_Y_START + GRAPH_HEIGHT - (currentValues[i] * GRAPH_HEIGHT) / (4096 * 20) ; // Chuẩn hóa giá trị
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	4a34      	ldr	r2, [pc, #208]	; (80041d0 <drawGraph+0x118>)
 8004100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004104:	461a      	mov	r2, r3
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4a31      	ldr	r2, [pc, #196]	; (80041d4 <drawGraph+0x11c>)
 8004110:	fb82 1203 	smull	r1, r2, r2, r3
 8004114:	13d2      	asrs	r2, r2, #15
 8004116:	17db      	asrs	r3, r3, #31
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	b29b      	uxth	r3, r3
 800411c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8004120:	827b      	strh	r3, [r7, #18]
        uint16_t x2 = GRAPH_X_START + ((i + 1) * GRAPH_WIDTH) / MAX_POINTS;
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	3301      	adds	r3, #1
 8004126:	b29b      	uxth	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	0092      	lsls	r2, r2, #2
 800412c:	4413      	add	r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	b29b      	uxth	r3, r3
 8004132:	3314      	adds	r3, #20
 8004134:	823b      	strh	r3, [r7, #16]
        uint16_t y2 = GRAPH_Y_START + GRAPH_HEIGHT - (currentValues[i + 1] * GRAPH_HEIGHT) / (4096 * 20);
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	3301      	adds	r3, #1
 800413a:	4a25      	ldr	r2, [pc, #148]	; (80041d0 <drawGraph+0x118>)
 800413c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004140:	461a      	mov	r2, r3
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4a22      	ldr	r2, [pc, #136]	; (80041d4 <drawGraph+0x11c>)
 800414c:	fb82 1203 	smull	r1, r2, r2, r3
 8004150:	13d2      	asrs	r2, r2, #15
 8004152:	17db      	asrs	r3, r3, #31
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	b29b      	uxth	r3, r3
 8004158:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800415c:	81fb      	strh	r3, [r7, #14]

        lcd_DrawLine(x1, y1, x2, y2, LINE_COLOR); // Vẽ đường nối giữa 2 điểm
 800415e:	89fb      	ldrh	r3, [r7, #14]
 8004160:	8a3a      	ldrh	r2, [r7, #16]
 8004162:	8a79      	ldrh	r1, [r7, #18]
 8004164:	8ab8      	ldrh	r0, [r7, #20]
 8004166:	241f      	movs	r4, #31
 8004168:	9400      	str	r4, [sp, #0]
 800416a:	f7fd fc1a 	bl	80019a2 <lcd_DrawLine>
        lcd_DrawPoint(x1, y1, POINT_COLOR);      // Hiển thị điểm
 800416e:	8a79      	ldrh	r1, [r7, #18]
 8004170:	8abb      	ldrh	r3, [r7, #20]
 8004172:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004176:	4618      	mov	r0, r3
 8004178:	f7fd fbfc 	bl	8001974 <lcd_DrawPoint>
    for (uint8_t i = 0; i < numPoints - 1; i++) {
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	3301      	adds	r3, #1
 8004180:	75fb      	strb	r3, [r7, #23]
 8004182:	7dfa      	ldrb	r2, [r7, #23]
 8004184:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <drawGraph+0x120>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	3b01      	subs	r3, #1
 800418a:	429a      	cmp	r2, r3
 800418c:	dbad      	blt.n	80040ea <drawGraph+0x32>
    }

    // Hiển thị giá trị tại điểm cuối cùng
    if (numPoints > 0) {
 800418e:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <drawGraph+0x120>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d018      	beq.n	80041c8 <drawGraph+0x110>
        char str[10];
        sprintf(str, "%d mA", currentValues[numPoints - 1]); // Giá trị cuối cùng
 8004196:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <drawGraph+0x120>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	3b01      	subs	r3, #1
 800419c:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <drawGraph+0x118>)
 800419e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041a2:	461a      	mov	r2, r3
 80041a4:	1d3b      	adds	r3, r7, #4
 80041a6:	490d      	ldr	r1, [pc, #52]	; (80041dc <drawGraph+0x124>)
 80041a8:	4618      	mov	r0, r3
 80041aa:	f006 f879 	bl	800a2a0 <siprintf>
        lcd_ShowStr(GRAPH_X_START + GRAPH_WIDTH + 10, GRAPH_Y_START + 10, str, LINE_COLOR, BACKGROUND_COLOR, 12, 1);
 80041ae:	1d3a      	adds	r2, r7, #4
 80041b0:	2301      	movs	r3, #1
 80041b2:	9302      	str	r3, [sp, #8]
 80041b4:	230c      	movs	r3, #12
 80041b6:	9301      	str	r3, [sp, #4]
 80041b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	231f      	movs	r3, #31
 80041c0:	21fa      	movs	r1, #250	; 0xfa
 80041c2:	20e6      	movs	r0, #230	; 0xe6
 80041c4:	f7fe f81e 	bl	8002204 <lcd_ShowStr>
    }
}
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd90      	pop	{r4, r7, pc}
 80041d0:	20000368 	.word	0x20000368
 80041d4:	66666667 	.word	0x66666667
 80041d8:	200000cc 	.word	0x200000cc
 80041dc:	0800ac2c 	.word	0x0800ac2c

080041e0 <updateGraph>:

void updateGraph() {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	ed2d 8b02 	vpush	{d8}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
    // Đọc giá trị dòng điện
    uint16_t power = sensor_GetCurrent()*sensor_GetVoltage();
 80041ea:	f7ff fae9 	bl	80037c0 <sensor_GetCurrent>
 80041ee:	eeb0 8a40 	vmov.f32	s16, s0
 80041f2:	f7ff faa9 	bl	8003748 <sensor_GetVoltage>
 80041f6:	eef0 7a40 	vmov.f32	s15, s0
 80041fa:	ee68 7a27 	vmul.f32	s15, s16, s15
 80041fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004202:	ee17 3a90 	vmov	r3, s15
 8004206:	80bb      	strh	r3, [r7, #4]

    // Lưu giá trị vào mảng
    if (numPoints < MAX_POINTS) {
 8004208:	4b16      	ldr	r3, [pc, #88]	; (8004264 <updateGraph+0x84>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b13      	cmp	r3, #19
 800420e:	d80b      	bhi.n	8004228 <updateGraph+0x48>
        currentValues[numPoints++] = power;
 8004210:	4b14      	ldr	r3, [pc, #80]	; (8004264 <updateGraph+0x84>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	b2d1      	uxtb	r1, r2
 8004218:	4a12      	ldr	r2, [pc, #72]	; (8004264 <updateGraph+0x84>)
 800421a:	7011      	strb	r1, [r2, #0]
 800421c:	4619      	mov	r1, r3
 800421e:	4a12      	ldr	r2, [pc, #72]	; (8004268 <updateGraph+0x88>)
 8004220:	88bb      	ldrh	r3, [r7, #4]
 8004222:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8004226:	e014      	b.n	8004252 <updateGraph+0x72>
    } else {
        // Nếu đầy, dịch các giá trị sang trái
        for (uint8_t i = 1; i < MAX_POINTS; i++) {
 8004228:	2301      	movs	r3, #1
 800422a:	71fb      	strb	r3, [r7, #7]
 800422c:	e00b      	b.n	8004246 <updateGraph+0x66>
            currentValues[i - 1] = currentValues[i];
 800422e:	79fa      	ldrb	r2, [r7, #7]
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	3b01      	subs	r3, #1
 8004234:	490c      	ldr	r1, [pc, #48]	; (8004268 <updateGraph+0x88>)
 8004236:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800423a:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <updateGraph+0x88>)
 800423c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t i = 1; i < MAX_POINTS; i++) {
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	3301      	adds	r3, #1
 8004244:	71fb      	strb	r3, [r7, #7]
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	2b13      	cmp	r3, #19
 800424a:	d9f0      	bls.n	800422e <updateGraph+0x4e>
        }
        currentValues[MAX_POINTS - 1] = power;
 800424c:	4a06      	ldr	r2, [pc, #24]	; (8004268 <updateGraph+0x88>)
 800424e:	88bb      	ldrh	r3, [r7, #4]
 8004250:	84d3      	strh	r3, [r2, #38]	; 0x26
    }

    // Vẽ lại biểu đồ
    drawGraph();
 8004252:	f7ff ff31 	bl	80040b8 <drawGraph>
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	ecbd 8b02 	vpop	{d8}
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	200000cc 	.word	0x200000cc
 8004268:	20000368 	.word	0x20000368

0800426c <system_loop>:


void system_loop(void) {
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
	sensor_diplay();
 8004270:	f7ff fcc2 	bl	8003bf8 <sensor_diplay>
	fsm_clock();
 8004274:	f7fe f9e2 	bl	800263c <fsm_clock>
	if(uart_print == 0) uart_test();
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <system_loop+0x38>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <system_loop+0x18>
 8004280:	f7ff fe80 	bl	8003f84 <uart_test>
	if(!is_timer_on(6)){
 8004284:	2006      	movs	r0, #6
 8004286:	f7ff fb7d 	bl	8003984 <is_timer_on>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <system_loop+0x32>
		set_timer(6, 3000);
 8004290:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004294:	2006      	movs	r0, #6
 8004296:	f7ff fb17 	bl	80038c8 <set_timer>
		updateGraph();
 800429a:	f7ff ffa1 	bl	80041e0 <updateGraph>
	}

}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	200000d0 	.word	0x200000d0

080042a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <SystemInit+0x20>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	4a05      	ldr	r2, [pc, #20]	; (80042c8 <SystemInit+0x20>)
 80042b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042bc:	bf00      	nop
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042d2:	f107 0308 	add.w	r3, r7, #8
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	609a      	str	r2, [r3, #8]
 80042de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042e0:	463b      	mov	r3, r7
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80042e8:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <MX_TIM2_Init+0x94>)
 80042ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <MX_TIM2_Init+0x94>)
 80042f2:	f240 3247 	movw	r2, #839	; 0x347
 80042f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f8:	4b19      	ldr	r3, [pc, #100]	; (8004360 <MX_TIM2_Init+0x94>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80042fe:	4b18      	ldr	r3, [pc, #96]	; (8004360 <MX_TIM2_Init+0x94>)
 8004300:	2263      	movs	r2, #99	; 0x63
 8004302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004304:	4b16      	ldr	r3, [pc, #88]	; (8004360 <MX_TIM2_Init+0x94>)
 8004306:	2200      	movs	r2, #0
 8004308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800430a:	4b15      	ldr	r3, [pc, #84]	; (8004360 <MX_TIM2_Init+0x94>)
 800430c:	2200      	movs	r2, #0
 800430e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004310:	4813      	ldr	r0, [pc, #76]	; (8004360 <MX_TIM2_Init+0x94>)
 8004312:	f003 febf 	bl	8008094 <HAL_TIM_Base_Init>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800431c:	f7fe f982 	bl	8002624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004324:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004326:	f107 0308 	add.w	r3, r7, #8
 800432a:	4619      	mov	r1, r3
 800432c:	480c      	ldr	r0, [pc, #48]	; (8004360 <MX_TIM2_Init+0x94>)
 800432e:	f004 fa5d 	bl	80087ec <HAL_TIM_ConfigClockSource>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004338:	f7fe f974 	bl	8002624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800433c:	2300      	movs	r3, #0
 800433e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004340:	2300      	movs	r3, #0
 8004342:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004344:	463b      	mov	r3, r7
 8004346:	4619      	mov	r1, r3
 8004348:	4805      	ldr	r0, [pc, #20]	; (8004360 <MX_TIM2_Init+0x94>)
 800434a:	f004 fe4f 	bl	8008fec <HAL_TIMEx_MasterConfigSynchronization>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004354:	f7fe f966 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004358:	bf00      	nop
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200003d8 	.word	0x200003d8

08004364 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	611a      	str	r2, [r3, #16]
 8004378:	615a      	str	r2, [r3, #20]
 800437a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800437c:	4b1e      	ldr	r3, [pc, #120]	; (80043f8 <MX_TIM13_Init+0x94>)
 800437e:	4a1f      	ldr	r2, [pc, #124]	; (80043fc <MX_TIM13_Init+0x98>)
 8004380:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8004382:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <MX_TIM13_Init+0x94>)
 8004384:	f240 3247 	movw	r2, #839	; 0x347
 8004388:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800438a:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <MX_TIM13_Init+0x94>)
 800438c:	2200      	movs	r2, #0
 800438e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8004390:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <MX_TIM13_Init+0x94>)
 8004392:	2263      	movs	r2, #99	; 0x63
 8004394:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004396:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <MX_TIM13_Init+0x94>)
 8004398:	2200      	movs	r2, #0
 800439a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800439c:	4b16      	ldr	r3, [pc, #88]	; (80043f8 <MX_TIM13_Init+0x94>)
 800439e:	2200      	movs	r2, #0
 80043a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80043a2:	4815      	ldr	r0, [pc, #84]	; (80043f8 <MX_TIM13_Init+0x94>)
 80043a4:	f003 fe76 	bl	8008094 <HAL_TIM_Base_Init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80043ae:	f7fe f939 	bl	8002624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80043b2:	4811      	ldr	r0, [pc, #68]	; (80043f8 <MX_TIM13_Init+0x94>)
 80043b4:	f003 ff2e 	bl	8008214 <HAL_TIM_PWM_Init>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80043be:	f7fe f931 	bl	8002624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043c2:	2360      	movs	r3, #96	; 0x60
 80043c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043d2:	1d3b      	adds	r3, r7, #4
 80043d4:	2200      	movs	r2, #0
 80043d6:	4619      	mov	r1, r3
 80043d8:	4807      	ldr	r0, [pc, #28]	; (80043f8 <MX_TIM13_Init+0x94>)
 80043da:	f004 f945 	bl	8008668 <HAL_TIM_PWM_ConfigChannel>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80043e4:	f7fe f91e 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80043e8:	4803      	ldr	r0, [pc, #12]	; (80043f8 <MX_TIM13_Init+0x94>)
 80043ea:	f000 f845 	bl	8004478 <HAL_TIM_MspPostInit>

}
 80043ee:	bf00      	nop
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000390 	.word	0x20000390
 80043fc:	40001c00 	.word	0x40001c00

08004400 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004410:	d116      	bne.n	8004440 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	4b16      	ldr	r3, [pc, #88]	; (8004470 <HAL_TIM_Base_MspInit+0x70>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	4a15      	ldr	r2, [pc, #84]	; (8004470 <HAL_TIM_Base_MspInit+0x70>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6413      	str	r3, [r2, #64]	; 0x40
 8004422:	4b13      	ldr	r3, [pc, #76]	; (8004470 <HAL_TIM_Base_MspInit+0x70>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800442e:	2200      	movs	r2, #0
 8004430:	2100      	movs	r1, #0
 8004432:	201c      	movs	r0, #28
 8004434:	f000 ff5b 	bl	80052ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004438:	201c      	movs	r0, #28
 800443a:	f000 ff74 	bl	8005326 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800443e:	e012      	b.n	8004466 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a0b      	ldr	r2, [pc, #44]	; (8004474 <HAL_TIM_Base_MspInit+0x74>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d10d      	bne.n	8004466 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	4b08      	ldr	r3, [pc, #32]	; (8004470 <HAL_TIM_Base_MspInit+0x70>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	4a07      	ldr	r2, [pc, #28]	; (8004470 <HAL_TIM_Base_MspInit+0x70>)
 8004454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004458:	6413      	str	r3, [r2, #64]	; 0x40
 800445a:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_TIM_Base_MspInit+0x70>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
}
 8004466:	bf00      	nop
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800
 8004474:	40001c00 	.word	0x40001c00

08004478 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <HAL_TIM_MspPostInit+0x68>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d11e      	bne.n	80044d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <HAL_TIM_MspPostInit+0x6c>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	4a10      	ldr	r2, [pc, #64]	; (80044e4 <HAL_TIM_MspPostInit+0x6c>)
 80044a4:	f043 0320 	orr.w	r3, r3, #32
 80044a8:	6313      	str	r3, [r2, #48]	; 0x30
 80044aa:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <HAL_TIM_MspPostInit+0x6c>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80044b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044bc:	2302      	movs	r3, #2
 80044be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80044c8:	2309      	movs	r3, #9
 80044ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044cc:	f107 030c 	add.w	r3, r7, #12
 80044d0:	4619      	mov	r1, r3
 80044d2:	4805      	ldr	r0, [pc, #20]	; (80044e8 <HAL_TIM_MspPostInit+0x70>)
 80044d4:	f001 fb44 	bl	8005b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80044d8:	bf00      	nop
 80044da:	3720      	adds	r7, #32
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40001c00 	.word	0x40001c00
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40021400 	.word	0x40021400

080044ec <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80044f0:	2201      	movs	r2, #1
 80044f2:	4903      	ldr	r1, [pc, #12]	; (8004500 <uart_init_rs232+0x14>)
 80044f4:	4803      	ldr	r0, [pc, #12]	; (8004504 <uart_init_rs232+0x18>)
 80044f6:	f004 fee8 	bl	80092ca <HAL_UART_Receive_IT>
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	200000d4 	.word	0x200000d4
 8004504:	20000484 	.word	0x20000484

08004508 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4907      	ldr	r1, [pc, #28]	; (8004530 <uart_Rs232SendString+0x28>)
 8004514:	4807      	ldr	r0, [pc, #28]	; (8004534 <uart_Rs232SendString+0x2c>)
 8004516:	f005 fec3 	bl	800a2a0 <siprintf>
 800451a:	4603      	mov	r3, r0
 800451c:	b29a      	uxth	r2, r3
 800451e:	230a      	movs	r3, #10
 8004520:	4904      	ldr	r1, [pc, #16]	; (8004534 <uart_Rs232SendString+0x2c>)
 8004522:	4805      	ldr	r0, [pc, #20]	; (8004538 <uart_Rs232SendString+0x30>)
 8004524:	f004 fe3f 	bl	80091a6 <HAL_UART_Transmit>
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	0800ac34 	.word	0x0800ac34
 8004534:	20000420 	.word	0x20000420
 8004538:	20000484 	.word	0x20000484

0800453c <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d103      	bne.n	8004552 <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 800454a:	4824      	ldr	r0, [pc, #144]	; (80045dc <uart_Rs232SendNum+0xa0>)
 800454c:	f7ff ffdc 	bl	8004508 <uart_Rs232SendString>
		return;
 8004550:	e040      	b.n	80045d4 <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 8004552:	2300      	movs	r3, #0
 8004554:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 8004556:	230a      	movs	r3, #10
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	e038      	b.n	80045ce <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	3b01      	subs	r3, #1
 8004560:	4619      	mov	r1, r3
 8004562:	200a      	movs	r0, #10
 8004564:	f7fd fba8 	bl	8001cb8 <mypow>
 8004568:	4603      	mov	r3, r0
 800456a:	461a      	mov	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4293      	cmp	r3, r2
 8004570:	d315      	bcc.n	800459e <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3b01      	subs	r3, #1
 800457a:	4619      	mov	r1, r3
 800457c:	200a      	movs	r0, #10
 800457e:	f7fd fb9b 	bl	8001cb8 <mypow>
 8004582:	4603      	mov	r3, r0
 8004584:	461a      	mov	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	fbb3 f3f2 	udiv	r3, r3, r2
 800458c:	461a      	mov	r2, r3
 800458e:	4914      	ldr	r1, [pc, #80]	; (80045e0 <uart_Rs232SendNum+0xa4>)
 8004590:	4814      	ldr	r0, [pc, #80]	; (80045e4 <uart_Rs232SendNum+0xa8>)
 8004592:	f005 fe85 	bl	800a2a0 <siprintf>
            uart_Rs232SendString(msg);
 8004596:	4813      	ldr	r0, [pc, #76]	; (80045e4 <uart_Rs232SendNum+0xa8>)
 8004598:	f7ff ffb6 	bl	8004508 <uart_Rs232SendString>
 800459c:	e005      	b.n	80045aa <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 80045a4:	480d      	ldr	r0, [pc, #52]	; (80045dc <uart_Rs232SendNum+0xa0>)
 80045a6:	f7ff ffaf 	bl	8004508 <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	4619      	mov	r1, r3
 80045b0:	200a      	movs	r0, #10
 80045b2:	f7fd fb81 	bl	8001cb8 <mypow>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80045c0:	fb02 f201 	mul.w	r2, r2, r1
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	dcc3      	bgt.n	800455c <uart_Rs232SendNum+0x20>
    }
}
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	0800ac38 	.word	0x0800ac38
 80045e0:	0800ac3c 	.word	0x0800ac3c
 80045e4:	20000420 	.word	0x20000420

080045e8 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a08      	ldr	r2, [pc, #32]	; (8004618 <HAL_UART_RxCpltCallback+0x30>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d10a      	bne.n	8004610 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 80045fa:	230a      	movs	r3, #10
 80045fc:	2201      	movs	r2, #1
 80045fe:	4907      	ldr	r1, [pc, #28]	; (800461c <HAL_UART_RxCpltCallback+0x34>)
 8004600:	4807      	ldr	r0, [pc, #28]	; (8004620 <HAL_UART_RxCpltCallback+0x38>)
 8004602:	f004 fdd0 	bl	80091a6 <HAL_UART_Transmit>

		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8004606:	2201      	movs	r2, #1
 8004608:	4904      	ldr	r1, [pc, #16]	; (800461c <HAL_UART_RxCpltCallback+0x34>)
 800460a:	4805      	ldr	r0, [pc, #20]	; (8004620 <HAL_UART_RxCpltCallback+0x38>)
 800460c:	f004 fe5d 	bl	80092ca <HAL_UART_Receive_IT>
	}
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40011000 	.word	0x40011000
 800461c:	200000d4 	.word	0x200000d4
 8004620:	20000484 	.word	0x20000484

08004624 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <MX_USART1_UART_Init+0x4c>)
 800462a:	4a12      	ldr	r2, [pc, #72]	; (8004674 <MX_USART1_UART_Init+0x50>)
 800462c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <MX_USART1_UART_Init+0x4c>)
 8004630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004636:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <MX_USART1_UART_Init+0x4c>)
 8004638:	2200      	movs	r2, #0
 800463a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <MX_USART1_UART_Init+0x4c>)
 800463e:	2200      	movs	r2, #0
 8004640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <MX_USART1_UART_Init+0x4c>)
 8004644:	2200      	movs	r2, #0
 8004646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <MX_USART1_UART_Init+0x4c>)
 800464a:	220c      	movs	r2, #12
 800464c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <MX_USART1_UART_Init+0x4c>)
 8004650:	2200      	movs	r2, #0
 8004652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <MX_USART1_UART_Init+0x4c>)
 8004656:	2200      	movs	r2, #0
 8004658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800465a:	4805      	ldr	r0, [pc, #20]	; (8004670 <MX_USART1_UART_Init+0x4c>)
 800465c:	f004 fd56 	bl	800910c <HAL_UART_Init>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004666:	f7fd ffdd 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000484 	.word	0x20000484
 8004674:	40011000 	.word	0x40011000

08004678 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	60da      	str	r2, [r3, #12]
 800468e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1d      	ldr	r2, [pc, #116]	; (800470c <HAL_UART_MspInit+0x94>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d134      	bne.n	8004704 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	4b1c      	ldr	r3, [pc, #112]	; (8004710 <HAL_UART_MspInit+0x98>)
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	4a1b      	ldr	r2, [pc, #108]	; (8004710 <HAL_UART_MspInit+0x98>)
 80046a4:	f043 0310 	orr.w	r3, r3, #16
 80046a8:	6453      	str	r3, [r2, #68]	; 0x44
 80046aa:	4b19      	ldr	r3, [pc, #100]	; (8004710 <HAL_UART_MspInit+0x98>)
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <HAL_UART_MspInit+0x98>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	4a14      	ldr	r2, [pc, #80]	; (8004710 <HAL_UART_MspInit+0x98>)
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	6313      	str	r3, [r2, #48]	; 0x30
 80046c6:	4b12      	ldr	r3, [pc, #72]	; (8004710 <HAL_UART_MspInit+0x98>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80046d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80046d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d8:	2302      	movs	r3, #2
 80046da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e0:	2303      	movs	r3, #3
 80046e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046e4:	2307      	movs	r3, #7
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046e8:	f107 0314 	add.w	r3, r7, #20
 80046ec:	4619      	mov	r1, r3
 80046ee:	4809      	ldr	r0, [pc, #36]	; (8004714 <HAL_UART_MspInit+0x9c>)
 80046f0:	f001 fa36 	bl	8005b60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80046f4:	2200      	movs	r2, #0
 80046f6:	2100      	movs	r1, #0
 80046f8:	2025      	movs	r0, #37	; 0x25
 80046fa:	f000 fdf8 	bl	80052ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80046fe:	2025      	movs	r0, #37	; 0x25
 8004700:	f000 fe11 	bl	8005326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004704:	bf00      	nop
 8004706:	3728      	adds	r7, #40	; 0x28
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40011000 	.word	0x40011000
 8004710:	40023800 	.word	0x40023800
 8004714:	40020000 	.word	0x40020000

08004718 <BCD2DEC>:
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	71fb      	strb	r3, [r7, #7]
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	0092      	lsls	r2, r2, #2
 800472c:	4413      	add	r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	b2da      	uxtb	r2, r3
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	b2db      	uxtb	r3, r3
 800473a:	4413      	add	r3, r2
 800473c:	b2db      	uxtb	r3, r3
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <DEC2BCD>:
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	71fb      	strb	r3, [r7, #7]
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	4a0d      	ldr	r2, [pc, #52]	; (8004790 <DEC2BCD+0x44>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	08db      	lsrs	r3, r3, #3
 8004760:	b2db      	uxtb	r3, r3
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	b258      	sxtb	r0, r3
 8004766:	79fa      	ldrb	r2, [r7, #7]
 8004768:	4b09      	ldr	r3, [pc, #36]	; (8004790 <DEC2BCD+0x44>)
 800476a:	fba3 1302 	umull	r1, r3, r3, r2
 800476e:	08d9      	lsrs	r1, r3, #3
 8004770:	460b      	mov	r3, r1
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	b25b      	sxtb	r3, r3
 800477e:	4303      	orrs	r3, r0
 8004780:	b25b      	sxtb	r3, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	cccccccd 	.word	0xcccccccd

08004794 <Reset_Handler>:
 8004794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047cc <LoopFillZerobss+0x12>
 8004798:	480d      	ldr	r0, [pc, #52]	; (80047d0 <LoopFillZerobss+0x16>)
 800479a:	490e      	ldr	r1, [pc, #56]	; (80047d4 <LoopFillZerobss+0x1a>)
 800479c:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <LoopFillZerobss+0x1e>)
 800479e:	2300      	movs	r3, #0
 80047a0:	e002      	b.n	80047a8 <LoopCopyDataInit>

080047a2 <CopyDataInit>:
 80047a2:	58d4      	ldr	r4, [r2, r3]
 80047a4:	50c4      	str	r4, [r0, r3]
 80047a6:	3304      	adds	r3, #4

080047a8 <LoopCopyDataInit>:
 80047a8:	18c4      	adds	r4, r0, r3
 80047aa:	428c      	cmp	r4, r1
 80047ac:	d3f9      	bcc.n	80047a2 <CopyDataInit>
 80047ae:	4a0b      	ldr	r2, [pc, #44]	; (80047dc <LoopFillZerobss+0x22>)
 80047b0:	4c0b      	ldr	r4, [pc, #44]	; (80047e0 <LoopFillZerobss+0x26>)
 80047b2:	2300      	movs	r3, #0
 80047b4:	e001      	b.n	80047ba <LoopFillZerobss>

080047b6 <FillZerobss>:
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	3204      	adds	r2, #4

080047ba <LoopFillZerobss>:
 80047ba:	42a2      	cmp	r2, r4
 80047bc:	d3fb      	bcc.n	80047b6 <FillZerobss>
 80047be:	f7ff fd73 	bl	80042a8 <SystemInit>
 80047c2:	f005 fd41 	bl	800a248 <__libc_init_array>
 80047c6:	f7fd fe03 	bl	80023d0 <main>
 80047ca:	4770      	bx	lr
 80047cc:	20020000 	.word	0x20020000
 80047d0:	20000000 	.word	0x20000000
 80047d4:	2000009c 	.word	0x2000009c
 80047d8:	0800dc2c 	.word	0x0800dc2c
 80047dc:	2000009c 	.word	0x2000009c
 80047e0:	200004dc 	.word	0x200004dc

080047e4 <ADC_IRQHandler>:
 80047e4:	e7fe      	b.n	80047e4 <ADC_IRQHandler>
	...

080047e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047ec:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <HAL_Init+0x40>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a0d      	ldr	r2, [pc, #52]	; (8004828 <HAL_Init+0x40>)
 80047f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047f8:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <HAL_Init+0x40>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a0a      	ldr	r2, [pc, #40]	; (8004828 <HAL_Init+0x40>)
 80047fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004802:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004804:	4b08      	ldr	r3, [pc, #32]	; (8004828 <HAL_Init+0x40>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a07      	ldr	r2, [pc, #28]	; (8004828 <HAL_Init+0x40>)
 800480a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004810:	2003      	movs	r0, #3
 8004812:	f000 fd61 	bl	80052d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004816:	200f      	movs	r0, #15
 8004818:	f000 f808 	bl	800482c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800481c:	f7ff f946 	bl	8003aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40023c00 	.word	0x40023c00

0800482c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_InitTick+0x54>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4b12      	ldr	r3, [pc, #72]	; (8004884 <HAL_InitTick+0x58>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	4619      	mov	r1, r3
 800483e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004842:	fbb3 f3f1 	udiv	r3, r3, r1
 8004846:	fbb2 f3f3 	udiv	r3, r2, r3
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fd79 	bl	8005342 <HAL_SYSTICK_Config>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e00e      	b.n	8004878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b0f      	cmp	r3, #15
 800485e:	d80a      	bhi.n	8004876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004860:	2200      	movs	r2, #0
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	f04f 30ff 	mov.w	r0, #4294967295
 8004868:	f000 fd41 	bl	80052ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800486c:	4a06      	ldr	r2, [pc, #24]	; (8004888 <HAL_InitTick+0x5c>)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	2000002c 	.word	0x2000002c
 8004884:	20000034 	.word	0x20000034
 8004888:	20000030 	.word	0x20000030

0800488c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_IncTick+0x20>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <HAL_IncTick+0x24>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4413      	add	r3, r2
 800489c:	4a04      	ldr	r2, [pc, #16]	; (80048b0 <HAL_IncTick+0x24>)
 800489e:	6013      	str	r3, [r2, #0]
}
 80048a0:	bf00      	nop
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000034 	.word	0x20000034
 80048b0:	200004c8 	.word	0x200004c8

080048b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return uwTick;
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_GetTick+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	200004c8 	.word	0x200004c8

080048cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048d4:	f7ff ffee 	bl	80048b4 <HAL_GetTick>
 80048d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d005      	beq.n	80048f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048e6:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <HAL_Delay+0x44>)
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048f2:	bf00      	nop
 80048f4:	f7ff ffde 	bl	80048b4 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	429a      	cmp	r2, r3
 8004902:	d8f7      	bhi.n	80048f4 <HAL_Delay+0x28>
  {
  }
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000034 	.word	0x20000034

08004914 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e033      	b.n	8004992 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fc fae0 	bl	8000ef8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b00      	cmp	r3, #0
 8004950:	d118      	bne.n	8004984 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800495a:	f023 0302 	bic.w	r3, r3, #2
 800495e:	f043 0202 	orr.w	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa68 	bl	8004e3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f023 0303 	bic.w	r3, r3, #3
 800497a:	f043 0201 	orr.w	r2, r3, #1
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
 8004982:	e001      	b.n	8004988 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_ADC_Start_DMA+0x1e>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e0e9      	b.n	8004b8e <HAL_ADC_Start_DMA+0x1f2>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d018      	beq.n	8004a02 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80049e0:	4b6d      	ldr	r3, [pc, #436]	; (8004b98 <HAL_ADC_Start_DMA+0x1fc>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a6d      	ldr	r2, [pc, #436]	; (8004b9c <HAL_ADC_Start_DMA+0x200>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	0c9a      	lsrs	r2, r3, #18
 80049ec:	4613      	mov	r3, r2
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	4413      	add	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80049f4:	e002      	b.n	80049fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f9      	bne.n	80049f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a10:	d107      	bne.n	8004a22 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a20:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	f040 80a1 	bne.w	8004b74 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a70:	d106      	bne.n	8004a80 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	f023 0206 	bic.w	r2, r3, #6
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	645a      	str	r2, [r3, #68]	; 0x44
 8004a7e:	e002      	b.n	8004a86 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a8e:	4b44      	ldr	r3, [pc, #272]	; (8004ba0 <HAL_ADC_Start_DMA+0x204>)
 8004a90:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	4a43      	ldr	r2, [pc, #268]	; (8004ba4 <HAL_ADC_Start_DMA+0x208>)
 8004a98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	4a42      	ldr	r2, [pc, #264]	; (8004ba8 <HAL_ADC_Start_DMA+0x20c>)
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	4a41      	ldr	r2, [pc, #260]	; (8004bac <HAL_ADC_Start_DMA+0x210>)
 8004aa8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004ac2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	334c      	adds	r3, #76	; 0x4c
 8004ade:	4619      	mov	r1, r3
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f000 fce8 	bl	80054b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d12a      	bne.n	8004b4a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a2d      	ldr	r2, [pc, #180]	; (8004bb0 <HAL_ADC_Start_DMA+0x214>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d015      	beq.n	8004b2a <HAL_ADC_Start_DMA+0x18e>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2c      	ldr	r2, [pc, #176]	; (8004bb4 <HAL_ADC_Start_DMA+0x218>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d105      	bne.n	8004b14 <HAL_ADC_Start_DMA+0x178>
 8004b08:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <HAL_ADC_Start_DMA+0x204>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a27      	ldr	r2, [pc, #156]	; (8004bb8 <HAL_ADC_Start_DMA+0x21c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d136      	bne.n	8004b8c <HAL_ADC_Start_DMA+0x1f0>
 8004b1e:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <HAL_ADC_Start_DMA+0x204>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d130      	bne.n	8004b8c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d129      	bne.n	8004b8c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	e020      	b.n	8004b8c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <HAL_ADC_Start_DMA+0x214>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d11b      	bne.n	8004b8c <HAL_ADC_Start_DMA+0x1f0>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d114      	bne.n	8004b8c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b70:	609a      	str	r2, [r3, #8]
 8004b72:	e00b      	b.n	8004b8c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	f043 0210 	orr.w	r2, r3, #16
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	f043 0201 	orr.w	r2, r3, #1
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	2000002c 	.word	0x2000002c
 8004b9c:	431bde83 	.word	0x431bde83
 8004ba0:	40012300 	.word	0x40012300
 8004ba4:	08005035 	.word	0x08005035
 8004ba8:	080050ef 	.word	0x080050ef
 8004bac:	0800510b 	.word	0x0800510b
 8004bb0:	40012000 	.word	0x40012000
 8004bb4:	40012100 	.word	0x40012100
 8004bb8:	40012200 	.word	0x40012200

08004bbc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x1c>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e105      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x228>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b09      	cmp	r3, #9
 8004c22:	d925      	bls.n	8004c70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68d9      	ldr	r1, [r3, #12]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	4613      	mov	r3, r2
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	4413      	add	r3, r2
 8004c38:	3b1e      	subs	r3, #30
 8004c3a:	2207      	movs	r2, #7
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	43da      	mvns	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	400a      	ands	r2, r1
 8004c48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68d9      	ldr	r1, [r3, #12]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	4403      	add	r3, r0
 8004c62:	3b1e      	subs	r3, #30
 8004c64:	409a      	lsls	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	e022      	b.n	8004cb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6919      	ldr	r1, [r3, #16]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4613      	mov	r3, r2
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	4413      	add	r3, r2
 8004c84:	2207      	movs	r2, #7
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	400a      	ands	r2, r1
 8004c92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6919      	ldr	r1, [r3, #16]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	4403      	add	r3, r0
 8004cac:	409a      	lsls	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b06      	cmp	r3, #6
 8004cbc:	d824      	bhi.n	8004d08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	3b05      	subs	r3, #5
 8004cd0:	221f      	movs	r2, #31
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43da      	mvns	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	400a      	ands	r2, r1
 8004cde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	4618      	mov	r0, r3
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3b05      	subs	r3, #5
 8004cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	635a      	str	r2, [r3, #52]	; 0x34
 8004d06:	e04c      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b0c      	cmp	r3, #12
 8004d0e:	d824      	bhi.n	8004d5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	3b23      	subs	r3, #35	; 0x23
 8004d22:	221f      	movs	r2, #31
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43da      	mvns	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	400a      	ands	r2, r1
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	4618      	mov	r0, r3
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	3b23      	subs	r3, #35	; 0x23
 8004d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
 8004d58:	e023      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	3b41      	subs	r3, #65	; 0x41
 8004d6c:	221f      	movs	r2, #31
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	43da      	mvns	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	400a      	ands	r2, r1
 8004d7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	4618      	mov	r0, r3
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	3b41      	subs	r3, #65	; 0x41
 8004d96:	fa00 f203 	lsl.w	r2, r0, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004da2:	4b22      	ldr	r3, [pc, #136]	; (8004e2c <HAL_ADC_ConfigChannel+0x234>)
 8004da4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a21      	ldr	r2, [pc, #132]	; (8004e30 <HAL_ADC_ConfigChannel+0x238>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d109      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x1cc>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b12      	cmp	r3, #18
 8004db6:	d105      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a19      	ldr	r2, [pc, #100]	; (8004e30 <HAL_ADC_ConfigChannel+0x238>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d123      	bne.n	8004e16 <HAL_ADC_ConfigChannel+0x21e>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d003      	beq.n	8004dde <HAL_ADC_ConfigChannel+0x1e6>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b11      	cmp	r3, #17
 8004ddc:	d11b      	bne.n	8004e16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	d111      	bne.n	8004e16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <HAL_ADC_ConfigChannel+0x23c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a10      	ldr	r2, [pc, #64]	; (8004e38 <HAL_ADC_ConfigChannel+0x240>)
 8004df8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfc:	0c9a      	lsrs	r2, r3, #18
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e08:	e002      	b.n	8004e10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f9      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	40012300 	.word	0x40012300
 8004e30:	40012000 	.word	0x40012000
 8004e34:	2000002c 	.word	0x2000002c
 8004e38:	431bde83 	.word	0x431bde83

08004e3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e44:	4b79      	ldr	r3, [pc, #484]	; (800502c <ADC_Init+0x1f0>)
 8004e46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6859      	ldr	r1, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	021a      	lsls	r2, r3, #8
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004e94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6859      	ldr	r1, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6899      	ldr	r1, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	4a58      	ldr	r2, [pc, #352]	; (8005030 <ADC_Init+0x1f4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d022      	beq.n	8004f1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ee2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6899      	ldr	r1, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6899      	ldr	r1, [r3, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	609a      	str	r2, [r3, #8]
 8004f18:	e00f      	b.n	8004f3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0202 	bic.w	r2, r2, #2
 8004f48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6899      	ldr	r1, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	7e1b      	ldrb	r3, [r3, #24]
 8004f54:	005a      	lsls	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01b      	beq.n	8004fa0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004f86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	3b01      	subs	r3, #1
 8004f94:	035a      	lsls	r2, r3, #13
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
 8004f9e:	e007      	b.n	8004fb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	051a      	lsls	r2, r3, #20
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6899      	ldr	r1, [r3, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ff2:	025a      	lsls	r2, r3, #9
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800500a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6899      	ldr	r1, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	029a      	lsls	r2, r3, #10
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	609a      	str	r2, [r3, #8]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	40012300 	.word	0x40012300
 8005030:	0f000001 	.word	0x0f000001

08005034 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800504a:	2b00      	cmp	r3, #0
 800504c:	d13c      	bne.n	80050c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d12b      	bne.n	80050c0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800506c:	2b00      	cmp	r3, #0
 800506e:	d127      	bne.n	80050c0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800507a:	2b00      	cmp	r3, #0
 800507c:	d006      	beq.n	800508c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005088:	2b00      	cmp	r3, #0
 800508a:	d119      	bne.n	80050c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0220 	bic.w	r2, r2, #32
 800509a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d105      	bne.n	80050c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	f043 0201 	orr.w	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff fd7b 	bl	8004bbc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050c6:	e00e      	b.n	80050e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7ff fd85 	bl	8004be4 <HAL_ADC_ErrorCallback>
}
 80050da:	e004      	b.n	80050e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	4798      	blx	r3
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff fd67 	bl	8004bd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005102:	bf00      	nop
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2240      	movs	r2, #64	; 0x40
 800511c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005122:	f043 0204 	orr.w	r2, r3, #4
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff fd5a 	bl	8004be4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005130:	bf00      	nop
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <__NVIC_SetPriorityGrouping+0x44>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005154:	4013      	ands	r3, r2
 8005156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800516a:	4a04      	ldr	r2, [pc, #16]	; (800517c <__NVIC_SetPriorityGrouping+0x44>)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	60d3      	str	r3, [r2, #12]
}
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	e000ed00 	.word	0xe000ed00

08005180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005184:	4b04      	ldr	r3, [pc, #16]	; (8005198 <__NVIC_GetPriorityGrouping+0x18>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	0a1b      	lsrs	r3, r3, #8
 800518a:	f003 0307 	and.w	r3, r3, #7
}
 800518e:	4618      	mov	r0, r3
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	e000ed00 	.word	0xe000ed00

0800519c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	db0b      	blt.n	80051c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	f003 021f 	and.w	r2, r3, #31
 80051b4:	4907      	ldr	r1, [pc, #28]	; (80051d4 <__NVIC_EnableIRQ+0x38>)
 80051b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	2001      	movs	r0, #1
 80051be:	fa00 f202 	lsl.w	r2, r0, r2
 80051c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	e000e100 	.word	0xe000e100

080051d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	6039      	str	r1, [r7, #0]
 80051e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	db0a      	blt.n	8005202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	490c      	ldr	r1, [pc, #48]	; (8005224 <__NVIC_SetPriority+0x4c>)
 80051f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f6:	0112      	lsls	r2, r2, #4
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	440b      	add	r3, r1
 80051fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005200:	e00a      	b.n	8005218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	b2da      	uxtb	r2, r3
 8005206:	4908      	ldr	r1, [pc, #32]	; (8005228 <__NVIC_SetPriority+0x50>)
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	3b04      	subs	r3, #4
 8005210:	0112      	lsls	r2, r2, #4
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	440b      	add	r3, r1
 8005216:	761a      	strb	r2, [r3, #24]
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	e000e100 	.word	0xe000e100
 8005228:	e000ed00 	.word	0xe000ed00

0800522c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800522c:	b480      	push	{r7}
 800522e:	b089      	sub	sp, #36	; 0x24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f1c3 0307 	rsb	r3, r3, #7
 8005246:	2b04      	cmp	r3, #4
 8005248:	bf28      	it	cs
 800524a:	2304      	movcs	r3, #4
 800524c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	3304      	adds	r3, #4
 8005252:	2b06      	cmp	r3, #6
 8005254:	d902      	bls.n	800525c <NVIC_EncodePriority+0x30>
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3b03      	subs	r3, #3
 800525a:	e000      	b.n	800525e <NVIC_EncodePriority+0x32>
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005260:	f04f 32ff 	mov.w	r2, #4294967295
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43da      	mvns	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	401a      	ands	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005274:	f04f 31ff 	mov.w	r1, #4294967295
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	fa01 f303 	lsl.w	r3, r1, r3
 800527e:	43d9      	mvns	r1, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005284:	4313      	orrs	r3, r2
         );
}
 8005286:	4618      	mov	r0, r3
 8005288:	3724      	adds	r7, #36	; 0x24
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3b01      	subs	r3, #1
 80052a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052a4:	d301      	bcc.n	80052aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052a6:	2301      	movs	r3, #1
 80052a8:	e00f      	b.n	80052ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052aa:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <SysTick_Config+0x40>)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052b2:	210f      	movs	r1, #15
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295
 80052b8:	f7ff ff8e 	bl	80051d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <SysTick_Config+0x40>)
 80052be:	2200      	movs	r2, #0
 80052c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052c2:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <SysTick_Config+0x40>)
 80052c4:	2207      	movs	r2, #7
 80052c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	e000e010 	.word	0xe000e010

080052d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff ff29 	bl	8005138 <__NVIC_SetPriorityGrouping>
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b086      	sub	sp, #24
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	4603      	mov	r3, r0
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005300:	f7ff ff3e 	bl	8005180 <__NVIC_GetPriorityGrouping>
 8005304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	6978      	ldr	r0, [r7, #20]
 800530c:	f7ff ff8e 	bl	800522c <NVIC_EncodePriority>
 8005310:	4602      	mov	r2, r0
 8005312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff ff5d 	bl	80051d8 <__NVIC_SetPriority>
}
 800531e:	bf00      	nop
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	4603      	mov	r3, r0
 800532e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff ff31 	bl	800519c <__NVIC_EnableIRQ>
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff ffa2 	bl	8005294 <SysTick_Config>
 8005350:	4603      	mov	r3, r0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005368:	f7ff faa4 	bl	80048b4 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e099      	b.n	80054ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0201 	bic.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005398:	e00f      	b.n	80053ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800539a:	f7ff fa8b 	bl	80048b4 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b05      	cmp	r3, #5
 80053a6:	d908      	bls.n	80053ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2203      	movs	r2, #3
 80053b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e078      	b.n	80054ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e8      	bne.n	800539a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4b38      	ldr	r3, [pc, #224]	; (80054b4 <HAL_DMA_Init+0x158>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	2b04      	cmp	r3, #4
 8005412:	d107      	bne.n	8005424 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	4313      	orrs	r3, r2
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f023 0307 	bic.w	r3, r3, #7
 800543a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	2b04      	cmp	r3, #4
 800544c:	d117      	bne.n	800547e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00e      	beq.n	800547e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fb01 	bl	8005a68 <DMA_CheckFifoParam>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2240      	movs	r2, #64	; 0x40
 8005470:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800547a:	2301      	movs	r3, #1
 800547c:	e016      	b.n	80054ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fab8 	bl	80059fc <DMA_CalcBaseAndBitshift>
 800548c:	4603      	mov	r3, r0
 800548e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005494:	223f      	movs	r2, #63	; 0x3f
 8005496:	409a      	lsls	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	f010803f 	.word	0xf010803f

080054b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_DMA_Start_IT+0x26>
 80054da:	2302      	movs	r3, #2
 80054dc:	e040      	b.n	8005560 <HAL_DMA_Start_IT+0xa8>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d12f      	bne.n	8005552 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fa4a 	bl	80059a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005510:	223f      	movs	r2, #63	; 0x3f
 8005512:	409a      	lsls	r2, r3
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0216 	orr.w	r2, r2, #22
 8005526:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d007      	beq.n	8005540 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0208 	orr.w	r2, r2, #8
 800553e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	e005      	b.n	800555e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800555a:	2302      	movs	r3, #2
 800555c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800555e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005574:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005576:	f7ff f99d 	bl	80048b4 <HAL_GetTick>
 800557a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d008      	beq.n	800559a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2280      	movs	r2, #128	; 0x80
 800558c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e052      	b.n	8005640 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0216 	bic.w	r2, r2, #22
 80055a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <HAL_DMA_Abort+0x62>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0208 	bic.w	r2, r2, #8
 80055d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0201 	bic.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055ea:	e013      	b.n	8005614 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055ec:	f7ff f962 	bl	80048b4 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b05      	cmp	r3, #5
 80055f8:	d90c      	bls.n	8005614 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2203      	movs	r2, #3
 8005604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e015      	b.n	8005640 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1e4      	bne.n	80055ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005626:	223f      	movs	r2, #63	; 0x3f
 8005628:	409a      	lsls	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d004      	beq.n	8005666 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2280      	movs	r2, #128	; 0x80
 8005660:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e00c      	b.n	8005680 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2205      	movs	r2, #5
 800566a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0201 	bic.w	r2, r2, #1
 800567c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005698:	4b92      	ldr	r3, [pc, #584]	; (80058e4 <HAL_DMA_IRQHandler+0x258>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a92      	ldr	r2, [pc, #584]	; (80058e8 <HAL_DMA_IRQHandler+0x25c>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	0a9b      	lsrs	r3, r3, #10
 80056a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b6:	2208      	movs	r2, #8
 80056b8:	409a      	lsls	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4013      	ands	r3, r2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01a      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d013      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0204 	bic.w	r2, r2, #4
 80056de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e4:	2208      	movs	r2, #8
 80056e6:	409a      	lsls	r2, r3
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f0:	f043 0201 	orr.w	r2, r3, #1
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fc:	2201      	movs	r2, #1
 80056fe:	409a      	lsls	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4013      	ands	r3, r2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d012      	beq.n	800572e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00b      	beq.n	800572e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571a:	2201      	movs	r2, #1
 800571c:	409a      	lsls	r2, r3
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005726:	f043 0202 	orr.w	r2, r3, #2
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005732:	2204      	movs	r2, #4
 8005734:	409a      	lsls	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4013      	ands	r3, r2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d012      	beq.n	8005764 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00b      	beq.n	8005764 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005750:	2204      	movs	r2, #4
 8005752:	409a      	lsls	r2, r3
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575c:	f043 0204 	orr.w	r2, r3, #4
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005768:	2210      	movs	r2, #16
 800576a:	409a      	lsls	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d043      	beq.n	80057fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d03c      	beq.n	80057fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005786:	2210      	movs	r2, #16
 8005788:	409a      	lsls	r2, r3
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d018      	beq.n	80057ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d108      	bne.n	80057bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d024      	beq.n	80057fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
 80057ba:	e01f      	b.n	80057fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01b      	beq.n	80057fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
 80057cc:	e016      	b.n	80057fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d107      	bne.n	80057ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0208 	bic.w	r2, r2, #8
 80057ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005800:	2220      	movs	r2, #32
 8005802:	409a      	lsls	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4013      	ands	r3, r2
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 808e 	beq.w	800592a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8086 	beq.w	800592a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005822:	2220      	movs	r2, #32
 8005824:	409a      	lsls	r2, r3
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b05      	cmp	r3, #5
 8005834:	d136      	bne.n	80058a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0216 	bic.w	r2, r2, #22
 8005844:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695a      	ldr	r2, [r3, #20]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005854:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d103      	bne.n	8005866 <HAL_DMA_IRQHandler+0x1da>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0208 	bic.w	r2, r2, #8
 8005874:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587a:	223f      	movs	r2, #63	; 0x3f
 800587c:	409a      	lsls	r2, r3
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005896:	2b00      	cmp	r3, #0
 8005898:	d07d      	beq.n	8005996 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	4798      	blx	r3
        }
        return;
 80058a2:	e078      	b.n	8005996 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01c      	beq.n	80058ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d108      	bne.n	80058d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d030      	beq.n	800592a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	4798      	blx	r3
 80058d0:	e02b      	b.n	800592a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d027      	beq.n	800592a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	4798      	blx	r3
 80058e2:	e022      	b.n	800592a <HAL_DMA_IRQHandler+0x29e>
 80058e4:	2000002c 	.word	0x2000002c
 80058e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10f      	bne.n	800591a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0210 	bic.w	r2, r2, #16
 8005908:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592e:	2b00      	cmp	r3, #0
 8005930:	d032      	beq.n	8005998 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d022      	beq.n	8005984 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2205      	movs	r2, #5
 8005942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	3301      	adds	r3, #1
 800595a:	60bb      	str	r3, [r7, #8]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	429a      	cmp	r2, r3
 8005960:	d307      	bcc.n	8005972 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f2      	bne.n	8005956 <HAL_DMA_IRQHandler+0x2ca>
 8005970:	e000      	b.n	8005974 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005972:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4798      	blx	r3
 8005994:	e000      	b.n	8005998 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005996:	bf00      	nop
    }
  }
}
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop

080059a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b40      	cmp	r3, #64	; 0x40
 80059cc:	d108      	bne.n	80059e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80059de:	e007      	b.n	80059f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	60da      	str	r2, [r3, #12]
}
 80059f0:	bf00      	nop
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	3b10      	subs	r3, #16
 8005a0c:	4a14      	ldr	r2, [pc, #80]	; (8005a60 <DMA_CalcBaseAndBitshift+0x64>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	091b      	lsrs	r3, r3, #4
 8005a14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a16:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <DMA_CalcBaseAndBitshift+0x68>)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d909      	bls.n	8005a3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a32:	f023 0303 	bic.w	r3, r3, #3
 8005a36:	1d1a      	adds	r2, r3, #4
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	659a      	str	r2, [r3, #88]	; 0x58
 8005a3c:	e007      	b.n	8005a4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a46:	f023 0303 	bic.w	r3, r3, #3
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	aaaaaaab 	.word	0xaaaaaaab
 8005a64:	0800dbe0 	.word	0x0800dbe0

08005a68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d11f      	bne.n	8005ac2 <DMA_CheckFifoParam+0x5a>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d856      	bhi.n	8005b36 <DMA_CheckFifoParam+0xce>
 8005a88:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <DMA_CheckFifoParam+0x28>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005aa1 	.word	0x08005aa1
 8005a94:	08005ab3 	.word	0x08005ab3
 8005a98:	08005aa1 	.word	0x08005aa1
 8005a9c:	08005b37 	.word	0x08005b37
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d046      	beq.n	8005b3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab0:	e043      	b.n	8005b3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005aba:	d140      	bne.n	8005b3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac0:	e03d      	b.n	8005b3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aca:	d121      	bne.n	8005b10 <DMA_CheckFifoParam+0xa8>
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d837      	bhi.n	8005b42 <DMA_CheckFifoParam+0xda>
 8005ad2:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <DMA_CheckFifoParam+0x70>)
 8005ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad8:	08005ae9 	.word	0x08005ae9
 8005adc:	08005aef 	.word	0x08005aef
 8005ae0:	08005ae9 	.word	0x08005ae9
 8005ae4:	08005b01 	.word	0x08005b01
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]
      break;
 8005aec:	e030      	b.n	8005b50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d025      	beq.n	8005b46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005afe:	e022      	b.n	8005b46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b08:	d11f      	bne.n	8005b4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b0e:	e01c      	b.n	8005b4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d903      	bls.n	8005b1e <DMA_CheckFifoParam+0xb6>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d003      	beq.n	8005b24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b1c:	e018      	b.n	8005b50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	73fb      	strb	r3, [r7, #15]
      break;
 8005b22:	e015      	b.n	8005b50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00e      	beq.n	8005b4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]
      break;
 8005b34:	e00b      	b.n	8005b4e <DMA_CheckFifoParam+0xe6>
      break;
 8005b36:	bf00      	nop
 8005b38:	e00a      	b.n	8005b50 <DMA_CheckFifoParam+0xe8>
      break;
 8005b3a:	bf00      	nop
 8005b3c:	e008      	b.n	8005b50 <DMA_CheckFifoParam+0xe8>
      break;
 8005b3e:	bf00      	nop
 8005b40:	e006      	b.n	8005b50 <DMA_CheckFifoParam+0xe8>
      break;
 8005b42:	bf00      	nop
 8005b44:	e004      	b.n	8005b50 <DMA_CheckFifoParam+0xe8>
      break;
 8005b46:	bf00      	nop
 8005b48:	e002      	b.n	8005b50 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b4a:	bf00      	nop
 8005b4c:	e000      	b.n	8005b50 <DMA_CheckFifoParam+0xe8>
      break;
 8005b4e:	bf00      	nop
    }
  } 
  
  return status; 
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop

08005b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b089      	sub	sp, #36	; 0x24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	e16b      	b.n	8005e54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	f040 815a 	bne.w	8005e4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d005      	beq.n	8005bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d130      	bne.n	8005c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005be8:	2201      	movs	r2, #1
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	091b      	lsrs	r3, r3, #4
 8005bfe:	f003 0201 	and.w	r2, r3, #1
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f003 0303 	and.w	r3, r3, #3
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d017      	beq.n	8005c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	43db      	mvns	r3, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4013      	ands	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f003 0303 	and.w	r3, r3, #3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d123      	bne.n	8005ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	08da      	lsrs	r2, r3, #3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3208      	adds	r2, #8
 8005c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	220f      	movs	r2, #15
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	08da      	lsrs	r2, r3, #3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3208      	adds	r2, #8
 8005c9e:	69b9      	ldr	r1, [r7, #24]
 8005ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	2203      	movs	r2, #3
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	43db      	mvns	r3, r3
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 0203 	and.w	r2, r3, #3
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80b4 	beq.w	8005e4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	4b60      	ldr	r3, [pc, #384]	; (8005e6c <HAL_GPIO_Init+0x30c>)
 8005cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cee:	4a5f      	ldr	r2, [pc, #380]	; (8005e6c <HAL_GPIO_Init+0x30c>)
 8005cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8005cf6:	4b5d      	ldr	r3, [pc, #372]	; (8005e6c <HAL_GPIO_Init+0x30c>)
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d02:	4a5b      	ldr	r2, [pc, #364]	; (8005e70 <HAL_GPIO_Init+0x310>)
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	089b      	lsrs	r3, r3, #2
 8005d08:	3302      	adds	r3, #2
 8005d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	220f      	movs	r2, #15
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a52      	ldr	r2, [pc, #328]	; (8005e74 <HAL_GPIO_Init+0x314>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d02b      	beq.n	8005d86 <HAL_GPIO_Init+0x226>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a51      	ldr	r2, [pc, #324]	; (8005e78 <HAL_GPIO_Init+0x318>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d025      	beq.n	8005d82 <HAL_GPIO_Init+0x222>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a50      	ldr	r2, [pc, #320]	; (8005e7c <HAL_GPIO_Init+0x31c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d01f      	beq.n	8005d7e <HAL_GPIO_Init+0x21e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a4f      	ldr	r2, [pc, #316]	; (8005e80 <HAL_GPIO_Init+0x320>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d019      	beq.n	8005d7a <HAL_GPIO_Init+0x21a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a4e      	ldr	r2, [pc, #312]	; (8005e84 <HAL_GPIO_Init+0x324>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d013      	beq.n	8005d76 <HAL_GPIO_Init+0x216>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a4d      	ldr	r2, [pc, #308]	; (8005e88 <HAL_GPIO_Init+0x328>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00d      	beq.n	8005d72 <HAL_GPIO_Init+0x212>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a4c      	ldr	r2, [pc, #304]	; (8005e8c <HAL_GPIO_Init+0x32c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d007      	beq.n	8005d6e <HAL_GPIO_Init+0x20e>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a4b      	ldr	r2, [pc, #300]	; (8005e90 <HAL_GPIO_Init+0x330>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d101      	bne.n	8005d6a <HAL_GPIO_Init+0x20a>
 8005d66:	2307      	movs	r3, #7
 8005d68:	e00e      	b.n	8005d88 <HAL_GPIO_Init+0x228>
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	e00c      	b.n	8005d88 <HAL_GPIO_Init+0x228>
 8005d6e:	2306      	movs	r3, #6
 8005d70:	e00a      	b.n	8005d88 <HAL_GPIO_Init+0x228>
 8005d72:	2305      	movs	r3, #5
 8005d74:	e008      	b.n	8005d88 <HAL_GPIO_Init+0x228>
 8005d76:	2304      	movs	r3, #4
 8005d78:	e006      	b.n	8005d88 <HAL_GPIO_Init+0x228>
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e004      	b.n	8005d88 <HAL_GPIO_Init+0x228>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e002      	b.n	8005d88 <HAL_GPIO_Init+0x228>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <HAL_GPIO_Init+0x228>
 8005d86:	2300      	movs	r3, #0
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	f002 0203 	and.w	r2, r2, #3
 8005d8e:	0092      	lsls	r2, r2, #2
 8005d90:	4093      	lsls	r3, r2
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d98:	4935      	ldr	r1, [pc, #212]	; (8005e70 <HAL_GPIO_Init+0x310>)
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	089b      	lsrs	r3, r3, #2
 8005d9e:	3302      	adds	r3, #2
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005da6:	4b3b      	ldr	r3, [pc, #236]	; (8005e94 <HAL_GPIO_Init+0x334>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	43db      	mvns	r3, r3
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	4013      	ands	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005dca:	4a32      	ldr	r2, [pc, #200]	; (8005e94 <HAL_GPIO_Init+0x334>)
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005dd0:	4b30      	ldr	r3, [pc, #192]	; (8005e94 <HAL_GPIO_Init+0x334>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005df4:	4a27      	ldr	r2, [pc, #156]	; (8005e94 <HAL_GPIO_Init+0x334>)
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dfa:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <HAL_GPIO_Init+0x334>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	43db      	mvns	r3, r3
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	4013      	ands	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e1e:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <HAL_GPIO_Init+0x334>)
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e24:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <HAL_GPIO_Init+0x334>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4013      	ands	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e48:	4a12      	ldr	r2, [pc, #72]	; (8005e94 <HAL_GPIO_Init+0x334>)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	3301      	adds	r3, #1
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	2b0f      	cmp	r3, #15
 8005e58:	f67f ae90 	bls.w	8005b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e5c:	bf00      	nop
 8005e5e:	bf00      	nop
 8005e60:	3724      	adds	r7, #36	; 0x24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	40013800 	.word	0x40013800
 8005e74:	40020000 	.word	0x40020000
 8005e78:	40020400 	.word	0x40020400
 8005e7c:	40020800 	.word	0x40020800
 8005e80:	40020c00 	.word	0x40020c00
 8005e84:	40021000 	.word	0x40021000
 8005e88:	40021400 	.word	0x40021400
 8005e8c:	40021800 	.word	0x40021800
 8005e90:	40021c00 	.word	0x40021c00
 8005e94:	40013c00 	.word	0x40013c00

08005e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	807b      	strh	r3, [r7, #2]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ea8:	787b      	ldrb	r3, [r7, #1]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005eae:	887a      	ldrh	r2, [r7, #2]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005eb4:	e003      	b.n	8005ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005eb6:	887b      	ldrh	r3, [r7, #2]
 8005eb8:	041a      	lsls	r2, r3, #16
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	619a      	str	r2, [r3, #24]
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
	...

08005ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e12b      	b.n	8006136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fb fc10 	bl	8001718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2224      	movs	r2, #36	; 0x24
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0201 	bic.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f30:	f001 fbd8 	bl	80076e4 <HAL_RCC_GetPCLK1Freq>
 8005f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	4a81      	ldr	r2, [pc, #516]	; (8006140 <HAL_I2C_Init+0x274>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d807      	bhi.n	8005f50 <HAL_I2C_Init+0x84>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4a80      	ldr	r2, [pc, #512]	; (8006144 <HAL_I2C_Init+0x278>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	bf94      	ite	ls
 8005f48:	2301      	movls	r3, #1
 8005f4a:	2300      	movhi	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	e006      	b.n	8005f5e <HAL_I2C_Init+0x92>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a7d      	ldr	r2, [pc, #500]	; (8006148 <HAL_I2C_Init+0x27c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	bf94      	ite	ls
 8005f58:	2301      	movls	r3, #1
 8005f5a:	2300      	movhi	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e0e7      	b.n	8006136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a78      	ldr	r2, [pc, #480]	; (800614c <HAL_I2C_Init+0x280>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	0c9b      	lsrs	r3, r3, #18
 8005f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	4a6a      	ldr	r2, [pc, #424]	; (8006140 <HAL_I2C_Init+0x274>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d802      	bhi.n	8005fa0 <HAL_I2C_Init+0xd4>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	e009      	b.n	8005fb4 <HAL_I2C_Init+0xe8>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	4a69      	ldr	r2, [pc, #420]	; (8006150 <HAL_I2C_Init+0x284>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	099b      	lsrs	r3, r3, #6
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6812      	ldr	r2, [r2, #0]
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005fc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	495c      	ldr	r1, [pc, #368]	; (8006140 <HAL_I2C_Init+0x274>)
 8005fd0:	428b      	cmp	r3, r1
 8005fd2:	d819      	bhi.n	8006008 <HAL_I2C_Init+0x13c>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	1e59      	subs	r1, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fe2:	1c59      	adds	r1, r3, #1
 8005fe4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005fe8:	400b      	ands	r3, r1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <HAL_I2C_Init+0x138>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1e59      	subs	r1, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006002:	e051      	b.n	80060a8 <HAL_I2C_Init+0x1dc>
 8006004:	2304      	movs	r3, #4
 8006006:	e04f      	b.n	80060a8 <HAL_I2C_Init+0x1dc>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d111      	bne.n	8006034 <HAL_I2C_Init+0x168>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	1e58      	subs	r0, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6859      	ldr	r1, [r3, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	440b      	add	r3, r1
 800601e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006022:	3301      	adds	r3, #1
 8006024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006028:	2b00      	cmp	r3, #0
 800602a:	bf0c      	ite	eq
 800602c:	2301      	moveq	r3, #1
 800602e:	2300      	movne	r3, #0
 8006030:	b2db      	uxtb	r3, r3
 8006032:	e012      	b.n	800605a <HAL_I2C_Init+0x18e>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	1e58      	subs	r0, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6859      	ldr	r1, [r3, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	0099      	lsls	r1, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	fbb0 f3f3 	udiv	r3, r0, r3
 800604a:	3301      	adds	r3, #1
 800604c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006050:	2b00      	cmp	r3, #0
 8006052:	bf0c      	ite	eq
 8006054:	2301      	moveq	r3, #1
 8006056:	2300      	movne	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_I2C_Init+0x196>
 800605e:	2301      	movs	r3, #1
 8006060:	e022      	b.n	80060a8 <HAL_I2C_Init+0x1dc>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10e      	bne.n	8006088 <HAL_I2C_Init+0x1bc>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1e58      	subs	r0, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6859      	ldr	r1, [r3, #4]
 8006072:	460b      	mov	r3, r1
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	440b      	add	r3, r1
 8006078:	fbb0 f3f3 	udiv	r3, r0, r3
 800607c:	3301      	adds	r3, #1
 800607e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006086:	e00f      	b.n	80060a8 <HAL_I2C_Init+0x1dc>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	1e58      	subs	r0, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6859      	ldr	r1, [r3, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	0099      	lsls	r1, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	fbb0 f3f3 	udiv	r3, r0, r3
 800609e:	3301      	adds	r3, #1
 80060a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	6809      	ldr	r1, [r1, #0]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69da      	ldr	r2, [r3, #28]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80060d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6911      	ldr	r1, [r2, #16]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	68d2      	ldr	r2, [r2, #12]
 80060e2:	4311      	orrs	r1, r2
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	430b      	orrs	r3, r1
 80060ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	000186a0 	.word	0x000186a0
 8006144:	001e847f 	.word	0x001e847f
 8006148:	003d08ff 	.word	0x003d08ff
 800614c:	431bde83 	.word	0x431bde83
 8006150:	10624dd3 	.word	0x10624dd3

08006154 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	4608      	mov	r0, r1
 800615e:	4611      	mov	r1, r2
 8006160:	461a      	mov	r2, r3
 8006162:	4603      	mov	r3, r0
 8006164:	817b      	strh	r3, [r7, #10]
 8006166:	460b      	mov	r3, r1
 8006168:	813b      	strh	r3, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800616e:	f7fe fba1 	bl	80048b4 <HAL_GetTick>
 8006172:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b20      	cmp	r3, #32
 800617e:	f040 80d9 	bne.w	8006334 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	2319      	movs	r3, #25
 8006188:	2201      	movs	r2, #1
 800618a:	496d      	ldr	r1, [pc, #436]	; (8006340 <HAL_I2C_Mem_Write+0x1ec>)
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fc7f 	bl	8006a90 <I2C_WaitOnFlagUntilTimeout>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006198:	2302      	movs	r3, #2
 800619a:	e0cc      	b.n	8006336 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_I2C_Mem_Write+0x56>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e0c5      	b.n	8006336 <HAL_I2C_Mem_Write+0x1e2>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d007      	beq.n	80061d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2221      	movs	r2, #33	; 0x21
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2240      	movs	r2, #64	; 0x40
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a3a      	ldr	r2, [r7, #32]
 80061fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4a4d      	ldr	r2, [pc, #308]	; (8006344 <HAL_I2C_Mem_Write+0x1f0>)
 8006210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006212:	88f8      	ldrh	r0, [r7, #6]
 8006214:	893a      	ldrh	r2, [r7, #8]
 8006216:	8979      	ldrh	r1, [r7, #10]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	9301      	str	r3, [sp, #4]
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	4603      	mov	r3, r0
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fab6 	bl	8006794 <I2C_RequestMemoryWrite>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d052      	beq.n	80062d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e081      	b.n	8006336 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 fd00 	bl	8006c3c <I2C_WaitOnTXEFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00d      	beq.n	800625e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	2b04      	cmp	r3, #4
 8006248:	d107      	bne.n	800625a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006258:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e06b      	b.n	8006336 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	781a      	ldrb	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006284:	b29b      	uxth	r3, r3
 8006286:	3b01      	subs	r3, #1
 8006288:	b29a      	uxth	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b04      	cmp	r3, #4
 800629a:	d11b      	bne.n	80062d4 <HAL_I2C_Mem_Write+0x180>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d017      	beq.n	80062d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	781a      	ldrb	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1aa      	bne.n	8006232 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 fcec 	bl	8006cbe <I2C_WaitOnBTFFlagUntilTimeout>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00d      	beq.n	8006308 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d107      	bne.n	8006304 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006302:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e016      	b.n	8006336 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	e000      	b.n	8006336 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006334:	2302      	movs	r3, #2
  }
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	00100002 	.word	0x00100002
 8006344:	ffff0000 	.word	0xffff0000

08006348 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08c      	sub	sp, #48	; 0x30
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	4608      	mov	r0, r1
 8006352:	4611      	mov	r1, r2
 8006354:	461a      	mov	r2, r3
 8006356:	4603      	mov	r3, r0
 8006358:	817b      	strh	r3, [r7, #10]
 800635a:	460b      	mov	r3, r1
 800635c:	813b      	strh	r3, [r7, #8]
 800635e:	4613      	mov	r3, r2
 8006360:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006362:	f7fe faa7 	bl	80048b4 <HAL_GetTick>
 8006366:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b20      	cmp	r3, #32
 8006372:	f040 8208 	bne.w	8006786 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	2319      	movs	r3, #25
 800637c:	2201      	movs	r2, #1
 800637e:	497b      	ldr	r1, [pc, #492]	; (800656c <HAL_I2C_Mem_Read+0x224>)
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 fb85 	bl	8006a90 <I2C_WaitOnFlagUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800638c:	2302      	movs	r3, #2
 800638e:	e1fb      	b.n	8006788 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_I2C_Mem_Read+0x56>
 800639a:	2302      	movs	r3, #2
 800639c:	e1f4      	b.n	8006788 <HAL_I2C_Mem_Read+0x440>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d007      	beq.n	80063c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2222      	movs	r2, #34	; 0x22
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2240      	movs	r2, #64	; 0x40
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80063f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a5b      	ldr	r2, [pc, #364]	; (8006570 <HAL_I2C_Mem_Read+0x228>)
 8006404:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006406:	88f8      	ldrh	r0, [r7, #6]
 8006408:	893a      	ldrh	r2, [r7, #8]
 800640a:	8979      	ldrh	r1, [r7, #10]
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	4603      	mov	r3, r0
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fa52 	bl	80068c0 <I2C_RequestMemoryRead>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e1b0      	b.n	8006788 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642a:	2b00      	cmp	r3, #0
 800642c:	d113      	bne.n	8006456 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800642e:	2300      	movs	r3, #0
 8006430:	623b      	str	r3, [r7, #32]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	623b      	str	r3, [r7, #32]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	623b      	str	r3, [r7, #32]
 8006442:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	e184      	b.n	8006760 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645a:	2b01      	cmp	r3, #1
 800645c:	d11b      	bne.n	8006496 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800646c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800646e:	2300      	movs	r3, #0
 8006470:	61fb      	str	r3, [r7, #28]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	61fb      	str	r3, [r7, #28]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	61fb      	str	r3, [r7, #28]
 8006482:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e164      	b.n	8006760 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649a:	2b02      	cmp	r3, #2
 800649c:	d11b      	bne.n	80064d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064be:	2300      	movs	r3, #0
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	61bb      	str	r3, [r7, #24]
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	e144      	b.n	8006760 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80064ec:	e138      	b.n	8006760 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	f200 80f1 	bhi.w	80066da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d123      	bne.n	8006548 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 fc1b 	bl	8006d40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e139      	b.n	8006788 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653c:	b29b      	uxth	r3, r3
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006546:	e10b      	b.n	8006760 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	2b02      	cmp	r3, #2
 800654e:	d14e      	bne.n	80065ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	2200      	movs	r2, #0
 8006558:	4906      	ldr	r1, [pc, #24]	; (8006574 <HAL_I2C_Mem_Read+0x22c>)
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 fa98 	bl	8006a90 <I2C_WaitOnFlagUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d008      	beq.n	8006578 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e10e      	b.n	8006788 <HAL_I2C_Mem_Read+0x440>
 800656a:	bf00      	nop
 800656c:	00100002 	.word	0x00100002
 8006570:	ffff0000 	.word	0xffff0000
 8006574:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691a      	ldr	r2, [r3, #16]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065ec:	e0b8      	b.n	8006760 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	2200      	movs	r2, #0
 80065f6:	4966      	ldr	r1, [pc, #408]	; (8006790 <HAL_I2C_Mem_Read+0x448>)
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 fa49 	bl	8006a90 <I2C_WaitOnFlagUntilTimeout>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e0bf      	b.n	8006788 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691a      	ldr	r2, [r3, #16]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	2200      	movs	r2, #0
 8006652:	494f      	ldr	r1, [pc, #316]	; (8006790 <HAL_I2C_Mem_Read+0x448>)
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fa1b 	bl	8006a90 <I2C_WaitOnFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e091      	b.n	8006788 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006672:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691a      	ldr	r2, [r3, #16]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691a      	ldr	r2, [r3, #16]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c2:	3b01      	subs	r3, #1
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066d8:	e042      	b.n	8006760 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 fb2e 	bl	8006d40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e04c      	b.n	8006788 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	691a      	ldr	r2, [r3, #16]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670a:	3b01      	subs	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b29a      	uxth	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b04      	cmp	r3, #4
 800672c:	d118      	bne.n	8006760 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800674a:	3b01      	subs	r3, #1
 800674c:	b29a      	uxth	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006764:	2b00      	cmp	r3, #0
 8006766:	f47f aec2 	bne.w	80064ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	e000      	b.n	8006788 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006786:	2302      	movs	r3, #2
  }
}
 8006788:	4618      	mov	r0, r3
 800678a:	3728      	adds	r7, #40	; 0x28
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	00010004 	.word	0x00010004

08006794 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af02      	add	r7, sp, #8
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	4608      	mov	r0, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	461a      	mov	r2, r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	817b      	strh	r3, [r7, #10]
 80067a6:	460b      	mov	r3, r1
 80067a8:	813b      	strh	r3, [r7, #8]
 80067aa:	4613      	mov	r3, r2
 80067ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 f960 	bl	8006a90 <I2C_WaitOnFlagUntilTimeout>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00d      	beq.n	80067f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e4:	d103      	bne.n	80067ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e05f      	b.n	80068b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067f2:	897b      	ldrh	r3, [r7, #10]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	461a      	mov	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006800:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	6a3a      	ldr	r2, [r7, #32]
 8006806:	492d      	ldr	r1, [pc, #180]	; (80068bc <I2C_RequestMemoryWrite+0x128>)
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f998 	bl	8006b3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e04c      	b.n	80068b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800682e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006830:	6a39      	ldr	r1, [r7, #32]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 fa02 	bl	8006c3c <I2C_WaitOnTXEFlagUntilTimeout>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00d      	beq.n	800685a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	2b04      	cmp	r3, #4
 8006844:	d107      	bne.n	8006856 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006854:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e02b      	b.n	80068b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d105      	bne.n	800686c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006860:	893b      	ldrh	r3, [r7, #8]
 8006862:	b2da      	uxtb	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	611a      	str	r2, [r3, #16]
 800686a:	e021      	b.n	80068b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800686c:	893b      	ldrh	r3, [r7, #8]
 800686e:	0a1b      	lsrs	r3, r3, #8
 8006870:	b29b      	uxth	r3, r3
 8006872:	b2da      	uxtb	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800687a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687c:	6a39      	ldr	r1, [r7, #32]
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 f9dc 	bl	8006c3c <I2C_WaitOnTXEFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00d      	beq.n	80068a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	2b04      	cmp	r3, #4
 8006890:	d107      	bne.n	80068a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e005      	b.n	80068b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068a6:	893b      	ldrh	r3, [r7, #8]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	00010002 	.word	0x00010002

080068c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	4608      	mov	r0, r1
 80068ca:	4611      	mov	r1, r2
 80068cc:	461a      	mov	r2, r3
 80068ce:	4603      	mov	r3, r0
 80068d0:	817b      	strh	r3, [r7, #10]
 80068d2:	460b      	mov	r3, r1
 80068d4:	813b      	strh	r3, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	2200      	movs	r2, #0
 8006902:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f8c2 	bl	8006a90 <I2C_WaitOnFlagUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00d      	beq.n	800692e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006920:	d103      	bne.n	800692a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006928:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e0aa      	b.n	8006a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800692e:	897b      	ldrh	r3, [r7, #10]
 8006930:	b2db      	uxtb	r3, r3
 8006932:	461a      	mov	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800693c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	6a3a      	ldr	r2, [r7, #32]
 8006942:	4952      	ldr	r1, [pc, #328]	; (8006a8c <I2C_RequestMemoryRead+0x1cc>)
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f8fa 	bl	8006b3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e097      	b.n	8006a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800696a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696c:	6a39      	ldr	r1, [r7, #32]
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f964 	bl	8006c3c <I2C_WaitOnTXEFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00d      	beq.n	8006996 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	2b04      	cmp	r3, #4
 8006980:	d107      	bne.n	8006992 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006990:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e076      	b.n	8006a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006996:	88fb      	ldrh	r3, [r7, #6]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d105      	bne.n	80069a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800699c:	893b      	ldrh	r3, [r7, #8]
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	611a      	str	r2, [r3, #16]
 80069a6:	e021      	b.n	80069ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80069a8:	893b      	ldrh	r3, [r7, #8]
 80069aa:	0a1b      	lsrs	r3, r3, #8
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b8:	6a39      	ldr	r1, [r7, #32]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f93e 	bl	8006c3c <I2C_WaitOnTXEFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00d      	beq.n	80069e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d107      	bne.n	80069de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e050      	b.n	8006a84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069e2:	893b      	ldrh	r3, [r7, #8]
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ee:	6a39      	ldr	r1, [r7, #32]
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f923 	bl	8006c3c <I2C_WaitOnTXEFlagUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00d      	beq.n	8006a18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d107      	bne.n	8006a14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e035      	b.n	8006a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f82b 	bl	8006a90 <I2C_WaitOnFlagUntilTimeout>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00d      	beq.n	8006a5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a4e:	d103      	bne.n	8006a58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e013      	b.n	8006a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a5c:	897b      	ldrh	r3, [r7, #10]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	f043 0301 	orr.w	r3, r3, #1
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	6a3a      	ldr	r2, [r7, #32]
 8006a70:	4906      	ldr	r1, [pc, #24]	; (8006a8c <I2C_RequestMemoryRead+0x1cc>)
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f863 	bl	8006b3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	00010002 	.word	0x00010002

08006a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006aa0:	e025      	b.n	8006aee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa8:	d021      	beq.n	8006aee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aaa:	f7fd ff03 	bl	80048b4 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d302      	bcc.n	8006ac0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d116      	bne.n	8006aee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f043 0220 	orr.w	r2, r3, #32
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e023      	b.n	8006b36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	0c1b      	lsrs	r3, r3, #16
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d10d      	bne.n	8006b14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	43da      	mvns	r2, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4013      	ands	r3, r2
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	bf0c      	ite	eq
 8006b0a:	2301      	moveq	r3, #1
 8006b0c:	2300      	movne	r3, #0
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	e00c      	b.n	8006b2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	43da      	mvns	r2, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	bf0c      	ite	eq
 8006b26:	2301      	moveq	r3, #1
 8006b28:	2300      	movne	r3, #0
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d0b6      	beq.n	8006aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
 8006b4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b4c:	e051      	b.n	8006bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b5c:	d123      	bne.n	8006ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	f043 0204 	orr.w	r2, r3, #4
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e046      	b.n	8006c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bac:	d021      	beq.n	8006bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bae:	f7fd fe81 	bl	80048b4 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d302      	bcc.n	8006bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d116      	bne.n	8006bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f043 0220 	orr.w	r2, r3, #32
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e020      	b.n	8006c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d10c      	bne.n	8006c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	43da      	mvns	r2, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4013      	ands	r3, r2
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	bf14      	ite	ne
 8006c0e:	2301      	movne	r3, #1
 8006c10:	2300      	moveq	r3, #0
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	e00b      	b.n	8006c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	43da      	mvns	r2, r3
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	4013      	ands	r3, r2
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bf14      	ite	ne
 8006c28:	2301      	movne	r3, #1
 8006c2a:	2300      	moveq	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d18d      	bne.n	8006b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c48:	e02d      	b.n	8006ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f8ce 	bl	8006dec <I2C_IsAcknowledgeFailed>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e02d      	b.n	8006cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d021      	beq.n	8006ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c62:	f7fd fe27 	bl	80048b4 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d116      	bne.n	8006ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	f043 0220 	orr.w	r2, r3, #32
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e007      	b.n	8006cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb0:	2b80      	cmp	r3, #128	; 0x80
 8006cb2:	d1ca      	bne.n	8006c4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	60f8      	str	r0, [r7, #12]
 8006cc6:	60b9      	str	r1, [r7, #8]
 8006cc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cca:	e02d      	b.n	8006d28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f88d 	bl	8006dec <I2C_IsAcknowledgeFailed>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e02d      	b.n	8006d38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce2:	d021      	beq.n	8006d28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce4:	f7fd fde6 	bl	80048b4 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d302      	bcc.n	8006cfa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d116      	bne.n	8006d28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	f043 0220 	orr.w	r2, r3, #32
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e007      	b.n	8006d38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d1ca      	bne.n	8006ccc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d4c:	e042      	b.n	8006dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	2b10      	cmp	r3, #16
 8006d5a:	d119      	bne.n	8006d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0210 	mvn.w	r2, #16
 8006d64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e029      	b.n	8006de4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d90:	f7fd fd90 	bl	80048b4 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d302      	bcc.n	8006da6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d116      	bne.n	8006dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	f043 0220 	orr.w	r2, r3, #32
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e007      	b.n	8006de4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d1b5      	bne.n	8006d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e02:	d11b      	bne.n	8006e3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	f043 0204 	orr.w	r2, r3, #4
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e000      	b.n	8006e3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e264      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d075      	beq.n	8006f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e6a:	4ba3      	ldr	r3, [pc, #652]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 030c 	and.w	r3, r3, #12
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d00c      	beq.n	8006e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e76:	4ba0      	ldr	r3, [pc, #640]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e7e:	2b08      	cmp	r3, #8
 8006e80:	d112      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e82:	4b9d      	ldr	r3, [pc, #628]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e8e:	d10b      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e90:	4b99      	ldr	r3, [pc, #612]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d05b      	beq.n	8006f54 <HAL_RCC_OscConfig+0x108>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d157      	bne.n	8006f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e23f      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb0:	d106      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x74>
 8006eb2:	4b91      	ldr	r3, [pc, #580]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a90      	ldr	r2, [pc, #576]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	e01d      	b.n	8006efc <HAL_RCC_OscConfig+0xb0>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ec8:	d10c      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x98>
 8006eca:	4b8b      	ldr	r3, [pc, #556]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a8a      	ldr	r2, [pc, #552]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	4b88      	ldr	r3, [pc, #544]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a87      	ldr	r2, [pc, #540]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	e00b      	b.n	8006efc <HAL_RCC_OscConfig+0xb0>
 8006ee4:	4b84      	ldr	r3, [pc, #528]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a83      	ldr	r2, [pc, #524]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	4b81      	ldr	r3, [pc, #516]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a80      	ldr	r2, [pc, #512]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d013      	beq.n	8006f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f04:	f7fd fcd6 	bl	80048b4 <HAL_GetTick>
 8006f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f0a:	e008      	b.n	8006f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f0c:	f7fd fcd2 	bl	80048b4 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b64      	cmp	r3, #100	; 0x64
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e204      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f1e:	4b76      	ldr	r3, [pc, #472]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0f0      	beq.n	8006f0c <HAL_RCC_OscConfig+0xc0>
 8006f2a:	e014      	b.n	8006f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2c:	f7fd fcc2 	bl	80048b4 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f34:	f7fd fcbe 	bl	80048b4 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b64      	cmp	r3, #100	; 0x64
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e1f0      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f46:	4b6c      	ldr	r3, [pc, #432]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1f0      	bne.n	8006f34 <HAL_RCC_OscConfig+0xe8>
 8006f52:	e000      	b.n	8006f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d063      	beq.n	800702a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f62:	4b65      	ldr	r3, [pc, #404]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 030c 	and.w	r3, r3, #12
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00b      	beq.n	8006f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f6e:	4b62      	ldr	r3, [pc, #392]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	d11c      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f7a:	4b5f      	ldr	r3, [pc, #380]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d116      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f86:	4b5c      	ldr	r3, [pc, #368]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d005      	beq.n	8006f9e <HAL_RCC_OscConfig+0x152>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d001      	beq.n	8006f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e1c4      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f9e:	4b56      	ldr	r3, [pc, #344]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	4952      	ldr	r1, [pc, #328]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fb2:	e03a      	b.n	800702a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d020      	beq.n	8006ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fbc:	4b4f      	ldr	r3, [pc, #316]	; (80070fc <HAL_RCC_OscConfig+0x2b0>)
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc2:	f7fd fc77 	bl	80048b4 <HAL_GetTick>
 8006fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fca:	f7fd fc73 	bl	80048b4 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e1a5      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fdc:	4b46      	ldr	r3, [pc, #280]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0f0      	beq.n	8006fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fe8:	4b43      	ldr	r3, [pc, #268]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	4940      	ldr	r1, [pc, #256]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	600b      	str	r3, [r1, #0]
 8006ffc:	e015      	b.n	800702a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ffe:	4b3f      	ldr	r3, [pc, #252]	; (80070fc <HAL_RCC_OscConfig+0x2b0>)
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007004:	f7fd fc56 	bl	80048b4 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800700c:	f7fd fc52 	bl	80048b4 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e184      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800701e:	4b36      	ldr	r3, [pc, #216]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f0      	bne.n	800700c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	2b00      	cmp	r3, #0
 8007034:	d030      	beq.n	8007098 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d016      	beq.n	800706c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800703e:	4b30      	ldr	r3, [pc, #192]	; (8007100 <HAL_RCC_OscConfig+0x2b4>)
 8007040:	2201      	movs	r2, #1
 8007042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007044:	f7fd fc36 	bl	80048b4 <HAL_GetTick>
 8007048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800704a:	e008      	b.n	800705e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800704c:	f7fd fc32 	bl	80048b4 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e164      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800705e:	4b26      	ldr	r3, [pc, #152]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 8007060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f0      	beq.n	800704c <HAL_RCC_OscConfig+0x200>
 800706a:	e015      	b.n	8007098 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800706c:	4b24      	ldr	r3, [pc, #144]	; (8007100 <HAL_RCC_OscConfig+0x2b4>)
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007072:	f7fd fc1f 	bl	80048b4 <HAL_GetTick>
 8007076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007078:	e008      	b.n	800708c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800707a:	f7fd fc1b 	bl	80048b4 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	2b02      	cmp	r3, #2
 8007086:	d901      	bls.n	800708c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e14d      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800708c:	4b1a      	ldr	r3, [pc, #104]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 800708e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1f0      	bne.n	800707a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 80a0 	beq.w	80071e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070a6:	2300      	movs	r3, #0
 80070a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070aa:	4b13      	ldr	r3, [pc, #76]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10f      	bne.n	80070d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070b6:	2300      	movs	r3, #0
 80070b8:	60bb      	str	r3, [r7, #8]
 80070ba:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	4a0e      	ldr	r2, [pc, #56]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 80070c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070c4:	6413      	str	r3, [r2, #64]	; 0x40
 80070c6:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <HAL_RCC_OscConfig+0x2ac>)
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ce:	60bb      	str	r3, [r7, #8]
 80070d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070d2:	2301      	movs	r3, #1
 80070d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070d6:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <HAL_RCC_OscConfig+0x2b8>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d121      	bne.n	8007126 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070e2:	4b08      	ldr	r3, [pc, #32]	; (8007104 <HAL_RCC_OscConfig+0x2b8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a07      	ldr	r2, [pc, #28]	; (8007104 <HAL_RCC_OscConfig+0x2b8>)
 80070e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070ee:	f7fd fbe1 	bl	80048b4 <HAL_GetTick>
 80070f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070f4:	e011      	b.n	800711a <HAL_RCC_OscConfig+0x2ce>
 80070f6:	bf00      	nop
 80070f8:	40023800 	.word	0x40023800
 80070fc:	42470000 	.word	0x42470000
 8007100:	42470e80 	.word	0x42470e80
 8007104:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007108:	f7fd fbd4 	bl	80048b4 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e106      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800711a:	4b85      	ldr	r3, [pc, #532]	; (8007330 <HAL_RCC_OscConfig+0x4e4>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f0      	beq.n	8007108 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d106      	bne.n	800713c <HAL_RCC_OscConfig+0x2f0>
 800712e:	4b81      	ldr	r3, [pc, #516]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 8007130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007132:	4a80      	ldr	r2, [pc, #512]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 8007134:	f043 0301 	orr.w	r3, r3, #1
 8007138:	6713      	str	r3, [r2, #112]	; 0x70
 800713a:	e01c      	b.n	8007176 <HAL_RCC_OscConfig+0x32a>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	2b05      	cmp	r3, #5
 8007142:	d10c      	bne.n	800715e <HAL_RCC_OscConfig+0x312>
 8007144:	4b7b      	ldr	r3, [pc, #492]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 8007146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007148:	4a7a      	ldr	r2, [pc, #488]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 800714a:	f043 0304 	orr.w	r3, r3, #4
 800714e:	6713      	str	r3, [r2, #112]	; 0x70
 8007150:	4b78      	ldr	r3, [pc, #480]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 8007152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007154:	4a77      	ldr	r2, [pc, #476]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 8007156:	f043 0301 	orr.w	r3, r3, #1
 800715a:	6713      	str	r3, [r2, #112]	; 0x70
 800715c:	e00b      	b.n	8007176 <HAL_RCC_OscConfig+0x32a>
 800715e:	4b75      	ldr	r3, [pc, #468]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 8007160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007162:	4a74      	ldr	r2, [pc, #464]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 8007164:	f023 0301 	bic.w	r3, r3, #1
 8007168:	6713      	str	r3, [r2, #112]	; 0x70
 800716a:	4b72      	ldr	r3, [pc, #456]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 800716c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716e:	4a71      	ldr	r2, [pc, #452]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 8007170:	f023 0304 	bic.w	r3, r3, #4
 8007174:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d015      	beq.n	80071aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800717e:	f7fd fb99 	bl	80048b4 <HAL_GetTick>
 8007182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007184:	e00a      	b.n	800719c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007186:	f7fd fb95 	bl	80048b4 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	f241 3288 	movw	r2, #5000	; 0x1388
 8007194:	4293      	cmp	r3, r2
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e0c5      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800719c:	4b65      	ldr	r3, [pc, #404]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 800719e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0ee      	beq.n	8007186 <HAL_RCC_OscConfig+0x33a>
 80071a8:	e014      	b.n	80071d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071aa:	f7fd fb83 	bl	80048b4 <HAL_GetTick>
 80071ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071b0:	e00a      	b.n	80071c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071b2:	f7fd fb7f 	bl	80048b4 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e0af      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071c8:	4b5a      	ldr	r3, [pc, #360]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 80071ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1ee      	bne.n	80071b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d105      	bne.n	80071e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071da:	4b56      	ldr	r3, [pc, #344]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	4a55      	ldr	r2, [pc, #340]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 80071e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 809b 	beq.w	8007326 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071f0:	4b50      	ldr	r3, [pc, #320]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f003 030c 	and.w	r3, r3, #12
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d05c      	beq.n	80072b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d141      	bne.n	8007288 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007204:	4b4c      	ldr	r3, [pc, #304]	; (8007338 <HAL_RCC_OscConfig+0x4ec>)
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800720a:	f7fd fb53 	bl	80048b4 <HAL_GetTick>
 800720e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007210:	e008      	b.n	8007224 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007212:	f7fd fb4f 	bl	80048b4 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d901      	bls.n	8007224 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e081      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007224:	4b43      	ldr	r3, [pc, #268]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1f0      	bne.n	8007212 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	431a      	orrs	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	019b      	lsls	r3, r3, #6
 8007240:	431a      	orrs	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007246:	085b      	lsrs	r3, r3, #1
 8007248:	3b01      	subs	r3, #1
 800724a:	041b      	lsls	r3, r3, #16
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	061b      	lsls	r3, r3, #24
 8007254:	4937      	ldr	r1, [pc, #220]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 8007256:	4313      	orrs	r3, r2
 8007258:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800725a:	4b37      	ldr	r3, [pc, #220]	; (8007338 <HAL_RCC_OscConfig+0x4ec>)
 800725c:	2201      	movs	r2, #1
 800725e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007260:	f7fd fb28 	bl	80048b4 <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007268:	f7fd fb24 	bl	80048b4 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e056      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800727a:	4b2e      	ldr	r3, [pc, #184]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0f0      	beq.n	8007268 <HAL_RCC_OscConfig+0x41c>
 8007286:	e04e      	b.n	8007326 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007288:	4b2b      	ldr	r3, [pc, #172]	; (8007338 <HAL_RCC_OscConfig+0x4ec>)
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800728e:	f7fd fb11 	bl	80048b4 <HAL_GetTick>
 8007292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007294:	e008      	b.n	80072a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007296:	f7fd fb0d 	bl	80048b4 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d901      	bls.n	80072a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e03f      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072a8:	4b22      	ldr	r3, [pc, #136]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1f0      	bne.n	8007296 <HAL_RCC_OscConfig+0x44a>
 80072b4:	e037      	b.n	8007326 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e032      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072c2:	4b1c      	ldr	r3, [pc, #112]	; (8007334 <HAL_RCC_OscConfig+0x4e8>)
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d028      	beq.n	8007322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072da:	429a      	cmp	r2, r3
 80072dc:	d121      	bne.n	8007322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d11a      	bne.n	8007322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072f2:	4013      	ands	r3, r2
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d111      	bne.n	8007322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007308:	085b      	lsrs	r3, r3, #1
 800730a:	3b01      	subs	r3, #1
 800730c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800730e:	429a      	cmp	r2, r3
 8007310:	d107      	bne.n	8007322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800731e:	429a      	cmp	r2, r3
 8007320:	d001      	beq.n	8007326 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	40007000 	.word	0x40007000
 8007334:	40023800 	.word	0x40023800
 8007338:	42470060 	.word	0x42470060

0800733c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e0cc      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007350:	4b68      	ldr	r3, [pc, #416]	; (80074f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d90c      	bls.n	8007378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800735e:	4b65      	ldr	r3, [pc, #404]	; (80074f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007366:	4b63      	ldr	r3, [pc, #396]	; (80074f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0307 	and.w	r3, r3, #7
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	429a      	cmp	r2, r3
 8007372:	d001      	beq.n	8007378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e0b8      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d020      	beq.n	80073c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007390:	4b59      	ldr	r3, [pc, #356]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	4a58      	ldr	r2, [pc, #352]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800739a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073a8:	4b53      	ldr	r3, [pc, #332]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	4a52      	ldr	r2, [pc, #328]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073b4:	4b50      	ldr	r3, [pc, #320]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	494d      	ldr	r1, [pc, #308]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d044      	beq.n	800745c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d107      	bne.n	80073ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073da:	4b47      	ldr	r3, [pc, #284]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d119      	bne.n	800741a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e07f      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d003      	beq.n	80073fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d107      	bne.n	800740a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073fa:	4b3f      	ldr	r3, [pc, #252]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d109      	bne.n	800741a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e06f      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800740a:	4b3b      	ldr	r3, [pc, #236]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e067      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800741a:	4b37      	ldr	r3, [pc, #220]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f023 0203 	bic.w	r2, r3, #3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	4934      	ldr	r1, [pc, #208]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007428:	4313      	orrs	r3, r2
 800742a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800742c:	f7fd fa42 	bl	80048b4 <HAL_GetTick>
 8007430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007432:	e00a      	b.n	800744a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007434:	f7fd fa3e 	bl	80048b4 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007442:	4293      	cmp	r3, r2
 8007444:	d901      	bls.n	800744a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e04f      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800744a:	4b2b      	ldr	r3, [pc, #172]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 020c 	and.w	r2, r3, #12
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	429a      	cmp	r2, r3
 800745a:	d1eb      	bne.n	8007434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800745c:	4b25      	ldr	r3, [pc, #148]	; (80074f4 <HAL_RCC_ClockConfig+0x1b8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d20c      	bcs.n	8007484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746a:	4b22      	ldr	r3, [pc, #136]	; (80074f4 <HAL_RCC_ClockConfig+0x1b8>)
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007472:	4b20      	ldr	r3, [pc, #128]	; (80074f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d001      	beq.n	8007484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e032      	b.n	80074ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007490:	4b19      	ldr	r3, [pc, #100]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	4916      	ldr	r1, [pc, #88]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d009      	beq.n	80074c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074ae:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	00db      	lsls	r3, r3, #3
 80074bc:	490e      	ldr	r1, [pc, #56]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074c2:	f000 f821 	bl	8007508 <HAL_RCC_GetSysClockFreq>
 80074c6:	4602      	mov	r2, r0
 80074c8:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	091b      	lsrs	r3, r3, #4
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	490a      	ldr	r1, [pc, #40]	; (80074fc <HAL_RCC_ClockConfig+0x1c0>)
 80074d4:	5ccb      	ldrb	r3, [r1, r3]
 80074d6:	fa22 f303 	lsr.w	r3, r2, r3
 80074da:	4a09      	ldr	r2, [pc, #36]	; (8007500 <HAL_RCC_ClockConfig+0x1c4>)
 80074dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <HAL_RCC_ClockConfig+0x1c8>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fd f9a2 	bl	800482c <HAL_InitTick>

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	40023c00 	.word	0x40023c00
 80074f8:	40023800 	.word	0x40023800
 80074fc:	0800dbc8 	.word	0x0800dbc8
 8007500:	2000002c 	.word	0x2000002c
 8007504:	20000030 	.word	0x20000030

08007508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	607b      	str	r3, [r7, #4]
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	2300      	movs	r3, #0
 800751a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007520:	4b67      	ldr	r3, [pc, #412]	; (80076c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f003 030c 	and.w	r3, r3, #12
 8007528:	2b08      	cmp	r3, #8
 800752a:	d00d      	beq.n	8007548 <HAL_RCC_GetSysClockFreq+0x40>
 800752c:	2b08      	cmp	r3, #8
 800752e:	f200 80bd 	bhi.w	80076ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <HAL_RCC_GetSysClockFreq+0x34>
 8007536:	2b04      	cmp	r3, #4
 8007538:	d003      	beq.n	8007542 <HAL_RCC_GetSysClockFreq+0x3a>
 800753a:	e0b7      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800753c:	4b61      	ldr	r3, [pc, #388]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800753e:	60bb      	str	r3, [r7, #8]
       break;
 8007540:	e0b7      	b.n	80076b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007542:	4b61      	ldr	r3, [pc, #388]	; (80076c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007544:	60bb      	str	r3, [r7, #8]
      break;
 8007546:	e0b4      	b.n	80076b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007548:	4b5d      	ldr	r3, [pc, #372]	; (80076c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007550:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007552:	4b5b      	ldr	r3, [pc, #364]	; (80076c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d04d      	beq.n	80075fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800755e:	4b58      	ldr	r3, [pc, #352]	; (80076c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	099b      	lsrs	r3, r3, #6
 8007564:	461a      	mov	r2, r3
 8007566:	f04f 0300 	mov.w	r3, #0
 800756a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800756e:	f04f 0100 	mov.w	r1, #0
 8007572:	ea02 0800 	and.w	r8, r2, r0
 8007576:	ea03 0901 	and.w	r9, r3, r1
 800757a:	4640      	mov	r0, r8
 800757c:	4649      	mov	r1, r9
 800757e:	f04f 0200 	mov.w	r2, #0
 8007582:	f04f 0300 	mov.w	r3, #0
 8007586:	014b      	lsls	r3, r1, #5
 8007588:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800758c:	0142      	lsls	r2, r0, #5
 800758e:	4610      	mov	r0, r2
 8007590:	4619      	mov	r1, r3
 8007592:	ebb0 0008 	subs.w	r0, r0, r8
 8007596:	eb61 0109 	sbc.w	r1, r1, r9
 800759a:	f04f 0200 	mov.w	r2, #0
 800759e:	f04f 0300 	mov.w	r3, #0
 80075a2:	018b      	lsls	r3, r1, #6
 80075a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80075a8:	0182      	lsls	r2, r0, #6
 80075aa:	1a12      	subs	r2, r2, r0
 80075ac:	eb63 0301 	sbc.w	r3, r3, r1
 80075b0:	f04f 0000 	mov.w	r0, #0
 80075b4:	f04f 0100 	mov.w	r1, #0
 80075b8:	00d9      	lsls	r1, r3, #3
 80075ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075be:	00d0      	lsls	r0, r2, #3
 80075c0:	4602      	mov	r2, r0
 80075c2:	460b      	mov	r3, r1
 80075c4:	eb12 0208 	adds.w	r2, r2, r8
 80075c8:	eb43 0309 	adc.w	r3, r3, r9
 80075cc:	f04f 0000 	mov.w	r0, #0
 80075d0:	f04f 0100 	mov.w	r1, #0
 80075d4:	0259      	lsls	r1, r3, #9
 80075d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80075da:	0250      	lsls	r0, r2, #9
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4610      	mov	r0, r2
 80075e2:	4619      	mov	r1, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	461a      	mov	r2, r3
 80075e8:	f04f 0300 	mov.w	r3, #0
 80075ec:	f7f9 fa7e 	bl	8000aec <__aeabi_uldivmod>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4613      	mov	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	e04a      	b.n	8007690 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075fa:	4b31      	ldr	r3, [pc, #196]	; (80076c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	099b      	lsrs	r3, r3, #6
 8007600:	461a      	mov	r2, r3
 8007602:	f04f 0300 	mov.w	r3, #0
 8007606:	f240 10ff 	movw	r0, #511	; 0x1ff
 800760a:	f04f 0100 	mov.w	r1, #0
 800760e:	ea02 0400 	and.w	r4, r2, r0
 8007612:	ea03 0501 	and.w	r5, r3, r1
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f04f 0200 	mov.w	r2, #0
 800761e:	f04f 0300 	mov.w	r3, #0
 8007622:	014b      	lsls	r3, r1, #5
 8007624:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007628:	0142      	lsls	r2, r0, #5
 800762a:	4610      	mov	r0, r2
 800762c:	4619      	mov	r1, r3
 800762e:	1b00      	subs	r0, r0, r4
 8007630:	eb61 0105 	sbc.w	r1, r1, r5
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	018b      	lsls	r3, r1, #6
 800763e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007642:	0182      	lsls	r2, r0, #6
 8007644:	1a12      	subs	r2, r2, r0
 8007646:	eb63 0301 	sbc.w	r3, r3, r1
 800764a:	f04f 0000 	mov.w	r0, #0
 800764e:	f04f 0100 	mov.w	r1, #0
 8007652:	00d9      	lsls	r1, r3, #3
 8007654:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007658:	00d0      	lsls	r0, r2, #3
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	1912      	adds	r2, r2, r4
 8007660:	eb45 0303 	adc.w	r3, r5, r3
 8007664:	f04f 0000 	mov.w	r0, #0
 8007668:	f04f 0100 	mov.w	r1, #0
 800766c:	0299      	lsls	r1, r3, #10
 800766e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007672:	0290      	lsls	r0, r2, #10
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4610      	mov	r0, r2
 800767a:	4619      	mov	r1, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	461a      	mov	r2, r3
 8007680:	f04f 0300 	mov.w	r3, #0
 8007684:	f7f9 fa32 	bl	8000aec <__aeabi_uldivmod>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4613      	mov	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	0c1b      	lsrs	r3, r3, #16
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	3301      	adds	r3, #1
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a8:	60bb      	str	r3, [r7, #8]
      break;
 80076aa:	e002      	b.n	80076b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076ac:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80076ae:	60bb      	str	r3, [r7, #8]
      break;
 80076b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076b2:	68bb      	ldr	r3, [r7, #8]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80076be:	bf00      	nop
 80076c0:	40023800 	.word	0x40023800
 80076c4:	00f42400 	.word	0x00f42400
 80076c8:	007a1200 	.word	0x007a1200

080076cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076d0:	4b03      	ldr	r3, [pc, #12]	; (80076e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80076d2:	681b      	ldr	r3, [r3, #0]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	2000002c 	.word	0x2000002c

080076e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076e8:	f7ff fff0 	bl	80076cc <HAL_RCC_GetHCLKFreq>
 80076ec:	4602      	mov	r2, r0
 80076ee:	4b05      	ldr	r3, [pc, #20]	; (8007704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	0a9b      	lsrs	r3, r3, #10
 80076f4:	f003 0307 	and.w	r3, r3, #7
 80076f8:	4903      	ldr	r1, [pc, #12]	; (8007708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076fa:	5ccb      	ldrb	r3, [r1, r3]
 80076fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007700:	4618      	mov	r0, r3
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40023800 	.word	0x40023800
 8007708:	0800dbd8 	.word	0x0800dbd8

0800770c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007710:	f7ff ffdc 	bl	80076cc <HAL_RCC_GetHCLKFreq>
 8007714:	4602      	mov	r2, r0
 8007716:	4b05      	ldr	r3, [pc, #20]	; (800772c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	0b5b      	lsrs	r3, r3, #13
 800771c:	f003 0307 	and.w	r3, r3, #7
 8007720:	4903      	ldr	r1, [pc, #12]	; (8007730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007722:	5ccb      	ldrb	r3, [r1, r3]
 8007724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007728:	4618      	mov	r0, r3
 800772a:	bd80      	pop	{r7, pc}
 800772c:	40023800 	.word	0x40023800
 8007730:	0800dbd8 	.word	0x0800dbd8

08007734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e07b      	b.n	800783e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	2b00      	cmp	r3, #0
 800774c:	d108      	bne.n	8007760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007756:	d009      	beq.n	800776c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	61da      	str	r2, [r3, #28]
 800775e:	e005      	b.n	800776c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d106      	bne.n	800778c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fc f948 	bl	8003a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077b4:	431a      	orrs	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	431a      	orrs	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	431a      	orrs	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077dc:	431a      	orrs	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077e6:	431a      	orrs	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f0:	ea42 0103 	orr.w	r1, r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	0c1b      	lsrs	r3, r3, #16
 800780a:	f003 0104 	and.w	r1, r3, #4
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	f003 0210 	and.w	r2, r3, #16
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69da      	ldr	r2, [r3, #28]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800782c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b088      	sub	sp, #32
 800784a:	af02      	add	r7, sp, #8
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	603b      	str	r3, [r7, #0]
 8007852:	4613      	mov	r3, r2
 8007854:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007862:	d112      	bne.n	800788a <HAL_SPI_Receive+0x44>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10e      	bne.n	800788a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2204      	movs	r2, #4
 8007870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007874:	88fa      	ldrh	r2, [r7, #6]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	4613      	mov	r3, r2
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 f8f1 	bl	8007a68 <HAL_SPI_TransmitReceive>
 8007886:	4603      	mov	r3, r0
 8007888:	e0ea      	b.n	8007a60 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_SPI_Receive+0x52>
 8007894:	2302      	movs	r3, #2
 8007896:	e0e3      	b.n	8007a60 <HAL_SPI_Receive+0x21a>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078a0:	f7fd f808 	bl	80048b4 <HAL_GetTick>
 80078a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d002      	beq.n	80078b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80078b2:	2302      	movs	r3, #2
 80078b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078b6:	e0ca      	b.n	8007a4e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <HAL_SPI_Receive+0x7e>
 80078be:	88fb      	ldrh	r3, [r7, #6]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d102      	bne.n	80078ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078c8:	e0c1      	b.n	8007a4e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2204      	movs	r2, #4
 80078ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	88fa      	ldrh	r2, [r7, #6]
 80078e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007910:	d10f      	bne.n	8007932 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007920:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007930:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793c:	2b40      	cmp	r3, #64	; 0x40
 800793e:	d007      	beq.n	8007950 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800794e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d162      	bne.n	8007a1e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007958:	e02e      	b.n	80079b8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b01      	cmp	r3, #1
 8007966:	d115      	bne.n	8007994 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f103 020c 	add.w	r2, r3, #12
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	7812      	ldrb	r2, [r2, #0]
 8007976:	b2d2      	uxtb	r2, r2
 8007978:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007988:	b29b      	uxth	r3, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	b29a      	uxth	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007992:	e011      	b.n	80079b8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007994:	f7fc ff8e 	bl	80048b4 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d803      	bhi.n	80079ac <HAL_SPI_Receive+0x166>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079aa:	d102      	bne.n	80079b2 <HAL_SPI_Receive+0x16c>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d102      	bne.n	80079b8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80079b6:	e04a      	b.n	8007a4e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079bc:	b29b      	uxth	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1cb      	bne.n	800795a <HAL_SPI_Receive+0x114>
 80079c2:	e031      	b.n	8007a28 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d113      	bne.n	80079fa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079dc:	b292      	uxth	r2, r2
 80079de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e4:	1c9a      	adds	r2, r3, #2
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	3b01      	subs	r3, #1
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079f8:	e011      	b.n	8007a1e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079fa:	f7fc ff5b 	bl	80048b4 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d803      	bhi.n	8007a12 <HAL_SPI_Receive+0x1cc>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d102      	bne.n	8007a18 <HAL_SPI_Receive+0x1d2>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d102      	bne.n	8007a1e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a1c:	e017      	b.n	8007a4e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1cd      	bne.n	80079c4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 fa45 	bl	8007ebc <SPI_EndRxTransaction>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	75fb      	strb	r3, [r7, #23]
 8007a4a:	e000      	b.n	8007a4e <HAL_SPI_Receive+0x208>
  }

error :
 8007a4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3718      	adds	r7, #24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08c      	sub	sp, #48	; 0x30
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a76:	2301      	movs	r3, #1
 8007a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d101      	bne.n	8007a8e <HAL_SPI_TransmitReceive+0x26>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e18a      	b.n	8007da4 <HAL_SPI_TransmitReceive+0x33c>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a96:	f7fc ff0d 	bl	80048b4 <HAL_GetTick>
 8007a9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007aac:	887b      	ldrh	r3, [r7, #2]
 8007aae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d00f      	beq.n	8007ad8 <HAL_SPI_TransmitReceive+0x70>
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007abe:	d107      	bne.n	8007ad0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d103      	bne.n	8007ad0 <HAL_SPI_TransmitReceive+0x68>
 8007ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d003      	beq.n	8007ad8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007ad6:	e15b      	b.n	8007d90 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d005      	beq.n	8007aea <HAL_SPI_TransmitReceive+0x82>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_SPI_TransmitReceive+0x82>
 8007ae4:	887b      	ldrh	r3, [r7, #2]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d103      	bne.n	8007af2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007af0:	e14e      	b.n	8007d90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d003      	beq.n	8007b06 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2205      	movs	r2, #5
 8007b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	887a      	ldrh	r2, [r7, #2]
 8007b16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	887a      	ldrh	r2, [r7, #2]
 8007b1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	887a      	ldrh	r2, [r7, #2]
 8007b28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	887a      	ldrh	r2, [r7, #2]
 8007b2e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b46:	2b40      	cmp	r3, #64	; 0x40
 8007b48:	d007      	beq.n	8007b5a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b62:	d178      	bne.n	8007c56 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <HAL_SPI_TransmitReceive+0x10a>
 8007b6c:	8b7b      	ldrh	r3, [r7, #26]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d166      	bne.n	8007c40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b76:	881a      	ldrh	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b82:	1c9a      	adds	r2, r3, #2
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b96:	e053      	b.n	8007c40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d11b      	bne.n	8007bde <HAL_SPI_TransmitReceive+0x176>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d016      	beq.n	8007bde <HAL_SPI_TransmitReceive+0x176>
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d113      	bne.n	8007bde <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bba:	881a      	ldrh	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc6:	1c9a      	adds	r2, r3, #2
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d119      	bne.n	8007c20 <HAL_SPI_TransmitReceive+0x1b8>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d014      	beq.n	8007c20 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c00:	b292      	uxth	r2, r2
 8007c02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c08:	1c9a      	adds	r2, r3, #2
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c20:	f7fc fe48 	bl	80048b4 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d807      	bhi.n	8007c40 <HAL_SPI_TransmitReceive+0x1d8>
 8007c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c36:	d003      	beq.n	8007c40 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c3e:	e0a7      	b.n	8007d90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1a6      	bne.n	8007b98 <HAL_SPI_TransmitReceive+0x130>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1a1      	bne.n	8007b98 <HAL_SPI_TransmitReceive+0x130>
 8007c54:	e07c      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <HAL_SPI_TransmitReceive+0x1fc>
 8007c5e:	8b7b      	ldrh	r3, [r7, #26]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d16b      	bne.n	8007d3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	7812      	ldrb	r2, [r2, #0]
 8007c70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c8a:	e057      	b.n	8007d3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d11c      	bne.n	8007cd4 <HAL_SPI_TransmitReceive+0x26c>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d017      	beq.n	8007cd4 <HAL_SPI_TransmitReceive+0x26c>
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d114      	bne.n	8007cd4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	330c      	adds	r3, #12
 8007cb4:	7812      	ldrb	r2, [r2, #0]
 8007cb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d119      	bne.n	8007d16 <HAL_SPI_TransmitReceive+0x2ae>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d014      	beq.n	8007d16 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d12:	2301      	movs	r3, #1
 8007d14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d16:	f7fc fdcd 	bl	80048b4 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d803      	bhi.n	8007d2e <HAL_SPI_TransmitReceive+0x2c6>
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2c:	d102      	bne.n	8007d34 <HAL_SPI_TransmitReceive+0x2cc>
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d103      	bne.n	8007d3c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d3a:	e029      	b.n	8007d90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1a2      	bne.n	8007c8c <HAL_SPI_TransmitReceive+0x224>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d19d      	bne.n	8007c8c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f917 	bl	8007f88 <SPI_EndRxTxTransaction>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d006      	beq.n	8007d6e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007d6c:	e010      	b.n	8007d90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10b      	bne.n	8007d8e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d76:	2300      	movs	r3, #0
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	617b      	str	r3, [r7, #20]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	617b      	str	r3, [r7, #20]
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	e000      	b.n	8007d90 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007da0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3730      	adds	r7, #48	; 0x30
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	4613      	mov	r3, r2
 8007dba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007dbc:	f7fc fd7a 	bl	80048b4 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	1a9b      	subs	r3, r3, r2
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	4413      	add	r3, r2
 8007dca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007dcc:	f7fc fd72 	bl	80048b4 <HAL_GetTick>
 8007dd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dd2:	4b39      	ldr	r3, [pc, #228]	; (8007eb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	015b      	lsls	r3, r3, #5
 8007dd8:	0d1b      	lsrs	r3, r3, #20
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	fb02 f303 	mul.w	r3, r2, r3
 8007de0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007de2:	e054      	b.n	8007e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dea:	d050      	beq.n	8007e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dec:	f7fc fd62 	bl	80048b4 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	69fa      	ldr	r2, [r7, #28]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d902      	bls.n	8007e02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d13d      	bne.n	8007e7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e1a:	d111      	bne.n	8007e40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e24:	d004      	beq.n	8007e30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e2e:	d107      	bne.n	8007e40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e48:	d10f      	bne.n	8007e6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e017      	b.n	8007eae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	4013      	ands	r3, r2
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	bf0c      	ite	eq
 8007e9e:	2301      	moveq	r3, #1
 8007ea0:	2300      	movne	r3, #0
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d19b      	bne.n	8007de4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3720      	adds	r7, #32
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	2000002c 	.word	0x2000002c

08007ebc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ed0:	d111      	bne.n	8007ef6 <SPI_EndRxTransaction+0x3a>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eda:	d004      	beq.n	8007ee6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ee4:	d107      	bne.n	8007ef6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ef4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007efe:	d12a      	bne.n	8007f56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f08:	d012      	beq.n	8007f30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2200      	movs	r2, #0
 8007f12:	2180      	movs	r1, #128	; 0x80
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7ff ff49 	bl	8007dac <SPI_WaitFlagStateUntilTimeout>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d02d      	beq.n	8007f7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f24:	f043 0220 	orr.w	r2, r3, #32
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e026      	b.n	8007f7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2200      	movs	r2, #0
 8007f38:	2101      	movs	r1, #1
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7ff ff36 	bl	8007dac <SPI_WaitFlagStateUntilTimeout>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d01a      	beq.n	8007f7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4a:	f043 0220 	orr.w	r2, r3, #32
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e013      	b.n	8007f7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2101      	movs	r1, #1
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f7ff ff23 	bl	8007dac <SPI_WaitFlagStateUntilTimeout>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d007      	beq.n	8007f7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f70:	f043 0220 	orr.w	r2, r3, #32
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e000      	b.n	8007f7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f94:	4b1b      	ldr	r3, [pc, #108]	; (8008004 <SPI_EndRxTxTransaction+0x7c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a1b      	ldr	r2, [pc, #108]	; (8008008 <SPI_EndRxTxTransaction+0x80>)
 8007f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9e:	0d5b      	lsrs	r3, r3, #21
 8007fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fa4:	fb02 f303 	mul.w	r3, r2, r3
 8007fa8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fb2:	d112      	bne.n	8007fda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2180      	movs	r1, #128	; 0x80
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7ff fef4 	bl	8007dac <SPI_WaitFlagStateUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d016      	beq.n	8007ff8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fce:	f043 0220 	orr.w	r2, r3, #32
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e00f      	b.n	8007ffa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00a      	beq.n	8007ff6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff0:	2b80      	cmp	r3, #128	; 0x80
 8007ff2:	d0f2      	beq.n	8007fda <SPI_EndRxTxTransaction+0x52>
 8007ff4:	e000      	b.n	8007ff8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007ff6:	bf00      	nop
  }

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	2000002c 	.word	0x2000002c
 8008008:	165e9f81 	.word	0x165e9f81

0800800c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e034      	b.n	800808c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f7f9 fa30 	bl	800149c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3308      	adds	r3, #8
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f002 f828 	bl	800a09c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6818      	ldr	r0, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	461a      	mov	r2, r3
 8008056:	68b9      	ldr	r1, [r7, #8]
 8008058:	f002 f872 	bl	800a140 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6858      	ldr	r0, [r3, #4]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008068:	6879      	ldr	r1, [r7, #4]
 800806a:	f002 f8a7 	bl	800a1bc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	6892      	ldr	r2, [r2, #8]
 8008076:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	6892      	ldr	r2, [r2, #8]
 8008082:	f041 0101 	orr.w	r1, r1, #1
 8008086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e041      	b.n	800812a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d106      	bne.n	80080c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7fc f9a0 	bl	8004400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3304      	adds	r3, #4
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f000 fc7a 	bl	80089cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b01      	cmp	r3, #1
 8008146:	d001      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e04e      	b.n	80081ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0201 	orr.w	r2, r2, #1
 8008162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a23      	ldr	r2, [pc, #140]	; (80081f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d022      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008176:	d01d      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a1f      	ldr	r2, [pc, #124]	; (80081fc <HAL_TIM_Base_Start_IT+0xc8>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d018      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a1e      	ldr	r2, [pc, #120]	; (8008200 <HAL_TIM_Base_Start_IT+0xcc>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d013      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1c      	ldr	r2, [pc, #112]	; (8008204 <HAL_TIM_Base_Start_IT+0xd0>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00e      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a1b      	ldr	r2, [pc, #108]	; (8008208 <HAL_TIM_Base_Start_IT+0xd4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d009      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a19      	ldr	r2, [pc, #100]	; (800820c <HAL_TIM_Base_Start_IT+0xd8>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a18      	ldr	r2, [pc, #96]	; (8008210 <HAL_TIM_Base_Start_IT+0xdc>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d111      	bne.n	80081d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2b06      	cmp	r3, #6
 80081c4:	d010      	beq.n	80081e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f042 0201 	orr.w	r2, r2, #1
 80081d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d6:	e007      	b.n	80081e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0201 	orr.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	40010000 	.word	0x40010000
 80081fc:	40000400 	.word	0x40000400
 8008200:	40000800 	.word	0x40000800
 8008204:	40000c00 	.word	0x40000c00
 8008208:	40010400 	.word	0x40010400
 800820c:	40014000 	.word	0x40014000
 8008210:	40001800 	.word	0x40001800

08008214 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e041      	b.n	80082aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f839 	bl	80082b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3304      	adds	r3, #4
 8008250:	4619      	mov	r1, r3
 8008252:	4610      	mov	r0, r2
 8008254:	f000 fbba 	bl	80089cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80082ba:	bf00      	nop
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
	...

080082c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d109      	bne.n	80082ec <HAL_TIM_PWM_Start+0x24>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	bf14      	ite	ne
 80082e4:	2301      	movne	r3, #1
 80082e6:	2300      	moveq	r3, #0
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	e022      	b.n	8008332 <HAL_TIM_PWM_Start+0x6a>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d109      	bne.n	8008306 <HAL_TIM_PWM_Start+0x3e>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	bf14      	ite	ne
 80082fe:	2301      	movne	r3, #1
 8008300:	2300      	moveq	r3, #0
 8008302:	b2db      	uxtb	r3, r3
 8008304:	e015      	b.n	8008332 <HAL_TIM_PWM_Start+0x6a>
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b08      	cmp	r3, #8
 800830a:	d109      	bne.n	8008320 <HAL_TIM_PWM_Start+0x58>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b01      	cmp	r3, #1
 8008316:	bf14      	ite	ne
 8008318:	2301      	movne	r3, #1
 800831a:	2300      	moveq	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	e008      	b.n	8008332 <HAL_TIM_PWM_Start+0x6a>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b01      	cmp	r3, #1
 800832a:	bf14      	ite	ne
 800832c:	2301      	movne	r3, #1
 800832e:	2300      	moveq	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e07c      	b.n	8008434 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d104      	bne.n	800834a <HAL_TIM_PWM_Start+0x82>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2202      	movs	r2, #2
 8008344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008348:	e013      	b.n	8008372 <HAL_TIM_PWM_Start+0xaa>
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b04      	cmp	r3, #4
 800834e:	d104      	bne.n	800835a <HAL_TIM_PWM_Start+0x92>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008358:	e00b      	b.n	8008372 <HAL_TIM_PWM_Start+0xaa>
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b08      	cmp	r3, #8
 800835e:	d104      	bne.n	800836a <HAL_TIM_PWM_Start+0xa2>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008368:	e003      	b.n	8008372 <HAL_TIM_PWM_Start+0xaa>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2202      	movs	r2, #2
 800836e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2201      	movs	r2, #1
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fe10 	bl	8008fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a2d      	ldr	r2, [pc, #180]	; (800843c <HAL_TIM_PWM_Start+0x174>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d004      	beq.n	8008394 <HAL_TIM_PWM_Start+0xcc>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a2c      	ldr	r2, [pc, #176]	; (8008440 <HAL_TIM_PWM_Start+0x178>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d101      	bne.n	8008398 <HAL_TIM_PWM_Start+0xd0>
 8008394:	2301      	movs	r3, #1
 8008396:	e000      	b.n	800839a <HAL_TIM_PWM_Start+0xd2>
 8008398:	2300      	movs	r3, #0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d007      	beq.n	80083ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a22      	ldr	r2, [pc, #136]	; (800843c <HAL_TIM_PWM_Start+0x174>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d022      	beq.n	80083fe <HAL_TIM_PWM_Start+0x136>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c0:	d01d      	beq.n	80083fe <HAL_TIM_PWM_Start+0x136>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a1f      	ldr	r2, [pc, #124]	; (8008444 <HAL_TIM_PWM_Start+0x17c>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d018      	beq.n	80083fe <HAL_TIM_PWM_Start+0x136>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a1d      	ldr	r2, [pc, #116]	; (8008448 <HAL_TIM_PWM_Start+0x180>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d013      	beq.n	80083fe <HAL_TIM_PWM_Start+0x136>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a1c      	ldr	r2, [pc, #112]	; (800844c <HAL_TIM_PWM_Start+0x184>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d00e      	beq.n	80083fe <HAL_TIM_PWM_Start+0x136>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a16      	ldr	r2, [pc, #88]	; (8008440 <HAL_TIM_PWM_Start+0x178>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d009      	beq.n	80083fe <HAL_TIM_PWM_Start+0x136>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a18      	ldr	r2, [pc, #96]	; (8008450 <HAL_TIM_PWM_Start+0x188>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d004      	beq.n	80083fe <HAL_TIM_PWM_Start+0x136>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a16      	ldr	r2, [pc, #88]	; (8008454 <HAL_TIM_PWM_Start+0x18c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d111      	bne.n	8008422 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 0307 	and.w	r3, r3, #7
 8008408:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b06      	cmp	r3, #6
 800840e:	d010      	beq.n	8008432 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f042 0201 	orr.w	r2, r2, #1
 800841e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008420:	e007      	b.n	8008432 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f042 0201 	orr.w	r2, r2, #1
 8008430:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	40010000 	.word	0x40010000
 8008440:	40010400 	.word	0x40010400
 8008444:	40000400 	.word	0x40000400
 8008448:	40000800 	.word	0x40000800
 800844c:	40000c00 	.word	0x40000c00
 8008450:	40014000 	.word	0x40014000
 8008454:	40001800 	.word	0x40001800

08008458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b02      	cmp	r3, #2
 800846c:	d122      	bne.n	80084b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b02      	cmp	r3, #2
 800847a:	d11b      	bne.n	80084b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f06f 0202 	mvn.w	r2, #2
 8008484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fa77 	bl	800898e <HAL_TIM_IC_CaptureCallback>
 80084a0:	e005      	b.n	80084ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fa69 	bl	800897a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fa7a 	bl	80089a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	f003 0304 	and.w	r3, r3, #4
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d122      	bne.n	8008508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d11b      	bne.n	8008508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f06f 0204 	mvn.w	r2, #4
 80084d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2202      	movs	r2, #2
 80084de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d003      	beq.n	80084f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa4d 	bl	800898e <HAL_TIM_IC_CaptureCallback>
 80084f4:	e005      	b.n	8008502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fa3f 	bl	800897a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fa50 	bl	80089a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b08      	cmp	r3, #8
 8008514:	d122      	bne.n	800855c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f003 0308 	and.w	r3, r3, #8
 8008520:	2b08      	cmp	r3, #8
 8008522:	d11b      	bne.n	800855c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0208 	mvn.w	r2, #8
 800852c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2204      	movs	r2, #4
 8008532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fa23 	bl	800898e <HAL_TIM_IC_CaptureCallback>
 8008548:	e005      	b.n	8008556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fa15 	bl	800897a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fa26 	bl	80089a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	f003 0310 	and.w	r3, r3, #16
 8008566:	2b10      	cmp	r3, #16
 8008568:	d122      	bne.n	80085b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f003 0310 	and.w	r3, r3, #16
 8008574:	2b10      	cmp	r3, #16
 8008576:	d11b      	bne.n	80085b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f06f 0210 	mvn.w	r2, #16
 8008580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2208      	movs	r2, #8
 8008586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f9f9 	bl	800898e <HAL_TIM_IC_CaptureCallback>
 800859c:	e005      	b.n	80085aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f9eb 	bl	800897a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f9fc 	bl	80089a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d10e      	bne.n	80085dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d107      	bne.n	80085dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f06f 0201 	mvn.w	r2, #1
 80085d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7fb f96c 	bl	80038b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e6:	2b80      	cmp	r3, #128	; 0x80
 80085e8:	d10e      	bne.n	8008608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f4:	2b80      	cmp	r3, #128	; 0x80
 80085f6:	d107      	bne.n	8008608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fd78 	bl	80090f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008612:	2b40      	cmp	r3, #64	; 0x40
 8008614:	d10e      	bne.n	8008634 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008620:	2b40      	cmp	r3, #64	; 0x40
 8008622:	d107      	bne.n	8008634 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800862c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f9c1 	bl	80089b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	f003 0320 	and.w	r3, r3, #32
 800863e:	2b20      	cmp	r3, #32
 8008640:	d10e      	bne.n	8008660 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b20      	cmp	r3, #32
 800864e:	d107      	bne.n	8008660 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f06f 0220 	mvn.w	r2, #32
 8008658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fd42 	bl	80090e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008660:	bf00      	nop
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800867e:	2b01      	cmp	r3, #1
 8008680:	d101      	bne.n	8008686 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008682:	2302      	movs	r3, #2
 8008684:	e0ae      	b.n	80087e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b0c      	cmp	r3, #12
 8008692:	f200 809f 	bhi.w	80087d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008696:	a201      	add	r2, pc, #4	; (adr r2, 800869c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869c:	080086d1 	.word	0x080086d1
 80086a0:	080087d5 	.word	0x080087d5
 80086a4:	080087d5 	.word	0x080087d5
 80086a8:	080087d5 	.word	0x080087d5
 80086ac:	08008711 	.word	0x08008711
 80086b0:	080087d5 	.word	0x080087d5
 80086b4:	080087d5 	.word	0x080087d5
 80086b8:	080087d5 	.word	0x080087d5
 80086bc:	08008753 	.word	0x08008753
 80086c0:	080087d5 	.word	0x080087d5
 80086c4:	080087d5 	.word	0x080087d5
 80086c8:	080087d5 	.word	0x080087d5
 80086cc:	08008793 	.word	0x08008793
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68b9      	ldr	r1, [r7, #8]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fa18 	bl	8008b0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0208 	orr.w	r2, r2, #8
 80086ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699a      	ldr	r2, [r3, #24]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 0204 	bic.w	r2, r2, #4
 80086fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6999      	ldr	r1, [r3, #24]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	691a      	ldr	r2, [r3, #16]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	619a      	str	r2, [r3, #24]
      break;
 800870e:	e064      	b.n	80087da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fa68 	bl	8008bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	699a      	ldr	r2, [r3, #24]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800872a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	699a      	ldr	r2, [r3, #24]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800873a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6999      	ldr	r1, [r3, #24]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	021a      	lsls	r2, r3, #8
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	619a      	str	r2, [r3, #24]
      break;
 8008750:	e043      	b.n	80087da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68b9      	ldr	r1, [r7, #8]
 8008758:	4618      	mov	r0, r3
 800875a:	f000 fabd 	bl	8008cd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69da      	ldr	r2, [r3, #28]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f042 0208 	orr.w	r2, r2, #8
 800876c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	69da      	ldr	r2, [r3, #28]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f022 0204 	bic.w	r2, r2, #4
 800877c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	69d9      	ldr	r1, [r3, #28]
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	691a      	ldr	r2, [r3, #16]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	61da      	str	r2, [r3, #28]
      break;
 8008790:	e023      	b.n	80087da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fb11 	bl	8008dc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	69da      	ldr	r2, [r3, #28]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	69da      	ldr	r2, [r3, #28]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	69d9      	ldr	r1, [r3, #28]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	021a      	lsls	r2, r3, #8
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	61da      	str	r2, [r3, #28]
      break;
 80087d2:	e002      	b.n	80087da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	75fb      	strb	r3, [r7, #23]
      break;
 80087d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008800:	2b01      	cmp	r3, #1
 8008802:	d101      	bne.n	8008808 <HAL_TIM_ConfigClockSource+0x1c>
 8008804:	2302      	movs	r3, #2
 8008806:	e0b4      	b.n	8008972 <HAL_TIM_ConfigClockSource+0x186>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800882e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008840:	d03e      	beq.n	80088c0 <HAL_TIM_ConfigClockSource+0xd4>
 8008842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008846:	f200 8087 	bhi.w	8008958 <HAL_TIM_ConfigClockSource+0x16c>
 800884a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800884e:	f000 8086 	beq.w	800895e <HAL_TIM_ConfigClockSource+0x172>
 8008852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008856:	d87f      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x16c>
 8008858:	2b70      	cmp	r3, #112	; 0x70
 800885a:	d01a      	beq.n	8008892 <HAL_TIM_ConfigClockSource+0xa6>
 800885c:	2b70      	cmp	r3, #112	; 0x70
 800885e:	d87b      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x16c>
 8008860:	2b60      	cmp	r3, #96	; 0x60
 8008862:	d050      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x11a>
 8008864:	2b60      	cmp	r3, #96	; 0x60
 8008866:	d877      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x16c>
 8008868:	2b50      	cmp	r3, #80	; 0x50
 800886a:	d03c      	beq.n	80088e6 <HAL_TIM_ConfigClockSource+0xfa>
 800886c:	2b50      	cmp	r3, #80	; 0x50
 800886e:	d873      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x16c>
 8008870:	2b40      	cmp	r3, #64	; 0x40
 8008872:	d058      	beq.n	8008926 <HAL_TIM_ConfigClockSource+0x13a>
 8008874:	2b40      	cmp	r3, #64	; 0x40
 8008876:	d86f      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x16c>
 8008878:	2b30      	cmp	r3, #48	; 0x30
 800887a:	d064      	beq.n	8008946 <HAL_TIM_ConfigClockSource+0x15a>
 800887c:	2b30      	cmp	r3, #48	; 0x30
 800887e:	d86b      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x16c>
 8008880:	2b20      	cmp	r3, #32
 8008882:	d060      	beq.n	8008946 <HAL_TIM_ConfigClockSource+0x15a>
 8008884:	2b20      	cmp	r3, #32
 8008886:	d867      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x16c>
 8008888:	2b00      	cmp	r3, #0
 800888a:	d05c      	beq.n	8008946 <HAL_TIM_ConfigClockSource+0x15a>
 800888c:	2b10      	cmp	r3, #16
 800888e:	d05a      	beq.n	8008946 <HAL_TIM_ConfigClockSource+0x15a>
 8008890:	e062      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	6899      	ldr	r1, [r3, #8]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	f000 fb5d 	bl	8008f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80088b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	609a      	str	r2, [r3, #8]
      break;
 80088be:	e04f      	b.n	8008960 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	6899      	ldr	r1, [r3, #8]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	f000 fb46 	bl	8008f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689a      	ldr	r2, [r3, #8]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088e2:	609a      	str	r2, [r3, #8]
      break;
 80088e4:	e03c      	b.n	8008960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6818      	ldr	r0, [r3, #0]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	6859      	ldr	r1, [r3, #4]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	461a      	mov	r2, r3
 80088f4:	f000 faba 	bl	8008e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2150      	movs	r1, #80	; 0x50
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fb13 	bl	8008f2a <TIM_ITRx_SetConfig>
      break;
 8008904:	e02c      	b.n	8008960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6818      	ldr	r0, [r3, #0]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	6859      	ldr	r1, [r3, #4]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	461a      	mov	r2, r3
 8008914:	f000 fad9 	bl	8008eca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2160      	movs	r1, #96	; 0x60
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fb03 	bl	8008f2a <TIM_ITRx_SetConfig>
      break;
 8008924:	e01c      	b.n	8008960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6818      	ldr	r0, [r3, #0]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	6859      	ldr	r1, [r3, #4]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	461a      	mov	r2, r3
 8008934:	f000 fa9a 	bl	8008e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2140      	movs	r1, #64	; 0x40
 800893e:	4618      	mov	r0, r3
 8008940:	f000 faf3 	bl	8008f2a <TIM_ITRx_SetConfig>
      break;
 8008944:	e00c      	b.n	8008960 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4619      	mov	r1, r3
 8008950:	4610      	mov	r0, r2
 8008952:	f000 faea 	bl	8008f2a <TIM_ITRx_SetConfig>
      break;
 8008956:	e003      	b.n	8008960 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	73fb      	strb	r3, [r7, #15]
      break;
 800895c:	e000      	b.n	8008960 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800895e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008982:	bf00      	nop
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800898e:	b480      	push	{r7}
 8008990:	b083      	sub	sp, #12
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089aa:	bf00      	nop
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089be:	bf00      	nop
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
	...

080089cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a40      	ldr	r2, [pc, #256]	; (8008ae0 <TIM_Base_SetConfig+0x114>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d013      	beq.n	8008a0c <TIM_Base_SetConfig+0x40>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ea:	d00f      	beq.n	8008a0c <TIM_Base_SetConfig+0x40>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a3d      	ldr	r2, [pc, #244]	; (8008ae4 <TIM_Base_SetConfig+0x118>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d00b      	beq.n	8008a0c <TIM_Base_SetConfig+0x40>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a3c      	ldr	r2, [pc, #240]	; (8008ae8 <TIM_Base_SetConfig+0x11c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d007      	beq.n	8008a0c <TIM_Base_SetConfig+0x40>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a3b      	ldr	r2, [pc, #236]	; (8008aec <TIM_Base_SetConfig+0x120>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d003      	beq.n	8008a0c <TIM_Base_SetConfig+0x40>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a3a      	ldr	r2, [pc, #232]	; (8008af0 <TIM_Base_SetConfig+0x124>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d108      	bne.n	8008a1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a2f      	ldr	r2, [pc, #188]	; (8008ae0 <TIM_Base_SetConfig+0x114>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d02b      	beq.n	8008a7e <TIM_Base_SetConfig+0xb2>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a2c:	d027      	beq.n	8008a7e <TIM_Base_SetConfig+0xb2>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a2c      	ldr	r2, [pc, #176]	; (8008ae4 <TIM_Base_SetConfig+0x118>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d023      	beq.n	8008a7e <TIM_Base_SetConfig+0xb2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a2b      	ldr	r2, [pc, #172]	; (8008ae8 <TIM_Base_SetConfig+0x11c>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d01f      	beq.n	8008a7e <TIM_Base_SetConfig+0xb2>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a2a      	ldr	r2, [pc, #168]	; (8008aec <TIM_Base_SetConfig+0x120>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d01b      	beq.n	8008a7e <TIM_Base_SetConfig+0xb2>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a29      	ldr	r2, [pc, #164]	; (8008af0 <TIM_Base_SetConfig+0x124>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d017      	beq.n	8008a7e <TIM_Base_SetConfig+0xb2>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a28      	ldr	r2, [pc, #160]	; (8008af4 <TIM_Base_SetConfig+0x128>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d013      	beq.n	8008a7e <TIM_Base_SetConfig+0xb2>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a27      	ldr	r2, [pc, #156]	; (8008af8 <TIM_Base_SetConfig+0x12c>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d00f      	beq.n	8008a7e <TIM_Base_SetConfig+0xb2>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a26      	ldr	r2, [pc, #152]	; (8008afc <TIM_Base_SetConfig+0x130>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d00b      	beq.n	8008a7e <TIM_Base_SetConfig+0xb2>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a25      	ldr	r2, [pc, #148]	; (8008b00 <TIM_Base_SetConfig+0x134>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d007      	beq.n	8008a7e <TIM_Base_SetConfig+0xb2>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a24      	ldr	r2, [pc, #144]	; (8008b04 <TIM_Base_SetConfig+0x138>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d003      	beq.n	8008a7e <TIM_Base_SetConfig+0xb2>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a23      	ldr	r2, [pc, #140]	; (8008b08 <TIM_Base_SetConfig+0x13c>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d108      	bne.n	8008a90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a0a      	ldr	r2, [pc, #40]	; (8008ae0 <TIM_Base_SetConfig+0x114>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d003      	beq.n	8008ac4 <TIM_Base_SetConfig+0xf8>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a0c      	ldr	r2, [pc, #48]	; (8008af0 <TIM_Base_SetConfig+0x124>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d103      	bne.n	8008acc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	691a      	ldr	r2, [r3, #16]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	615a      	str	r2, [r3, #20]
}
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	40010000 	.word	0x40010000
 8008ae4:	40000400 	.word	0x40000400
 8008ae8:	40000800 	.word	0x40000800
 8008aec:	40000c00 	.word	0x40000c00
 8008af0:	40010400 	.word	0x40010400
 8008af4:	40014000 	.word	0x40014000
 8008af8:	40014400 	.word	0x40014400
 8008afc:	40014800 	.word	0x40014800
 8008b00:	40001800 	.word	0x40001800
 8008b04:	40001c00 	.word	0x40001c00
 8008b08:	40002000 	.word	0x40002000

08008b0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	f023 0201 	bic.w	r2, r3, #1
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 0303 	bic.w	r3, r3, #3
 8008b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f023 0302 	bic.w	r3, r3, #2
 8008b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a20      	ldr	r2, [pc, #128]	; (8008be4 <TIM_OC1_SetConfig+0xd8>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d003      	beq.n	8008b70 <TIM_OC1_SetConfig+0x64>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a1f      	ldr	r2, [pc, #124]	; (8008be8 <TIM_OC1_SetConfig+0xdc>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d10c      	bne.n	8008b8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f023 0308 	bic.w	r3, r3, #8
 8008b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f023 0304 	bic.w	r3, r3, #4
 8008b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a15      	ldr	r2, [pc, #84]	; (8008be4 <TIM_OC1_SetConfig+0xd8>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d003      	beq.n	8008b9a <TIM_OC1_SetConfig+0x8e>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a14      	ldr	r2, [pc, #80]	; (8008be8 <TIM_OC1_SetConfig+0xdc>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d111      	bne.n	8008bbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685a      	ldr	r2, [r3, #4]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	621a      	str	r2, [r3, #32]
}
 8008bd8:	bf00      	nop
 8008bda:	371c      	adds	r7, #28
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	40010000 	.word	0x40010000
 8008be8:	40010400 	.word	0x40010400

08008bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	f023 0210 	bic.w	r2, r3, #16
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	021b      	lsls	r3, r3, #8
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f023 0320 	bic.w	r3, r3, #32
 8008c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	011b      	lsls	r3, r3, #4
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a22      	ldr	r2, [pc, #136]	; (8008cd0 <TIM_OC2_SetConfig+0xe4>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d003      	beq.n	8008c54 <TIM_OC2_SetConfig+0x68>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a21      	ldr	r2, [pc, #132]	; (8008cd4 <TIM_OC2_SetConfig+0xe8>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d10d      	bne.n	8008c70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	011b      	lsls	r3, r3, #4
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a17      	ldr	r2, [pc, #92]	; (8008cd0 <TIM_OC2_SetConfig+0xe4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d003      	beq.n	8008c80 <TIM_OC2_SetConfig+0x94>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a16      	ldr	r2, [pc, #88]	; (8008cd4 <TIM_OC2_SetConfig+0xe8>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d113      	bne.n	8008ca8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	621a      	str	r2, [r3, #32]
}
 8008cc2:	bf00      	nop
 8008cc4:	371c      	adds	r7, #28
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	40010000 	.word	0x40010000
 8008cd4:	40010400 	.word	0x40010400

08008cd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 0303 	bic.w	r3, r3, #3
 8008d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	021b      	lsls	r3, r3, #8
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a21      	ldr	r2, [pc, #132]	; (8008db8 <TIM_OC3_SetConfig+0xe0>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d003      	beq.n	8008d3e <TIM_OC3_SetConfig+0x66>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a20      	ldr	r2, [pc, #128]	; (8008dbc <TIM_OC3_SetConfig+0xe4>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d10d      	bne.n	8008d5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	021b      	lsls	r3, r3, #8
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a16      	ldr	r2, [pc, #88]	; (8008db8 <TIM_OC3_SetConfig+0xe0>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d003      	beq.n	8008d6a <TIM_OC3_SetConfig+0x92>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a15      	ldr	r2, [pc, #84]	; (8008dbc <TIM_OC3_SetConfig+0xe4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d113      	bne.n	8008d92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	621a      	str	r2, [r3, #32]
}
 8008dac:	bf00      	nop
 8008dae:	371c      	adds	r7, #28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	40010000 	.word	0x40010000
 8008dbc:	40010400 	.word	0x40010400

08008dc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b087      	sub	sp, #28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	021b      	lsls	r3, r3, #8
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	031b      	lsls	r3, r3, #12
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a12      	ldr	r2, [pc, #72]	; (8008e64 <TIM_OC4_SetConfig+0xa4>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d003      	beq.n	8008e28 <TIM_OC4_SetConfig+0x68>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a11      	ldr	r2, [pc, #68]	; (8008e68 <TIM_OC4_SetConfig+0xa8>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d109      	bne.n	8008e3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	019b      	lsls	r3, r3, #6
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	621a      	str	r2, [r3, #32]
}
 8008e56:	bf00      	nop
 8008e58:	371c      	adds	r7, #28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	40010000 	.word	0x40010000
 8008e68:	40010400 	.word	0x40010400

08008e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	f023 0201 	bic.w	r2, r3, #1
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f023 030a 	bic.w	r3, r3, #10
 8008ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	621a      	str	r2, [r3, #32]
}
 8008ebe:	bf00      	nop
 8008ec0:	371c      	adds	r7, #28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b087      	sub	sp, #28
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6a1b      	ldr	r3, [r3, #32]
 8008eda:	f023 0210 	bic.w	r2, r3, #16
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6a1b      	ldr	r3, [r3, #32]
 8008eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	031b      	lsls	r3, r3, #12
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	621a      	str	r2, [r3, #32]
}
 8008f1e:	bf00      	nop
 8008f20:	371c      	adds	r7, #28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b085      	sub	sp, #20
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	f043 0307 	orr.w	r3, r3, #7
 8008f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	609a      	str	r2, [r3, #8]
}
 8008f54:	bf00      	nop
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	021a      	lsls	r2, r3, #8
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	431a      	orrs	r2, r3
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	609a      	str	r2, [r3, #8]
}
 8008f94:	bf00      	nop
 8008f96:	371c      	adds	r7, #28
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f003 031f 	and.w	r3, r3, #31
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6a1a      	ldr	r2, [r3, #32]
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	43db      	mvns	r3, r3
 8008fc2:	401a      	ands	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a1a      	ldr	r2, [r3, #32]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	f003 031f 	and.w	r3, r3, #31
 8008fd2:	6879      	ldr	r1, [r7, #4]
 8008fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	621a      	str	r2, [r3, #32]
}
 8008fde:	bf00      	nop
 8008fe0:	371c      	adds	r7, #28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
	...

08008fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d101      	bne.n	8009004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009000:	2302      	movs	r3, #2
 8009002:	e05a      	b.n	80090ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2202      	movs	r2, #2
 8009010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800902a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a21      	ldr	r2, [pc, #132]	; (80090c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d022      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009050:	d01d      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a1d      	ldr	r2, [pc, #116]	; (80090cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d018      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1b      	ldr	r2, [pc, #108]	; (80090d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d013      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a1a      	ldr	r2, [pc, #104]	; (80090d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d00e      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a18      	ldr	r2, [pc, #96]	; (80090d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d009      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a17      	ldr	r2, [pc, #92]	; (80090dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d004      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a15      	ldr	r2, [pc, #84]	; (80090e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d10c      	bne.n	80090a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	4313      	orrs	r3, r2
 800909e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	40010000 	.word	0x40010000
 80090cc:	40000400 	.word	0x40000400
 80090d0:	40000800 	.word	0x40000800
 80090d4:	40000c00 	.word	0x40000c00
 80090d8:	40010400 	.word	0x40010400
 80090dc:	40014000 	.word	0x40014000
 80090e0:	40001800 	.word	0x40001800

080090e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e03f      	b.n	800919e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7fb faa0 	bl	8004678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2224      	movs	r2, #36	; 0x24
 800913c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68da      	ldr	r2, [r3, #12]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800914e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fddb 	bl	8009d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	691a      	ldr	r2, [r3, #16]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	695a      	ldr	r2, [r3, #20]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68da      	ldr	r2, [r3, #12]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2220      	movs	r2, #32
 8009190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b08a      	sub	sp, #40	; 0x28
 80091aa:	af02      	add	r7, sp, #8
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	603b      	str	r3, [r7, #0]
 80091b2:	4613      	mov	r3, r2
 80091b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b20      	cmp	r3, #32
 80091c4:	d17c      	bne.n	80092c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <HAL_UART_Transmit+0x2c>
 80091cc:	88fb      	ldrh	r3, [r7, #6]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e075      	b.n	80092c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d101      	bne.n	80091e4 <HAL_UART_Transmit+0x3e>
 80091e0:	2302      	movs	r3, #2
 80091e2:	e06e      	b.n	80092c2 <HAL_UART_Transmit+0x11c>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2221      	movs	r2, #33	; 0x21
 80091f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091fa:	f7fb fb5b 	bl	80048b4 <HAL_GetTick>
 80091fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	88fa      	ldrh	r2, [r7, #6]
 8009204:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	88fa      	ldrh	r2, [r7, #6]
 800920a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009214:	d108      	bne.n	8009228 <HAL_UART_Transmit+0x82>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d104      	bne.n	8009228 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800921e:	2300      	movs	r3, #0
 8009220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	61bb      	str	r3, [r7, #24]
 8009226:	e003      	b.n	8009230 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800922c:	2300      	movs	r3, #0
 800922e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009238:	e02a      	b.n	8009290 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2200      	movs	r2, #0
 8009242:	2180      	movs	r1, #128	; 0x80
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fb1f 	bl	8009888 <UART_WaitOnFlagUntilTimeout>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	e036      	b.n	80092c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10b      	bne.n	8009272 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009268:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	3302      	adds	r3, #2
 800926e:	61bb      	str	r3, [r7, #24]
 8009270:	e007      	b.n	8009282 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	781a      	ldrb	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	3301      	adds	r3, #1
 8009280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009286:	b29b      	uxth	r3, r3
 8009288:	3b01      	subs	r3, #1
 800928a:	b29a      	uxth	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009294:	b29b      	uxth	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1cf      	bne.n	800923a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2200      	movs	r2, #0
 80092a2:	2140      	movs	r1, #64	; 0x40
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 faef 	bl	8009888 <UART_WaitOnFlagUntilTimeout>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e006      	b.n	80092c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2220      	movs	r2, #32
 80092b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80092bc:	2300      	movs	r3, #0
 80092be:	e000      	b.n	80092c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80092c0:	2302      	movs	r3, #2
  }
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3720      	adds	r7, #32
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b084      	sub	sp, #16
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	4613      	mov	r3, r2
 80092d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b20      	cmp	r3, #32
 80092e2:	d11d      	bne.n	8009320 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d002      	beq.n	80092f0 <HAL_UART_Receive_IT+0x26>
 80092ea:	88fb      	ldrh	r3, [r7, #6]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e016      	b.n	8009322 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d101      	bne.n	8009302 <HAL_UART_Receive_IT+0x38>
 80092fe:	2302      	movs	r3, #2
 8009300:	e00f      	b.n	8009322 <HAL_UART_Receive_IT+0x58>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009310:	88fb      	ldrh	r3, [r7, #6]
 8009312:	461a      	mov	r2, r3
 8009314:	68b9      	ldr	r1, [r7, #8]
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 fb24 	bl	8009964 <UART_Start_Receive_IT>
 800931c:	4603      	mov	r3, r0
 800931e:	e000      	b.n	8009322 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009320:	2302      	movs	r3, #2
  }
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b0ba      	sub	sp, #232	; 0xe8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009352:	2300      	movs	r3, #0
 8009354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009358:	2300      	movs	r3, #0
 800935a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800935e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009362:	f003 030f 	and.w	r3, r3, #15
 8009366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800936a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10f      	bne.n	8009392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009376:	f003 0320 	and.w	r3, r3, #32
 800937a:	2b00      	cmp	r3, #0
 800937c:	d009      	beq.n	8009392 <HAL_UART_IRQHandler+0x66>
 800937e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fc03 	bl	8009b96 <UART_Receive_IT>
      return;
 8009390:	e256      	b.n	8009840 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009396:	2b00      	cmp	r3, #0
 8009398:	f000 80de 	beq.w	8009558 <HAL_UART_IRQHandler+0x22c>
 800939c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093a0:	f003 0301 	and.w	r3, r3, #1
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d106      	bne.n	80093b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80093a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 80d1 	beq.w	8009558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80093b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00b      	beq.n	80093da <HAL_UART_IRQHandler+0xae>
 80093c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d005      	beq.n	80093da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d2:	f043 0201 	orr.w	r2, r3, #1
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093de:	f003 0304 	and.w	r3, r3, #4
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00b      	beq.n	80093fe <HAL_UART_IRQHandler+0xd2>
 80093e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d005      	beq.n	80093fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f6:	f043 0202 	orr.w	r2, r3, #2
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009402:	f003 0302 	and.w	r3, r3, #2
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00b      	beq.n	8009422 <HAL_UART_IRQHandler+0xf6>
 800940a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d005      	beq.n	8009422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	f043 0204 	orr.w	r2, r3, #4
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009426:	f003 0308 	and.w	r3, r3, #8
 800942a:	2b00      	cmp	r3, #0
 800942c:	d011      	beq.n	8009452 <HAL_UART_IRQHandler+0x126>
 800942e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009432:	f003 0320 	and.w	r3, r3, #32
 8009436:	2b00      	cmp	r3, #0
 8009438:	d105      	bne.n	8009446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800943a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	2b00      	cmp	r3, #0
 8009444:	d005      	beq.n	8009452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944a:	f043 0208 	orr.w	r2, r3, #8
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 81ed 	beq.w	8009836 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800945c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009460:	f003 0320 	and.w	r3, r3, #32
 8009464:	2b00      	cmp	r3, #0
 8009466:	d008      	beq.n	800947a <HAL_UART_IRQHandler+0x14e>
 8009468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800946c:	f003 0320 	and.w	r3, r3, #32
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fb8e 	bl	8009b96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009484:	2b40      	cmp	r3, #64	; 0x40
 8009486:	bf0c      	ite	eq
 8009488:	2301      	moveq	r3, #1
 800948a:	2300      	movne	r3, #0
 800948c:	b2db      	uxtb	r3, r3
 800948e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009496:	f003 0308 	and.w	r3, r3, #8
 800949a:	2b00      	cmp	r3, #0
 800949c:	d103      	bne.n	80094a6 <HAL_UART_IRQHandler+0x17a>
 800949e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d04f      	beq.n	8009546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fa96 	bl	80099d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b6:	2b40      	cmp	r3, #64	; 0x40
 80094b8:	d141      	bne.n	800953e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3314      	adds	r3, #20
 80094c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80094d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3314      	adds	r3, #20
 80094e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80094f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80094f6:	e841 2300 	strex	r3, r2, [r1]
 80094fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80094fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1d9      	bne.n	80094ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950a:	2b00      	cmp	r3, #0
 800950c:	d013      	beq.n	8009536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009512:	4a7d      	ldr	r2, [pc, #500]	; (8009708 <HAL_UART_IRQHandler+0x3dc>)
 8009514:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951a:	4618      	mov	r0, r3
 800951c:	f7fc f894 	bl	8005648 <HAL_DMA_Abort_IT>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d016      	beq.n	8009554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009530:	4610      	mov	r0, r2
 8009532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009534:	e00e      	b.n	8009554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f990 	bl	800985c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800953c:	e00a      	b.n	8009554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f98c 	bl	800985c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009544:	e006      	b.n	8009554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f988 	bl	800985c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009552:	e170      	b.n	8009836 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009554:	bf00      	nop
    return;
 8009556:	e16e      	b.n	8009836 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955c:	2b01      	cmp	r3, #1
 800955e:	f040 814a 	bne.w	80097f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009566:	f003 0310 	and.w	r3, r3, #16
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 8143 	beq.w	80097f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009574:	f003 0310 	and.w	r3, r3, #16
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 813c 	beq.w	80097f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800957e:	2300      	movs	r3, #0
 8009580:	60bb      	str	r3, [r7, #8]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	60bb      	str	r3, [r7, #8]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	60bb      	str	r3, [r7, #8]
 8009592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959e:	2b40      	cmp	r3, #64	; 0x40
 80095a0:	f040 80b4 	bne.w	800970c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 8140 	beq.w	800983a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80095be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095c2:	429a      	cmp	r2, r3
 80095c4:	f080 8139 	bcs.w	800983a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095da:	f000 8088 	beq.w	80096ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	330c      	adds	r3, #12
 80095e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095ec:	e853 3f00 	ldrex	r3, [r3]
 80095f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80095f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	330c      	adds	r3, #12
 8009606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800960a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800960e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1d9      	bne.n	80095de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3314      	adds	r3, #20
 8009630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800963a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800963c:	f023 0301 	bic.w	r3, r3, #1
 8009640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3314      	adds	r3, #20
 800964a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800964e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800965a:	e841 2300 	strex	r3, r2, [r1]
 800965e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1e1      	bne.n	800962a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3314      	adds	r3, #20
 800966c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009670:	e853 3f00 	ldrex	r3, [r3]
 8009674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800967c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3314      	adds	r3, #20
 8009686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800968a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800968c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009692:	e841 2300 	strex	r3, r2, [r1]
 8009696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1e3      	bne.n	8009666 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	330c      	adds	r3, #12
 80096b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b6:	e853 3f00 	ldrex	r3, [r3]
 80096ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096be:	f023 0310 	bic.w	r3, r3, #16
 80096c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	330c      	adds	r3, #12
 80096cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80096d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80096d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096d8:	e841 2300 	strex	r3, r2, [r1]
 80096dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1e3      	bne.n	80096ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fb ff3d 	bl	8005568 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f8b6 	bl	8009870 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009704:	e099      	b.n	800983a <HAL_UART_IRQHandler+0x50e>
 8009706:	bf00      	nop
 8009708:	08009a9f 	.word	0x08009a9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009714:	b29b      	uxth	r3, r3
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009720:	b29b      	uxth	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 808b 	beq.w	800983e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 8086 	beq.w	800983e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	330c      	adds	r3, #12
 8009738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973c:	e853 3f00 	ldrex	r3, [r3]
 8009740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	330c      	adds	r3, #12
 8009752:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009756:	647a      	str	r2, [r7, #68]	; 0x44
 8009758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800975c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800975e:	e841 2300 	strex	r3, r2, [r1]
 8009762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1e3      	bne.n	8009732 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3314      	adds	r3, #20
 8009770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009774:	e853 3f00 	ldrex	r3, [r3]
 8009778:	623b      	str	r3, [r7, #32]
   return(result);
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	f023 0301 	bic.w	r3, r3, #1
 8009780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3314      	adds	r3, #20
 800978a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800978e:	633a      	str	r2, [r7, #48]	; 0x30
 8009790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009796:	e841 2300 	strex	r3, r2, [r1]
 800979a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1e3      	bne.n	800976a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2220      	movs	r2, #32
 80097a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	330c      	adds	r3, #12
 80097b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	60fb      	str	r3, [r7, #12]
   return(result);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f023 0310 	bic.w	r3, r3, #16
 80097c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	330c      	adds	r3, #12
 80097d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80097d4:	61fa      	str	r2, [r7, #28]
 80097d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d8:	69b9      	ldr	r1, [r7, #24]
 80097da:	69fa      	ldr	r2, [r7, #28]
 80097dc:	e841 2300 	strex	r3, r2, [r1]
 80097e0:	617b      	str	r3, [r7, #20]
   return(result);
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1e3      	bne.n	80097b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f83e 	bl	8009870 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097f4:	e023      	b.n	800983e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80097f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d009      	beq.n	8009816 <HAL_UART_IRQHandler+0x4ea>
 8009802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800980a:	2b00      	cmp	r3, #0
 800980c:	d003      	beq.n	8009816 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f959 	bl	8009ac6 <UART_Transmit_IT>
    return;
 8009814:	e014      	b.n	8009840 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800981a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00e      	beq.n	8009840 <HAL_UART_IRQHandler+0x514>
 8009822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	d008      	beq.n	8009840 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f999 	bl	8009b66 <UART_EndTransmit_IT>
    return;
 8009834:	e004      	b.n	8009840 <HAL_UART_IRQHandler+0x514>
    return;
 8009836:	bf00      	nop
 8009838:	e002      	b.n	8009840 <HAL_UART_IRQHandler+0x514>
      return;
 800983a:	bf00      	nop
 800983c:	e000      	b.n	8009840 <HAL_UART_IRQHandler+0x514>
      return;
 800983e:	bf00      	nop
  }
}
 8009840:	37e8      	adds	r7, #232	; 0xe8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop

08009848 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b090      	sub	sp, #64	; 0x40
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	603b      	str	r3, [r7, #0]
 8009894:	4613      	mov	r3, r2
 8009896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009898:	e050      	b.n	800993c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800989a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800989c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a0:	d04c      	beq.n	800993c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80098a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d007      	beq.n	80098b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80098a8:	f7fb f804 	bl	80048b4 <HAL_GetTick>
 80098ac:	4602      	mov	r2, r0
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d241      	bcs.n	800993c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	330c      	adds	r3, #12
 80098be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	e853 3f00 	ldrex	r3, [r3]
 80098c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	330c      	adds	r3, #12
 80098d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098d8:	637a      	str	r2, [r7, #52]	; 0x34
 80098da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098e0:	e841 2300 	strex	r3, r2, [r1]
 80098e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80098e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1e5      	bne.n	80098b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3314      	adds	r3, #20
 80098f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	e853 3f00 	ldrex	r3, [r3]
 80098fa:	613b      	str	r3, [r7, #16]
   return(result);
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	f023 0301 	bic.w	r3, r3, #1
 8009902:	63bb      	str	r3, [r7, #56]	; 0x38
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3314      	adds	r3, #20
 800990a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800990c:	623a      	str	r2, [r7, #32]
 800990e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009910:	69f9      	ldr	r1, [r7, #28]
 8009912:	6a3a      	ldr	r2, [r7, #32]
 8009914:	e841 2300 	strex	r3, r2, [r1]
 8009918:	61bb      	str	r3, [r7, #24]
   return(result);
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1e5      	bne.n	80098ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2220      	movs	r2, #32
 8009924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2220      	movs	r2, #32
 800992c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e00f      	b.n	800995c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	4013      	ands	r3, r2
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	429a      	cmp	r2, r3
 800994a:	bf0c      	ite	eq
 800994c:	2301      	moveq	r3, #1
 800994e:	2300      	movne	r3, #0
 8009950:	b2db      	uxtb	r3, r3
 8009952:	461a      	mov	r2, r3
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	429a      	cmp	r2, r3
 8009958:	d09f      	beq.n	800989a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3740      	adds	r7, #64	; 0x40
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	4613      	mov	r3, r2
 8009970:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	88fa      	ldrh	r2, [r7, #6]
 800997c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	88fa      	ldrh	r2, [r7, #6]
 8009982:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2222      	movs	r2, #34	; 0x22
 800998e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68da      	ldr	r2, [r3, #12]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099a8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	695a      	ldr	r2, [r3, #20]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f042 0201 	orr.w	r2, r2, #1
 80099b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68da      	ldr	r2, [r3, #12]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f042 0220 	orr.w	r2, r2, #32
 80099c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099d8:	b480      	push	{r7}
 80099da:	b095      	sub	sp, #84	; 0x54
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	330c      	adds	r3, #12
 80099e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ea:	e853 3f00 	ldrex	r3, [r3]
 80099ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	330c      	adds	r3, #12
 80099fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a00:	643a      	str	r2, [r7, #64]	; 0x40
 8009a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a08:	e841 2300 	strex	r3, r2, [r1]
 8009a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e5      	bne.n	80099e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3314      	adds	r3, #20
 8009a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1c:	6a3b      	ldr	r3, [r7, #32]
 8009a1e:	e853 3f00 	ldrex	r3, [r3]
 8009a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	f023 0301 	bic.w	r3, r3, #1
 8009a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3314      	adds	r3, #20
 8009a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a3c:	e841 2300 	strex	r3, r2, [r1]
 8009a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1e5      	bne.n	8009a14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d119      	bne.n	8009a84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	330c      	adds	r3, #12
 8009a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	e853 3f00 	ldrex	r3, [r3]
 8009a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	f023 0310 	bic.w	r3, r3, #16
 8009a66:	647b      	str	r3, [r7, #68]	; 0x44
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	330c      	adds	r3, #12
 8009a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a70:	61ba      	str	r2, [r7, #24]
 8009a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a74:	6979      	ldr	r1, [r7, #20]
 8009a76:	69ba      	ldr	r2, [r7, #24]
 8009a78:	e841 2300 	strex	r3, r2, [r1]
 8009a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1e5      	bne.n	8009a50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2220      	movs	r2, #32
 8009a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a92:	bf00      	nop
 8009a94:	3754      	adds	r7, #84	; 0x54
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b084      	sub	sp, #16
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f7ff fecf 	bl	800985c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009abe:	bf00      	nop
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b085      	sub	sp, #20
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b21      	cmp	r3, #33	; 0x21
 8009ad8:	d13e      	bne.n	8009b58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae2:	d114      	bne.n	8009b0e <UART_Transmit_IT+0x48>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d110      	bne.n	8009b0e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a1b      	ldr	r3, [r3, #32]
 8009af0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a1b      	ldr	r3, [r3, #32]
 8009b06:	1c9a      	adds	r2, r3, #2
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	621a      	str	r2, [r3, #32]
 8009b0c:	e008      	b.n	8009b20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	1c59      	adds	r1, r3, #1
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	6211      	str	r1, [r2, #32]
 8009b18:	781a      	ldrb	r2, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	3b01      	subs	r3, #1
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10f      	bne.n	8009b54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	e000      	b.n	8009b5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b58:	2302      	movs	r3, #2
  }
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b082      	sub	sp, #8
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68da      	ldr	r2, [r3, #12]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2220      	movs	r2, #32
 8009b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff fe5e 	bl	8009848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b08c      	sub	sp, #48	; 0x30
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b22      	cmp	r3, #34	; 0x22
 8009ba8:	f040 80ab 	bne.w	8009d02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bb4:	d117      	bne.n	8009be6 <UART_Receive_IT+0x50>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d113      	bne.n	8009be6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bde:	1c9a      	adds	r2, r3, #2
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	629a      	str	r2, [r3, #40]	; 0x28
 8009be4:	e026      	b.n	8009c34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009bec:	2300      	movs	r3, #0
 8009bee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bf8:	d007      	beq.n	8009c0a <UART_Receive_IT+0x74>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10a      	bne.n	8009c18 <UART_Receive_IT+0x82>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d106      	bne.n	8009c18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	e008      	b.n	8009c2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	4619      	mov	r1, r3
 8009c42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d15a      	bne.n	8009cfe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f022 0220 	bic.w	r2, r2, #32
 8009c56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68da      	ldr	r2, [r3, #12]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	695a      	ldr	r2, [r3, #20]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 0201 	bic.w	r2, r2, #1
 8009c76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2220      	movs	r2, #32
 8009c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d135      	bne.n	8009cf4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	330c      	adds	r3, #12
 8009c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	e853 3f00 	ldrex	r3, [r3]
 8009c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	f023 0310 	bic.w	r3, r3, #16
 8009ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	330c      	adds	r3, #12
 8009cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cae:	623a      	str	r2, [r7, #32]
 8009cb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb2:	69f9      	ldr	r1, [r7, #28]
 8009cb4:	6a3a      	ldr	r2, [r7, #32]
 8009cb6:	e841 2300 	strex	r3, r2, [r1]
 8009cba:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e5      	bne.n	8009c8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0310 	and.w	r3, r3, #16
 8009ccc:	2b10      	cmp	r3, #16
 8009cce:	d10a      	bne.n	8009ce6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	60fb      	str	r3, [r7, #12]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009cea:	4619      	mov	r1, r3
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7ff fdbf 	bl	8009870 <HAL_UARTEx_RxEventCallback>
 8009cf2:	e002      	b.n	8009cfa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7fa fc77 	bl	80045e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	e002      	b.n	8009d04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e000      	b.n	8009d04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009d02:	2302      	movs	r3, #2
  }
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3730      	adds	r7, #48	; 0x30
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d10:	b09f      	sub	sp, #124	; 0x7c
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d22:	68d9      	ldr	r1, [r3, #12]
 8009d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	ea40 0301 	orr.w	r3, r0, r1
 8009d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d30:	689a      	ldr	r2, [r3, #8]
 8009d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	431a      	orrs	r2, r3
 8009d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	431a      	orrs	r2, r3
 8009d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009d50:	f021 010c 	bic.w	r1, r1, #12
 8009d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d5a:	430b      	orrs	r3, r1
 8009d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d6a:	6999      	ldr	r1, [r3, #24]
 8009d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	ea40 0301 	orr.w	r3, r0, r1
 8009d74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	4bc5      	ldr	r3, [pc, #788]	; (800a090 <UART_SetConfig+0x384>)
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d004      	beq.n	8009d8a <UART_SetConfig+0x7e>
 8009d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	4bc3      	ldr	r3, [pc, #780]	; (800a094 <UART_SetConfig+0x388>)
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d103      	bne.n	8009d92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d8a:	f7fd fcbf 	bl	800770c <HAL_RCC_GetPCLK2Freq>
 8009d8e:	6778      	str	r0, [r7, #116]	; 0x74
 8009d90:	e002      	b.n	8009d98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d92:	f7fd fca7 	bl	80076e4 <HAL_RCC_GetPCLK1Freq>
 8009d96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d9a:	69db      	ldr	r3, [r3, #28]
 8009d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009da0:	f040 80b6 	bne.w	8009f10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009da6:	461c      	mov	r4, r3
 8009da8:	f04f 0500 	mov.w	r5, #0
 8009dac:	4622      	mov	r2, r4
 8009dae:	462b      	mov	r3, r5
 8009db0:	1891      	adds	r1, r2, r2
 8009db2:	6439      	str	r1, [r7, #64]	; 0x40
 8009db4:	415b      	adcs	r3, r3
 8009db6:	647b      	str	r3, [r7, #68]	; 0x44
 8009db8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009dbc:	1912      	adds	r2, r2, r4
 8009dbe:	eb45 0303 	adc.w	r3, r5, r3
 8009dc2:	f04f 0000 	mov.w	r0, #0
 8009dc6:	f04f 0100 	mov.w	r1, #0
 8009dca:	00d9      	lsls	r1, r3, #3
 8009dcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009dd0:	00d0      	lsls	r0, r2, #3
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	1911      	adds	r1, r2, r4
 8009dd8:	6639      	str	r1, [r7, #96]	; 0x60
 8009dda:	416b      	adcs	r3, r5
 8009ddc:	667b      	str	r3, [r7, #100]	; 0x64
 8009dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	461a      	mov	r2, r3
 8009de4:	f04f 0300 	mov.w	r3, #0
 8009de8:	1891      	adds	r1, r2, r2
 8009dea:	63b9      	str	r1, [r7, #56]	; 0x38
 8009dec:	415b      	adcs	r3, r3
 8009dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009df4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009df8:	f7f6 fe78 	bl	8000aec <__aeabi_uldivmod>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4ba5      	ldr	r3, [pc, #660]	; (800a098 <UART_SetConfig+0x38c>)
 8009e02:	fba3 2302 	umull	r2, r3, r3, r2
 8009e06:	095b      	lsrs	r3, r3, #5
 8009e08:	011e      	lsls	r6, r3, #4
 8009e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e0c:	461c      	mov	r4, r3
 8009e0e:	f04f 0500 	mov.w	r5, #0
 8009e12:	4622      	mov	r2, r4
 8009e14:	462b      	mov	r3, r5
 8009e16:	1891      	adds	r1, r2, r2
 8009e18:	6339      	str	r1, [r7, #48]	; 0x30
 8009e1a:	415b      	adcs	r3, r3
 8009e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009e22:	1912      	adds	r2, r2, r4
 8009e24:	eb45 0303 	adc.w	r3, r5, r3
 8009e28:	f04f 0000 	mov.w	r0, #0
 8009e2c:	f04f 0100 	mov.w	r1, #0
 8009e30:	00d9      	lsls	r1, r3, #3
 8009e32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e36:	00d0      	lsls	r0, r2, #3
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	1911      	adds	r1, r2, r4
 8009e3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8009e40:	416b      	adcs	r3, r5
 8009e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	f04f 0300 	mov.w	r3, #0
 8009e4e:	1891      	adds	r1, r2, r2
 8009e50:	62b9      	str	r1, [r7, #40]	; 0x28
 8009e52:	415b      	adcs	r3, r3
 8009e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009e5e:	f7f6 fe45 	bl	8000aec <__aeabi_uldivmod>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4b8c      	ldr	r3, [pc, #560]	; (800a098 <UART_SetConfig+0x38c>)
 8009e68:	fba3 1302 	umull	r1, r3, r3, r2
 8009e6c:	095b      	lsrs	r3, r3, #5
 8009e6e:	2164      	movs	r1, #100	; 0x64
 8009e70:	fb01 f303 	mul.w	r3, r1, r3
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	00db      	lsls	r3, r3, #3
 8009e78:	3332      	adds	r3, #50	; 0x32
 8009e7a:	4a87      	ldr	r2, [pc, #540]	; (800a098 <UART_SetConfig+0x38c>)
 8009e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e80:	095b      	lsrs	r3, r3, #5
 8009e82:	005b      	lsls	r3, r3, #1
 8009e84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e88:	441e      	add	r6, r3
 8009e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f04f 0100 	mov.w	r1, #0
 8009e92:	4602      	mov	r2, r0
 8009e94:	460b      	mov	r3, r1
 8009e96:	1894      	adds	r4, r2, r2
 8009e98:	623c      	str	r4, [r7, #32]
 8009e9a:	415b      	adcs	r3, r3
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ea2:	1812      	adds	r2, r2, r0
 8009ea4:	eb41 0303 	adc.w	r3, r1, r3
 8009ea8:	f04f 0400 	mov.w	r4, #0
 8009eac:	f04f 0500 	mov.w	r5, #0
 8009eb0:	00dd      	lsls	r5, r3, #3
 8009eb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009eb6:	00d4      	lsls	r4, r2, #3
 8009eb8:	4622      	mov	r2, r4
 8009eba:	462b      	mov	r3, r5
 8009ebc:	1814      	adds	r4, r2, r0
 8009ebe:	653c      	str	r4, [r7, #80]	; 0x50
 8009ec0:	414b      	adcs	r3, r1
 8009ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8009ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	f04f 0300 	mov.w	r3, #0
 8009ece:	1891      	adds	r1, r2, r2
 8009ed0:	61b9      	str	r1, [r7, #24]
 8009ed2:	415b      	adcs	r3, r3
 8009ed4:	61fb      	str	r3, [r7, #28]
 8009ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009eda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009ede:	f7f6 fe05 	bl	8000aec <__aeabi_uldivmod>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4b6c      	ldr	r3, [pc, #432]	; (800a098 <UART_SetConfig+0x38c>)
 8009ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8009eec:	095b      	lsrs	r3, r3, #5
 8009eee:	2164      	movs	r1, #100	; 0x64
 8009ef0:	fb01 f303 	mul.w	r3, r1, r3
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	00db      	lsls	r3, r3, #3
 8009ef8:	3332      	adds	r3, #50	; 0x32
 8009efa:	4a67      	ldr	r2, [pc, #412]	; (800a098 <UART_SetConfig+0x38c>)
 8009efc:	fba2 2303 	umull	r2, r3, r2, r3
 8009f00:	095b      	lsrs	r3, r3, #5
 8009f02:	f003 0207 	and.w	r2, r3, #7
 8009f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4432      	add	r2, r6
 8009f0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f0e:	e0b9      	b.n	800a084 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f12:	461c      	mov	r4, r3
 8009f14:	f04f 0500 	mov.w	r5, #0
 8009f18:	4622      	mov	r2, r4
 8009f1a:	462b      	mov	r3, r5
 8009f1c:	1891      	adds	r1, r2, r2
 8009f1e:	6139      	str	r1, [r7, #16]
 8009f20:	415b      	adcs	r3, r3
 8009f22:	617b      	str	r3, [r7, #20]
 8009f24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009f28:	1912      	adds	r2, r2, r4
 8009f2a:	eb45 0303 	adc.w	r3, r5, r3
 8009f2e:	f04f 0000 	mov.w	r0, #0
 8009f32:	f04f 0100 	mov.w	r1, #0
 8009f36:	00d9      	lsls	r1, r3, #3
 8009f38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009f3c:	00d0      	lsls	r0, r2, #3
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	eb12 0804 	adds.w	r8, r2, r4
 8009f46:	eb43 0905 	adc.w	r9, r3, r5
 8009f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f04f 0100 	mov.w	r1, #0
 8009f54:	f04f 0200 	mov.w	r2, #0
 8009f58:	f04f 0300 	mov.w	r3, #0
 8009f5c:	008b      	lsls	r3, r1, #2
 8009f5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f62:	0082      	lsls	r2, r0, #2
 8009f64:	4640      	mov	r0, r8
 8009f66:	4649      	mov	r1, r9
 8009f68:	f7f6 fdc0 	bl	8000aec <__aeabi_uldivmod>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4b49      	ldr	r3, [pc, #292]	; (800a098 <UART_SetConfig+0x38c>)
 8009f72:	fba3 2302 	umull	r2, r3, r3, r2
 8009f76:	095b      	lsrs	r3, r3, #5
 8009f78:	011e      	lsls	r6, r3, #4
 8009f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f04f 0100 	mov.w	r1, #0
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	1894      	adds	r4, r2, r2
 8009f88:	60bc      	str	r4, [r7, #8]
 8009f8a:	415b      	adcs	r3, r3
 8009f8c:	60fb      	str	r3, [r7, #12]
 8009f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f92:	1812      	adds	r2, r2, r0
 8009f94:	eb41 0303 	adc.w	r3, r1, r3
 8009f98:	f04f 0400 	mov.w	r4, #0
 8009f9c:	f04f 0500 	mov.w	r5, #0
 8009fa0:	00dd      	lsls	r5, r3, #3
 8009fa2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009fa6:	00d4      	lsls	r4, r2, #3
 8009fa8:	4622      	mov	r2, r4
 8009faa:	462b      	mov	r3, r5
 8009fac:	1814      	adds	r4, r2, r0
 8009fae:	64bc      	str	r4, [r7, #72]	; 0x48
 8009fb0:	414b      	adcs	r3, r1
 8009fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f04f 0100 	mov.w	r1, #0
 8009fbe:	f04f 0200 	mov.w	r2, #0
 8009fc2:	f04f 0300 	mov.w	r3, #0
 8009fc6:	008b      	lsls	r3, r1, #2
 8009fc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009fcc:	0082      	lsls	r2, r0, #2
 8009fce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009fd2:	f7f6 fd8b 	bl	8000aec <__aeabi_uldivmod>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4b2f      	ldr	r3, [pc, #188]	; (800a098 <UART_SetConfig+0x38c>)
 8009fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8009fe0:	095b      	lsrs	r3, r3, #5
 8009fe2:	2164      	movs	r1, #100	; 0x64
 8009fe4:	fb01 f303 	mul.w	r3, r1, r3
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	3332      	adds	r3, #50	; 0x32
 8009fee:	4a2a      	ldr	r2, [pc, #168]	; (800a098 <UART_SetConfig+0x38c>)
 8009ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ff4:	095b      	lsrs	r3, r3, #5
 8009ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ffa:	441e      	add	r6, r3
 8009ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ffe:	4618      	mov	r0, r3
 800a000:	f04f 0100 	mov.w	r1, #0
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	1894      	adds	r4, r2, r2
 800a00a:	603c      	str	r4, [r7, #0]
 800a00c:	415b      	adcs	r3, r3
 800a00e:	607b      	str	r3, [r7, #4]
 800a010:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a014:	1812      	adds	r2, r2, r0
 800a016:	eb41 0303 	adc.w	r3, r1, r3
 800a01a:	f04f 0400 	mov.w	r4, #0
 800a01e:	f04f 0500 	mov.w	r5, #0
 800a022:	00dd      	lsls	r5, r3, #3
 800a024:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a028:	00d4      	lsls	r4, r2, #3
 800a02a:	4622      	mov	r2, r4
 800a02c:	462b      	mov	r3, r5
 800a02e:	eb12 0a00 	adds.w	sl, r2, r0
 800a032:	eb43 0b01 	adc.w	fp, r3, r1
 800a036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f04f 0100 	mov.w	r1, #0
 800a040:	f04f 0200 	mov.w	r2, #0
 800a044:	f04f 0300 	mov.w	r3, #0
 800a048:	008b      	lsls	r3, r1, #2
 800a04a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a04e:	0082      	lsls	r2, r0, #2
 800a050:	4650      	mov	r0, sl
 800a052:	4659      	mov	r1, fp
 800a054:	f7f6 fd4a 	bl	8000aec <__aeabi_uldivmod>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4b0e      	ldr	r3, [pc, #56]	; (800a098 <UART_SetConfig+0x38c>)
 800a05e:	fba3 1302 	umull	r1, r3, r3, r2
 800a062:	095b      	lsrs	r3, r3, #5
 800a064:	2164      	movs	r1, #100	; 0x64
 800a066:	fb01 f303 	mul.w	r3, r1, r3
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	011b      	lsls	r3, r3, #4
 800a06e:	3332      	adds	r3, #50	; 0x32
 800a070:	4a09      	ldr	r2, [pc, #36]	; (800a098 <UART_SetConfig+0x38c>)
 800a072:	fba2 2303 	umull	r2, r3, r2, r3
 800a076:	095b      	lsrs	r3, r3, #5
 800a078:	f003 020f 	and.w	r2, r3, #15
 800a07c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4432      	add	r2, r6
 800a082:	609a      	str	r2, [r3, #8]
}
 800a084:	bf00      	nop
 800a086:	377c      	adds	r7, #124	; 0x7c
 800a088:	46bd      	mov	sp, r7
 800a08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08e:	bf00      	nop
 800a090:	40011000 	.word	0x40011000
 800a094:	40011400 	.word	0x40011400
 800a098:	51eb851f 	.word	0x51eb851f

0800a09c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	4b20      	ldr	r3, [pc, #128]	; (800a13c <FSMC_NORSRAM_Init+0xa0>)
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a0c6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800a0cc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800a0d2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800a0d8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800a0de:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800a0e4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800a0ea:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800a0f0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800a0f6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800a0fc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800a102:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800a108:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	2b08      	cmp	r3, #8
 800a116:	d103      	bne.n	800a120 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a11e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	68f9      	ldr	r1, [r7, #12]
 800a128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	fff00080 	.word	0xfff00080

0800a140 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800a14c:	2300      	movs	r3, #0
 800a14e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	1c5a      	adds	r2, r3, #1
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a15a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a162:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a16e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a176:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800a17e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	3b01      	subs	r3, #1
 800a186:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a188:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	3b02      	subs	r3, #2
 800a190:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a192:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a198:	4313      	orrs	r3, r2
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	1c5a      	adds	r2, r3, #1
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6979      	ldr	r1, [r7, #20]
 800a1a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	371c      	adds	r7, #28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
	...

0800a1bc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b087      	sub	sp, #28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1d4:	d122      	bne.n	800a21c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1de:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800a1e0:	697a      	ldr	r2, [r7, #20]
 800a1e2:	4b15      	ldr	r3, [pc, #84]	; (800a238 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a1f2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a1fa:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800a202:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a208:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	6979      	ldr	r1, [r7, #20]
 800a216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a21a:	e005      	b.n	800a228 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	371c      	adds	r7, #28
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	cff00000 	.word	0xcff00000

0800a23c <__errno>:
 800a23c:	4b01      	ldr	r3, [pc, #4]	; (800a244 <__errno+0x8>)
 800a23e:	6818      	ldr	r0, [r3, #0]
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	20000038 	.word	0x20000038

0800a248 <__libc_init_array>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	4d0d      	ldr	r5, [pc, #52]	; (800a280 <__libc_init_array+0x38>)
 800a24c:	4c0d      	ldr	r4, [pc, #52]	; (800a284 <__libc_init_array+0x3c>)
 800a24e:	1b64      	subs	r4, r4, r5
 800a250:	10a4      	asrs	r4, r4, #2
 800a252:	2600      	movs	r6, #0
 800a254:	42a6      	cmp	r6, r4
 800a256:	d109      	bne.n	800a26c <__libc_init_array+0x24>
 800a258:	4d0b      	ldr	r5, [pc, #44]	; (800a288 <__libc_init_array+0x40>)
 800a25a:	4c0c      	ldr	r4, [pc, #48]	; (800a28c <__libc_init_array+0x44>)
 800a25c:	f000 fc4e 	bl	800aafc <_init>
 800a260:	1b64      	subs	r4, r4, r5
 800a262:	10a4      	asrs	r4, r4, #2
 800a264:	2600      	movs	r6, #0
 800a266:	42a6      	cmp	r6, r4
 800a268:	d105      	bne.n	800a276 <__libc_init_array+0x2e>
 800a26a:	bd70      	pop	{r4, r5, r6, pc}
 800a26c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a270:	4798      	blx	r3
 800a272:	3601      	adds	r6, #1
 800a274:	e7ee      	b.n	800a254 <__libc_init_array+0xc>
 800a276:	f855 3b04 	ldr.w	r3, [r5], #4
 800a27a:	4798      	blx	r3
 800a27c:	3601      	adds	r6, #1
 800a27e:	e7f2      	b.n	800a266 <__libc_init_array+0x1e>
 800a280:	0800dc24 	.word	0x0800dc24
 800a284:	0800dc24 	.word	0x0800dc24
 800a288:	0800dc24 	.word	0x0800dc24
 800a28c:	0800dc28 	.word	0x0800dc28

0800a290 <memset>:
 800a290:	4402      	add	r2, r0
 800a292:	4603      	mov	r3, r0
 800a294:	4293      	cmp	r3, r2
 800a296:	d100      	bne.n	800a29a <memset+0xa>
 800a298:	4770      	bx	lr
 800a29a:	f803 1b01 	strb.w	r1, [r3], #1
 800a29e:	e7f9      	b.n	800a294 <memset+0x4>

0800a2a0 <siprintf>:
 800a2a0:	b40e      	push	{r1, r2, r3}
 800a2a2:	b500      	push	{lr}
 800a2a4:	b09c      	sub	sp, #112	; 0x70
 800a2a6:	ab1d      	add	r3, sp, #116	; 0x74
 800a2a8:	9002      	str	r0, [sp, #8]
 800a2aa:	9006      	str	r0, [sp, #24]
 800a2ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2b0:	4809      	ldr	r0, [pc, #36]	; (800a2d8 <siprintf+0x38>)
 800a2b2:	9107      	str	r1, [sp, #28]
 800a2b4:	9104      	str	r1, [sp, #16]
 800a2b6:	4909      	ldr	r1, [pc, #36]	; (800a2dc <siprintf+0x3c>)
 800a2b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2bc:	9105      	str	r1, [sp, #20]
 800a2be:	6800      	ldr	r0, [r0, #0]
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	a902      	add	r1, sp, #8
 800a2c4:	f000 f868 	bl	800a398 <_svfiprintf_r>
 800a2c8:	9b02      	ldr	r3, [sp, #8]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	701a      	strb	r2, [r3, #0]
 800a2ce:	b01c      	add	sp, #112	; 0x70
 800a2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2d4:	b003      	add	sp, #12
 800a2d6:	4770      	bx	lr
 800a2d8:	20000038 	.word	0x20000038
 800a2dc:	ffff0208 	.word	0xffff0208

0800a2e0 <__ssputs_r>:
 800a2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e4:	688e      	ldr	r6, [r1, #8]
 800a2e6:	429e      	cmp	r6, r3
 800a2e8:	4682      	mov	sl, r0
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	4690      	mov	r8, r2
 800a2ee:	461f      	mov	r7, r3
 800a2f0:	d838      	bhi.n	800a364 <__ssputs_r+0x84>
 800a2f2:	898a      	ldrh	r2, [r1, #12]
 800a2f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2f8:	d032      	beq.n	800a360 <__ssputs_r+0x80>
 800a2fa:	6825      	ldr	r5, [r4, #0]
 800a2fc:	6909      	ldr	r1, [r1, #16]
 800a2fe:	eba5 0901 	sub.w	r9, r5, r1
 800a302:	6965      	ldr	r5, [r4, #20]
 800a304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a308:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a30c:	3301      	adds	r3, #1
 800a30e:	444b      	add	r3, r9
 800a310:	106d      	asrs	r5, r5, #1
 800a312:	429d      	cmp	r5, r3
 800a314:	bf38      	it	cc
 800a316:	461d      	movcc	r5, r3
 800a318:	0553      	lsls	r3, r2, #21
 800a31a:	d531      	bpl.n	800a380 <__ssputs_r+0xa0>
 800a31c:	4629      	mov	r1, r5
 800a31e:	f000 fb47 	bl	800a9b0 <_malloc_r>
 800a322:	4606      	mov	r6, r0
 800a324:	b950      	cbnz	r0, 800a33c <__ssputs_r+0x5c>
 800a326:	230c      	movs	r3, #12
 800a328:	f8ca 3000 	str.w	r3, [sl]
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a332:	81a3      	strh	r3, [r4, #12]
 800a334:	f04f 30ff 	mov.w	r0, #4294967295
 800a338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a33c:	6921      	ldr	r1, [r4, #16]
 800a33e:	464a      	mov	r2, r9
 800a340:	f000 fabe 	bl	800a8c0 <memcpy>
 800a344:	89a3      	ldrh	r3, [r4, #12]
 800a346:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a34a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a34e:	81a3      	strh	r3, [r4, #12]
 800a350:	6126      	str	r6, [r4, #16]
 800a352:	6165      	str	r5, [r4, #20]
 800a354:	444e      	add	r6, r9
 800a356:	eba5 0509 	sub.w	r5, r5, r9
 800a35a:	6026      	str	r6, [r4, #0]
 800a35c:	60a5      	str	r5, [r4, #8]
 800a35e:	463e      	mov	r6, r7
 800a360:	42be      	cmp	r6, r7
 800a362:	d900      	bls.n	800a366 <__ssputs_r+0x86>
 800a364:	463e      	mov	r6, r7
 800a366:	4632      	mov	r2, r6
 800a368:	6820      	ldr	r0, [r4, #0]
 800a36a:	4641      	mov	r1, r8
 800a36c:	f000 fab6 	bl	800a8dc <memmove>
 800a370:	68a3      	ldr	r3, [r4, #8]
 800a372:	6822      	ldr	r2, [r4, #0]
 800a374:	1b9b      	subs	r3, r3, r6
 800a376:	4432      	add	r2, r6
 800a378:	60a3      	str	r3, [r4, #8]
 800a37a:	6022      	str	r2, [r4, #0]
 800a37c:	2000      	movs	r0, #0
 800a37e:	e7db      	b.n	800a338 <__ssputs_r+0x58>
 800a380:	462a      	mov	r2, r5
 800a382:	f000 fb6f 	bl	800aa64 <_realloc_r>
 800a386:	4606      	mov	r6, r0
 800a388:	2800      	cmp	r0, #0
 800a38a:	d1e1      	bne.n	800a350 <__ssputs_r+0x70>
 800a38c:	6921      	ldr	r1, [r4, #16]
 800a38e:	4650      	mov	r0, sl
 800a390:	f000 fabe 	bl	800a910 <_free_r>
 800a394:	e7c7      	b.n	800a326 <__ssputs_r+0x46>
	...

0800a398 <_svfiprintf_r>:
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	4698      	mov	r8, r3
 800a39e:	898b      	ldrh	r3, [r1, #12]
 800a3a0:	061b      	lsls	r3, r3, #24
 800a3a2:	b09d      	sub	sp, #116	; 0x74
 800a3a4:	4607      	mov	r7, r0
 800a3a6:	460d      	mov	r5, r1
 800a3a8:	4614      	mov	r4, r2
 800a3aa:	d50e      	bpl.n	800a3ca <_svfiprintf_r+0x32>
 800a3ac:	690b      	ldr	r3, [r1, #16]
 800a3ae:	b963      	cbnz	r3, 800a3ca <_svfiprintf_r+0x32>
 800a3b0:	2140      	movs	r1, #64	; 0x40
 800a3b2:	f000 fafd 	bl	800a9b0 <_malloc_r>
 800a3b6:	6028      	str	r0, [r5, #0]
 800a3b8:	6128      	str	r0, [r5, #16]
 800a3ba:	b920      	cbnz	r0, 800a3c6 <_svfiprintf_r+0x2e>
 800a3bc:	230c      	movs	r3, #12
 800a3be:	603b      	str	r3, [r7, #0]
 800a3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c4:	e0d1      	b.n	800a56a <_svfiprintf_r+0x1d2>
 800a3c6:	2340      	movs	r3, #64	; 0x40
 800a3c8:	616b      	str	r3, [r5, #20]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ce:	2320      	movs	r3, #32
 800a3d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3d8:	2330      	movs	r3, #48	; 0x30
 800a3da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a584 <_svfiprintf_r+0x1ec>
 800a3de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3e2:	f04f 0901 	mov.w	r9, #1
 800a3e6:	4623      	mov	r3, r4
 800a3e8:	469a      	mov	sl, r3
 800a3ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3ee:	b10a      	cbz	r2, 800a3f4 <_svfiprintf_r+0x5c>
 800a3f0:	2a25      	cmp	r2, #37	; 0x25
 800a3f2:	d1f9      	bne.n	800a3e8 <_svfiprintf_r+0x50>
 800a3f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a3f8:	d00b      	beq.n	800a412 <_svfiprintf_r+0x7a>
 800a3fa:	465b      	mov	r3, fp
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	4629      	mov	r1, r5
 800a400:	4638      	mov	r0, r7
 800a402:	f7ff ff6d 	bl	800a2e0 <__ssputs_r>
 800a406:	3001      	adds	r0, #1
 800a408:	f000 80aa 	beq.w	800a560 <_svfiprintf_r+0x1c8>
 800a40c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a40e:	445a      	add	r2, fp
 800a410:	9209      	str	r2, [sp, #36]	; 0x24
 800a412:	f89a 3000 	ldrb.w	r3, [sl]
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 80a2 	beq.w	800a560 <_svfiprintf_r+0x1c8>
 800a41c:	2300      	movs	r3, #0
 800a41e:	f04f 32ff 	mov.w	r2, #4294967295
 800a422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a426:	f10a 0a01 	add.w	sl, sl, #1
 800a42a:	9304      	str	r3, [sp, #16]
 800a42c:	9307      	str	r3, [sp, #28]
 800a42e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a432:	931a      	str	r3, [sp, #104]	; 0x68
 800a434:	4654      	mov	r4, sl
 800a436:	2205      	movs	r2, #5
 800a438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a43c:	4851      	ldr	r0, [pc, #324]	; (800a584 <_svfiprintf_r+0x1ec>)
 800a43e:	f7f5 fec7 	bl	80001d0 <memchr>
 800a442:	9a04      	ldr	r2, [sp, #16]
 800a444:	b9d8      	cbnz	r0, 800a47e <_svfiprintf_r+0xe6>
 800a446:	06d0      	lsls	r0, r2, #27
 800a448:	bf44      	itt	mi
 800a44a:	2320      	movmi	r3, #32
 800a44c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a450:	0711      	lsls	r1, r2, #28
 800a452:	bf44      	itt	mi
 800a454:	232b      	movmi	r3, #43	; 0x2b
 800a456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a45a:	f89a 3000 	ldrb.w	r3, [sl]
 800a45e:	2b2a      	cmp	r3, #42	; 0x2a
 800a460:	d015      	beq.n	800a48e <_svfiprintf_r+0xf6>
 800a462:	9a07      	ldr	r2, [sp, #28]
 800a464:	4654      	mov	r4, sl
 800a466:	2000      	movs	r0, #0
 800a468:	f04f 0c0a 	mov.w	ip, #10
 800a46c:	4621      	mov	r1, r4
 800a46e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a472:	3b30      	subs	r3, #48	; 0x30
 800a474:	2b09      	cmp	r3, #9
 800a476:	d94e      	bls.n	800a516 <_svfiprintf_r+0x17e>
 800a478:	b1b0      	cbz	r0, 800a4a8 <_svfiprintf_r+0x110>
 800a47a:	9207      	str	r2, [sp, #28]
 800a47c:	e014      	b.n	800a4a8 <_svfiprintf_r+0x110>
 800a47e:	eba0 0308 	sub.w	r3, r0, r8
 800a482:	fa09 f303 	lsl.w	r3, r9, r3
 800a486:	4313      	orrs	r3, r2
 800a488:	9304      	str	r3, [sp, #16]
 800a48a:	46a2      	mov	sl, r4
 800a48c:	e7d2      	b.n	800a434 <_svfiprintf_r+0x9c>
 800a48e:	9b03      	ldr	r3, [sp, #12]
 800a490:	1d19      	adds	r1, r3, #4
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	9103      	str	r1, [sp, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	bfbb      	ittet	lt
 800a49a:	425b      	neglt	r3, r3
 800a49c:	f042 0202 	orrlt.w	r2, r2, #2
 800a4a0:	9307      	strge	r3, [sp, #28]
 800a4a2:	9307      	strlt	r3, [sp, #28]
 800a4a4:	bfb8      	it	lt
 800a4a6:	9204      	strlt	r2, [sp, #16]
 800a4a8:	7823      	ldrb	r3, [r4, #0]
 800a4aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a4ac:	d10c      	bne.n	800a4c8 <_svfiprintf_r+0x130>
 800a4ae:	7863      	ldrb	r3, [r4, #1]
 800a4b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4b2:	d135      	bne.n	800a520 <_svfiprintf_r+0x188>
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	1d1a      	adds	r2, r3, #4
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	9203      	str	r2, [sp, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	bfb8      	it	lt
 800a4c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4c4:	3402      	adds	r4, #2
 800a4c6:	9305      	str	r3, [sp, #20]
 800a4c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a594 <_svfiprintf_r+0x1fc>
 800a4cc:	7821      	ldrb	r1, [r4, #0]
 800a4ce:	2203      	movs	r2, #3
 800a4d0:	4650      	mov	r0, sl
 800a4d2:	f7f5 fe7d 	bl	80001d0 <memchr>
 800a4d6:	b140      	cbz	r0, 800a4ea <_svfiprintf_r+0x152>
 800a4d8:	2340      	movs	r3, #64	; 0x40
 800a4da:	eba0 000a 	sub.w	r0, r0, sl
 800a4de:	fa03 f000 	lsl.w	r0, r3, r0
 800a4e2:	9b04      	ldr	r3, [sp, #16]
 800a4e4:	4303      	orrs	r3, r0
 800a4e6:	3401      	adds	r4, #1
 800a4e8:	9304      	str	r3, [sp, #16]
 800a4ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ee:	4826      	ldr	r0, [pc, #152]	; (800a588 <_svfiprintf_r+0x1f0>)
 800a4f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4f4:	2206      	movs	r2, #6
 800a4f6:	f7f5 fe6b 	bl	80001d0 <memchr>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d038      	beq.n	800a570 <_svfiprintf_r+0x1d8>
 800a4fe:	4b23      	ldr	r3, [pc, #140]	; (800a58c <_svfiprintf_r+0x1f4>)
 800a500:	bb1b      	cbnz	r3, 800a54a <_svfiprintf_r+0x1b2>
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	3307      	adds	r3, #7
 800a506:	f023 0307 	bic.w	r3, r3, #7
 800a50a:	3308      	adds	r3, #8
 800a50c:	9303      	str	r3, [sp, #12]
 800a50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a510:	4433      	add	r3, r6
 800a512:	9309      	str	r3, [sp, #36]	; 0x24
 800a514:	e767      	b.n	800a3e6 <_svfiprintf_r+0x4e>
 800a516:	fb0c 3202 	mla	r2, ip, r2, r3
 800a51a:	460c      	mov	r4, r1
 800a51c:	2001      	movs	r0, #1
 800a51e:	e7a5      	b.n	800a46c <_svfiprintf_r+0xd4>
 800a520:	2300      	movs	r3, #0
 800a522:	3401      	adds	r4, #1
 800a524:	9305      	str	r3, [sp, #20]
 800a526:	4619      	mov	r1, r3
 800a528:	f04f 0c0a 	mov.w	ip, #10
 800a52c:	4620      	mov	r0, r4
 800a52e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a532:	3a30      	subs	r2, #48	; 0x30
 800a534:	2a09      	cmp	r2, #9
 800a536:	d903      	bls.n	800a540 <_svfiprintf_r+0x1a8>
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d0c5      	beq.n	800a4c8 <_svfiprintf_r+0x130>
 800a53c:	9105      	str	r1, [sp, #20]
 800a53e:	e7c3      	b.n	800a4c8 <_svfiprintf_r+0x130>
 800a540:	fb0c 2101 	mla	r1, ip, r1, r2
 800a544:	4604      	mov	r4, r0
 800a546:	2301      	movs	r3, #1
 800a548:	e7f0      	b.n	800a52c <_svfiprintf_r+0x194>
 800a54a:	ab03      	add	r3, sp, #12
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	462a      	mov	r2, r5
 800a550:	4b0f      	ldr	r3, [pc, #60]	; (800a590 <_svfiprintf_r+0x1f8>)
 800a552:	a904      	add	r1, sp, #16
 800a554:	4638      	mov	r0, r7
 800a556:	f3af 8000 	nop.w
 800a55a:	1c42      	adds	r2, r0, #1
 800a55c:	4606      	mov	r6, r0
 800a55e:	d1d6      	bne.n	800a50e <_svfiprintf_r+0x176>
 800a560:	89ab      	ldrh	r3, [r5, #12]
 800a562:	065b      	lsls	r3, r3, #25
 800a564:	f53f af2c 	bmi.w	800a3c0 <_svfiprintf_r+0x28>
 800a568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a56a:	b01d      	add	sp, #116	; 0x74
 800a56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a570:	ab03      	add	r3, sp, #12
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	462a      	mov	r2, r5
 800a576:	4b06      	ldr	r3, [pc, #24]	; (800a590 <_svfiprintf_r+0x1f8>)
 800a578:	a904      	add	r1, sp, #16
 800a57a:	4638      	mov	r0, r7
 800a57c:	f000 f87a 	bl	800a674 <_printf_i>
 800a580:	e7eb      	b.n	800a55a <_svfiprintf_r+0x1c2>
 800a582:	bf00      	nop
 800a584:	0800dbe8 	.word	0x0800dbe8
 800a588:	0800dbf2 	.word	0x0800dbf2
 800a58c:	00000000 	.word	0x00000000
 800a590:	0800a2e1 	.word	0x0800a2e1
 800a594:	0800dbee 	.word	0x0800dbee

0800a598 <_printf_common>:
 800a598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a59c:	4616      	mov	r6, r2
 800a59e:	4699      	mov	r9, r3
 800a5a0:	688a      	ldr	r2, [r1, #8]
 800a5a2:	690b      	ldr	r3, [r1, #16]
 800a5a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	bfb8      	it	lt
 800a5ac:	4613      	movlt	r3, r2
 800a5ae:	6033      	str	r3, [r6, #0]
 800a5b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5b4:	4607      	mov	r7, r0
 800a5b6:	460c      	mov	r4, r1
 800a5b8:	b10a      	cbz	r2, 800a5be <_printf_common+0x26>
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	6033      	str	r3, [r6, #0]
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	0699      	lsls	r1, r3, #26
 800a5c2:	bf42      	ittt	mi
 800a5c4:	6833      	ldrmi	r3, [r6, #0]
 800a5c6:	3302      	addmi	r3, #2
 800a5c8:	6033      	strmi	r3, [r6, #0]
 800a5ca:	6825      	ldr	r5, [r4, #0]
 800a5cc:	f015 0506 	ands.w	r5, r5, #6
 800a5d0:	d106      	bne.n	800a5e0 <_printf_common+0x48>
 800a5d2:	f104 0a19 	add.w	sl, r4, #25
 800a5d6:	68e3      	ldr	r3, [r4, #12]
 800a5d8:	6832      	ldr	r2, [r6, #0]
 800a5da:	1a9b      	subs	r3, r3, r2
 800a5dc:	42ab      	cmp	r3, r5
 800a5de:	dc26      	bgt.n	800a62e <_printf_common+0x96>
 800a5e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5e4:	1e13      	subs	r3, r2, #0
 800a5e6:	6822      	ldr	r2, [r4, #0]
 800a5e8:	bf18      	it	ne
 800a5ea:	2301      	movne	r3, #1
 800a5ec:	0692      	lsls	r2, r2, #26
 800a5ee:	d42b      	bmi.n	800a648 <_printf_common+0xb0>
 800a5f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5f4:	4649      	mov	r1, r9
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	47c0      	blx	r8
 800a5fa:	3001      	adds	r0, #1
 800a5fc:	d01e      	beq.n	800a63c <_printf_common+0xa4>
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	68e5      	ldr	r5, [r4, #12]
 800a602:	6832      	ldr	r2, [r6, #0]
 800a604:	f003 0306 	and.w	r3, r3, #6
 800a608:	2b04      	cmp	r3, #4
 800a60a:	bf08      	it	eq
 800a60c:	1aad      	subeq	r5, r5, r2
 800a60e:	68a3      	ldr	r3, [r4, #8]
 800a610:	6922      	ldr	r2, [r4, #16]
 800a612:	bf0c      	ite	eq
 800a614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a618:	2500      	movne	r5, #0
 800a61a:	4293      	cmp	r3, r2
 800a61c:	bfc4      	itt	gt
 800a61e:	1a9b      	subgt	r3, r3, r2
 800a620:	18ed      	addgt	r5, r5, r3
 800a622:	2600      	movs	r6, #0
 800a624:	341a      	adds	r4, #26
 800a626:	42b5      	cmp	r5, r6
 800a628:	d11a      	bne.n	800a660 <_printf_common+0xc8>
 800a62a:	2000      	movs	r0, #0
 800a62c:	e008      	b.n	800a640 <_printf_common+0xa8>
 800a62e:	2301      	movs	r3, #1
 800a630:	4652      	mov	r2, sl
 800a632:	4649      	mov	r1, r9
 800a634:	4638      	mov	r0, r7
 800a636:	47c0      	blx	r8
 800a638:	3001      	adds	r0, #1
 800a63a:	d103      	bne.n	800a644 <_printf_common+0xac>
 800a63c:	f04f 30ff 	mov.w	r0, #4294967295
 800a640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a644:	3501      	adds	r5, #1
 800a646:	e7c6      	b.n	800a5d6 <_printf_common+0x3e>
 800a648:	18e1      	adds	r1, r4, r3
 800a64a:	1c5a      	adds	r2, r3, #1
 800a64c:	2030      	movs	r0, #48	; 0x30
 800a64e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a652:	4422      	add	r2, r4
 800a654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a65c:	3302      	adds	r3, #2
 800a65e:	e7c7      	b.n	800a5f0 <_printf_common+0x58>
 800a660:	2301      	movs	r3, #1
 800a662:	4622      	mov	r2, r4
 800a664:	4649      	mov	r1, r9
 800a666:	4638      	mov	r0, r7
 800a668:	47c0      	blx	r8
 800a66a:	3001      	adds	r0, #1
 800a66c:	d0e6      	beq.n	800a63c <_printf_common+0xa4>
 800a66e:	3601      	adds	r6, #1
 800a670:	e7d9      	b.n	800a626 <_printf_common+0x8e>
	...

0800a674 <_printf_i>:
 800a674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a678:	460c      	mov	r4, r1
 800a67a:	4691      	mov	r9, r2
 800a67c:	7e27      	ldrb	r7, [r4, #24]
 800a67e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a680:	2f78      	cmp	r7, #120	; 0x78
 800a682:	4680      	mov	r8, r0
 800a684:	469a      	mov	sl, r3
 800a686:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a68a:	d807      	bhi.n	800a69c <_printf_i+0x28>
 800a68c:	2f62      	cmp	r7, #98	; 0x62
 800a68e:	d80a      	bhi.n	800a6a6 <_printf_i+0x32>
 800a690:	2f00      	cmp	r7, #0
 800a692:	f000 80d8 	beq.w	800a846 <_printf_i+0x1d2>
 800a696:	2f58      	cmp	r7, #88	; 0x58
 800a698:	f000 80a3 	beq.w	800a7e2 <_printf_i+0x16e>
 800a69c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a6a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6a4:	e03a      	b.n	800a71c <_printf_i+0xa8>
 800a6a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6aa:	2b15      	cmp	r3, #21
 800a6ac:	d8f6      	bhi.n	800a69c <_printf_i+0x28>
 800a6ae:	a001      	add	r0, pc, #4	; (adr r0, 800a6b4 <_printf_i+0x40>)
 800a6b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a6b4:	0800a70d 	.word	0x0800a70d
 800a6b8:	0800a721 	.word	0x0800a721
 800a6bc:	0800a69d 	.word	0x0800a69d
 800a6c0:	0800a69d 	.word	0x0800a69d
 800a6c4:	0800a69d 	.word	0x0800a69d
 800a6c8:	0800a69d 	.word	0x0800a69d
 800a6cc:	0800a721 	.word	0x0800a721
 800a6d0:	0800a69d 	.word	0x0800a69d
 800a6d4:	0800a69d 	.word	0x0800a69d
 800a6d8:	0800a69d 	.word	0x0800a69d
 800a6dc:	0800a69d 	.word	0x0800a69d
 800a6e0:	0800a82d 	.word	0x0800a82d
 800a6e4:	0800a751 	.word	0x0800a751
 800a6e8:	0800a80f 	.word	0x0800a80f
 800a6ec:	0800a69d 	.word	0x0800a69d
 800a6f0:	0800a69d 	.word	0x0800a69d
 800a6f4:	0800a84f 	.word	0x0800a84f
 800a6f8:	0800a69d 	.word	0x0800a69d
 800a6fc:	0800a751 	.word	0x0800a751
 800a700:	0800a69d 	.word	0x0800a69d
 800a704:	0800a69d 	.word	0x0800a69d
 800a708:	0800a817 	.word	0x0800a817
 800a70c:	680b      	ldr	r3, [r1, #0]
 800a70e:	1d1a      	adds	r2, r3, #4
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	600a      	str	r2, [r1, #0]
 800a714:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a71c:	2301      	movs	r3, #1
 800a71e:	e0a3      	b.n	800a868 <_printf_i+0x1f4>
 800a720:	6825      	ldr	r5, [r4, #0]
 800a722:	6808      	ldr	r0, [r1, #0]
 800a724:	062e      	lsls	r6, r5, #24
 800a726:	f100 0304 	add.w	r3, r0, #4
 800a72a:	d50a      	bpl.n	800a742 <_printf_i+0xce>
 800a72c:	6805      	ldr	r5, [r0, #0]
 800a72e:	600b      	str	r3, [r1, #0]
 800a730:	2d00      	cmp	r5, #0
 800a732:	da03      	bge.n	800a73c <_printf_i+0xc8>
 800a734:	232d      	movs	r3, #45	; 0x2d
 800a736:	426d      	negs	r5, r5
 800a738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a73c:	485e      	ldr	r0, [pc, #376]	; (800a8b8 <_printf_i+0x244>)
 800a73e:	230a      	movs	r3, #10
 800a740:	e019      	b.n	800a776 <_printf_i+0x102>
 800a742:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a746:	6805      	ldr	r5, [r0, #0]
 800a748:	600b      	str	r3, [r1, #0]
 800a74a:	bf18      	it	ne
 800a74c:	b22d      	sxthne	r5, r5
 800a74e:	e7ef      	b.n	800a730 <_printf_i+0xbc>
 800a750:	680b      	ldr	r3, [r1, #0]
 800a752:	6825      	ldr	r5, [r4, #0]
 800a754:	1d18      	adds	r0, r3, #4
 800a756:	6008      	str	r0, [r1, #0]
 800a758:	0628      	lsls	r0, r5, #24
 800a75a:	d501      	bpl.n	800a760 <_printf_i+0xec>
 800a75c:	681d      	ldr	r5, [r3, #0]
 800a75e:	e002      	b.n	800a766 <_printf_i+0xf2>
 800a760:	0669      	lsls	r1, r5, #25
 800a762:	d5fb      	bpl.n	800a75c <_printf_i+0xe8>
 800a764:	881d      	ldrh	r5, [r3, #0]
 800a766:	4854      	ldr	r0, [pc, #336]	; (800a8b8 <_printf_i+0x244>)
 800a768:	2f6f      	cmp	r7, #111	; 0x6f
 800a76a:	bf0c      	ite	eq
 800a76c:	2308      	moveq	r3, #8
 800a76e:	230a      	movne	r3, #10
 800a770:	2100      	movs	r1, #0
 800a772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a776:	6866      	ldr	r6, [r4, #4]
 800a778:	60a6      	str	r6, [r4, #8]
 800a77a:	2e00      	cmp	r6, #0
 800a77c:	bfa2      	ittt	ge
 800a77e:	6821      	ldrge	r1, [r4, #0]
 800a780:	f021 0104 	bicge.w	r1, r1, #4
 800a784:	6021      	strge	r1, [r4, #0]
 800a786:	b90d      	cbnz	r5, 800a78c <_printf_i+0x118>
 800a788:	2e00      	cmp	r6, #0
 800a78a:	d04d      	beq.n	800a828 <_printf_i+0x1b4>
 800a78c:	4616      	mov	r6, r2
 800a78e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a792:	fb03 5711 	mls	r7, r3, r1, r5
 800a796:	5dc7      	ldrb	r7, [r0, r7]
 800a798:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a79c:	462f      	mov	r7, r5
 800a79e:	42bb      	cmp	r3, r7
 800a7a0:	460d      	mov	r5, r1
 800a7a2:	d9f4      	bls.n	800a78e <_printf_i+0x11a>
 800a7a4:	2b08      	cmp	r3, #8
 800a7a6:	d10b      	bne.n	800a7c0 <_printf_i+0x14c>
 800a7a8:	6823      	ldr	r3, [r4, #0]
 800a7aa:	07df      	lsls	r7, r3, #31
 800a7ac:	d508      	bpl.n	800a7c0 <_printf_i+0x14c>
 800a7ae:	6923      	ldr	r3, [r4, #16]
 800a7b0:	6861      	ldr	r1, [r4, #4]
 800a7b2:	4299      	cmp	r1, r3
 800a7b4:	bfde      	ittt	le
 800a7b6:	2330      	movle	r3, #48	; 0x30
 800a7b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a7c0:	1b92      	subs	r2, r2, r6
 800a7c2:	6122      	str	r2, [r4, #16]
 800a7c4:	f8cd a000 	str.w	sl, [sp]
 800a7c8:	464b      	mov	r3, r9
 800a7ca:	aa03      	add	r2, sp, #12
 800a7cc:	4621      	mov	r1, r4
 800a7ce:	4640      	mov	r0, r8
 800a7d0:	f7ff fee2 	bl	800a598 <_printf_common>
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	d14c      	bne.n	800a872 <_printf_i+0x1fe>
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7dc:	b004      	add	sp, #16
 800a7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e2:	4835      	ldr	r0, [pc, #212]	; (800a8b8 <_printf_i+0x244>)
 800a7e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a7e8:	6823      	ldr	r3, [r4, #0]
 800a7ea:	680e      	ldr	r6, [r1, #0]
 800a7ec:	061f      	lsls	r7, r3, #24
 800a7ee:	f856 5b04 	ldr.w	r5, [r6], #4
 800a7f2:	600e      	str	r6, [r1, #0]
 800a7f4:	d514      	bpl.n	800a820 <_printf_i+0x1ac>
 800a7f6:	07d9      	lsls	r1, r3, #31
 800a7f8:	bf44      	itt	mi
 800a7fa:	f043 0320 	orrmi.w	r3, r3, #32
 800a7fe:	6023      	strmi	r3, [r4, #0]
 800a800:	b91d      	cbnz	r5, 800a80a <_printf_i+0x196>
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	f023 0320 	bic.w	r3, r3, #32
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	2310      	movs	r3, #16
 800a80c:	e7b0      	b.n	800a770 <_printf_i+0xfc>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	f043 0320 	orr.w	r3, r3, #32
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	2378      	movs	r3, #120	; 0x78
 800a818:	4828      	ldr	r0, [pc, #160]	; (800a8bc <_printf_i+0x248>)
 800a81a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a81e:	e7e3      	b.n	800a7e8 <_printf_i+0x174>
 800a820:	065e      	lsls	r6, r3, #25
 800a822:	bf48      	it	mi
 800a824:	b2ad      	uxthmi	r5, r5
 800a826:	e7e6      	b.n	800a7f6 <_printf_i+0x182>
 800a828:	4616      	mov	r6, r2
 800a82a:	e7bb      	b.n	800a7a4 <_printf_i+0x130>
 800a82c:	680b      	ldr	r3, [r1, #0]
 800a82e:	6826      	ldr	r6, [r4, #0]
 800a830:	6960      	ldr	r0, [r4, #20]
 800a832:	1d1d      	adds	r5, r3, #4
 800a834:	600d      	str	r5, [r1, #0]
 800a836:	0635      	lsls	r5, r6, #24
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	d501      	bpl.n	800a840 <_printf_i+0x1cc>
 800a83c:	6018      	str	r0, [r3, #0]
 800a83e:	e002      	b.n	800a846 <_printf_i+0x1d2>
 800a840:	0671      	lsls	r1, r6, #25
 800a842:	d5fb      	bpl.n	800a83c <_printf_i+0x1c8>
 800a844:	8018      	strh	r0, [r3, #0]
 800a846:	2300      	movs	r3, #0
 800a848:	6123      	str	r3, [r4, #16]
 800a84a:	4616      	mov	r6, r2
 800a84c:	e7ba      	b.n	800a7c4 <_printf_i+0x150>
 800a84e:	680b      	ldr	r3, [r1, #0]
 800a850:	1d1a      	adds	r2, r3, #4
 800a852:	600a      	str	r2, [r1, #0]
 800a854:	681e      	ldr	r6, [r3, #0]
 800a856:	6862      	ldr	r2, [r4, #4]
 800a858:	2100      	movs	r1, #0
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7f5 fcb8 	bl	80001d0 <memchr>
 800a860:	b108      	cbz	r0, 800a866 <_printf_i+0x1f2>
 800a862:	1b80      	subs	r0, r0, r6
 800a864:	6060      	str	r0, [r4, #4]
 800a866:	6863      	ldr	r3, [r4, #4]
 800a868:	6123      	str	r3, [r4, #16]
 800a86a:	2300      	movs	r3, #0
 800a86c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a870:	e7a8      	b.n	800a7c4 <_printf_i+0x150>
 800a872:	6923      	ldr	r3, [r4, #16]
 800a874:	4632      	mov	r2, r6
 800a876:	4649      	mov	r1, r9
 800a878:	4640      	mov	r0, r8
 800a87a:	47d0      	blx	sl
 800a87c:	3001      	adds	r0, #1
 800a87e:	d0ab      	beq.n	800a7d8 <_printf_i+0x164>
 800a880:	6823      	ldr	r3, [r4, #0]
 800a882:	079b      	lsls	r3, r3, #30
 800a884:	d413      	bmi.n	800a8ae <_printf_i+0x23a>
 800a886:	68e0      	ldr	r0, [r4, #12]
 800a888:	9b03      	ldr	r3, [sp, #12]
 800a88a:	4298      	cmp	r0, r3
 800a88c:	bfb8      	it	lt
 800a88e:	4618      	movlt	r0, r3
 800a890:	e7a4      	b.n	800a7dc <_printf_i+0x168>
 800a892:	2301      	movs	r3, #1
 800a894:	4632      	mov	r2, r6
 800a896:	4649      	mov	r1, r9
 800a898:	4640      	mov	r0, r8
 800a89a:	47d0      	blx	sl
 800a89c:	3001      	adds	r0, #1
 800a89e:	d09b      	beq.n	800a7d8 <_printf_i+0x164>
 800a8a0:	3501      	adds	r5, #1
 800a8a2:	68e3      	ldr	r3, [r4, #12]
 800a8a4:	9903      	ldr	r1, [sp, #12]
 800a8a6:	1a5b      	subs	r3, r3, r1
 800a8a8:	42ab      	cmp	r3, r5
 800a8aa:	dcf2      	bgt.n	800a892 <_printf_i+0x21e>
 800a8ac:	e7eb      	b.n	800a886 <_printf_i+0x212>
 800a8ae:	2500      	movs	r5, #0
 800a8b0:	f104 0619 	add.w	r6, r4, #25
 800a8b4:	e7f5      	b.n	800a8a2 <_printf_i+0x22e>
 800a8b6:	bf00      	nop
 800a8b8:	0800dbf9 	.word	0x0800dbf9
 800a8bc:	0800dc0a 	.word	0x0800dc0a

0800a8c0 <memcpy>:
 800a8c0:	440a      	add	r2, r1
 800a8c2:	4291      	cmp	r1, r2
 800a8c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8c8:	d100      	bne.n	800a8cc <memcpy+0xc>
 800a8ca:	4770      	bx	lr
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8d6:	4291      	cmp	r1, r2
 800a8d8:	d1f9      	bne.n	800a8ce <memcpy+0xe>
 800a8da:	bd10      	pop	{r4, pc}

0800a8dc <memmove>:
 800a8dc:	4288      	cmp	r0, r1
 800a8de:	b510      	push	{r4, lr}
 800a8e0:	eb01 0402 	add.w	r4, r1, r2
 800a8e4:	d902      	bls.n	800a8ec <memmove+0x10>
 800a8e6:	4284      	cmp	r4, r0
 800a8e8:	4623      	mov	r3, r4
 800a8ea:	d807      	bhi.n	800a8fc <memmove+0x20>
 800a8ec:	1e43      	subs	r3, r0, #1
 800a8ee:	42a1      	cmp	r1, r4
 800a8f0:	d008      	beq.n	800a904 <memmove+0x28>
 800a8f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8fa:	e7f8      	b.n	800a8ee <memmove+0x12>
 800a8fc:	4402      	add	r2, r0
 800a8fe:	4601      	mov	r1, r0
 800a900:	428a      	cmp	r2, r1
 800a902:	d100      	bne.n	800a906 <memmove+0x2a>
 800a904:	bd10      	pop	{r4, pc}
 800a906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a90a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a90e:	e7f7      	b.n	800a900 <memmove+0x24>

0800a910 <_free_r>:
 800a910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a912:	2900      	cmp	r1, #0
 800a914:	d048      	beq.n	800a9a8 <_free_r+0x98>
 800a916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a91a:	9001      	str	r0, [sp, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f1a1 0404 	sub.w	r4, r1, #4
 800a922:	bfb8      	it	lt
 800a924:	18e4      	addlt	r4, r4, r3
 800a926:	f000 f8d3 	bl	800aad0 <__malloc_lock>
 800a92a:	4a20      	ldr	r2, [pc, #128]	; (800a9ac <_free_r+0x9c>)
 800a92c:	9801      	ldr	r0, [sp, #4]
 800a92e:	6813      	ldr	r3, [r2, #0]
 800a930:	4615      	mov	r5, r2
 800a932:	b933      	cbnz	r3, 800a942 <_free_r+0x32>
 800a934:	6063      	str	r3, [r4, #4]
 800a936:	6014      	str	r4, [r2, #0]
 800a938:	b003      	add	sp, #12
 800a93a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a93e:	f000 b8cd 	b.w	800aadc <__malloc_unlock>
 800a942:	42a3      	cmp	r3, r4
 800a944:	d90b      	bls.n	800a95e <_free_r+0x4e>
 800a946:	6821      	ldr	r1, [r4, #0]
 800a948:	1862      	adds	r2, r4, r1
 800a94a:	4293      	cmp	r3, r2
 800a94c:	bf04      	itt	eq
 800a94e:	681a      	ldreq	r2, [r3, #0]
 800a950:	685b      	ldreq	r3, [r3, #4]
 800a952:	6063      	str	r3, [r4, #4]
 800a954:	bf04      	itt	eq
 800a956:	1852      	addeq	r2, r2, r1
 800a958:	6022      	streq	r2, [r4, #0]
 800a95a:	602c      	str	r4, [r5, #0]
 800a95c:	e7ec      	b.n	800a938 <_free_r+0x28>
 800a95e:	461a      	mov	r2, r3
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	b10b      	cbz	r3, 800a968 <_free_r+0x58>
 800a964:	42a3      	cmp	r3, r4
 800a966:	d9fa      	bls.n	800a95e <_free_r+0x4e>
 800a968:	6811      	ldr	r1, [r2, #0]
 800a96a:	1855      	adds	r5, r2, r1
 800a96c:	42a5      	cmp	r5, r4
 800a96e:	d10b      	bne.n	800a988 <_free_r+0x78>
 800a970:	6824      	ldr	r4, [r4, #0]
 800a972:	4421      	add	r1, r4
 800a974:	1854      	adds	r4, r2, r1
 800a976:	42a3      	cmp	r3, r4
 800a978:	6011      	str	r1, [r2, #0]
 800a97a:	d1dd      	bne.n	800a938 <_free_r+0x28>
 800a97c:	681c      	ldr	r4, [r3, #0]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	6053      	str	r3, [r2, #4]
 800a982:	4421      	add	r1, r4
 800a984:	6011      	str	r1, [r2, #0]
 800a986:	e7d7      	b.n	800a938 <_free_r+0x28>
 800a988:	d902      	bls.n	800a990 <_free_r+0x80>
 800a98a:	230c      	movs	r3, #12
 800a98c:	6003      	str	r3, [r0, #0]
 800a98e:	e7d3      	b.n	800a938 <_free_r+0x28>
 800a990:	6825      	ldr	r5, [r4, #0]
 800a992:	1961      	adds	r1, r4, r5
 800a994:	428b      	cmp	r3, r1
 800a996:	bf04      	itt	eq
 800a998:	6819      	ldreq	r1, [r3, #0]
 800a99a:	685b      	ldreq	r3, [r3, #4]
 800a99c:	6063      	str	r3, [r4, #4]
 800a99e:	bf04      	itt	eq
 800a9a0:	1949      	addeq	r1, r1, r5
 800a9a2:	6021      	streq	r1, [r4, #0]
 800a9a4:	6054      	str	r4, [r2, #4]
 800a9a6:	e7c7      	b.n	800a938 <_free_r+0x28>
 800a9a8:	b003      	add	sp, #12
 800a9aa:	bd30      	pop	{r4, r5, pc}
 800a9ac:	200000d8 	.word	0x200000d8

0800a9b0 <_malloc_r>:
 800a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b2:	1ccd      	adds	r5, r1, #3
 800a9b4:	f025 0503 	bic.w	r5, r5, #3
 800a9b8:	3508      	adds	r5, #8
 800a9ba:	2d0c      	cmp	r5, #12
 800a9bc:	bf38      	it	cc
 800a9be:	250c      	movcc	r5, #12
 800a9c0:	2d00      	cmp	r5, #0
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	db01      	blt.n	800a9ca <_malloc_r+0x1a>
 800a9c6:	42a9      	cmp	r1, r5
 800a9c8:	d903      	bls.n	800a9d2 <_malloc_r+0x22>
 800a9ca:	230c      	movs	r3, #12
 800a9cc:	6033      	str	r3, [r6, #0]
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d2:	f000 f87d 	bl	800aad0 <__malloc_lock>
 800a9d6:	4921      	ldr	r1, [pc, #132]	; (800aa5c <_malloc_r+0xac>)
 800a9d8:	680a      	ldr	r2, [r1, #0]
 800a9da:	4614      	mov	r4, r2
 800a9dc:	b99c      	cbnz	r4, 800aa06 <_malloc_r+0x56>
 800a9de:	4f20      	ldr	r7, [pc, #128]	; (800aa60 <_malloc_r+0xb0>)
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	b923      	cbnz	r3, 800a9ee <_malloc_r+0x3e>
 800a9e4:	4621      	mov	r1, r4
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f000 f862 	bl	800aab0 <_sbrk_r>
 800a9ec:	6038      	str	r0, [r7, #0]
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	f000 f85d 	bl	800aab0 <_sbrk_r>
 800a9f6:	1c43      	adds	r3, r0, #1
 800a9f8:	d123      	bne.n	800aa42 <_malloc_r+0x92>
 800a9fa:	230c      	movs	r3, #12
 800a9fc:	6033      	str	r3, [r6, #0]
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f000 f86c 	bl	800aadc <__malloc_unlock>
 800aa04:	e7e3      	b.n	800a9ce <_malloc_r+0x1e>
 800aa06:	6823      	ldr	r3, [r4, #0]
 800aa08:	1b5b      	subs	r3, r3, r5
 800aa0a:	d417      	bmi.n	800aa3c <_malloc_r+0x8c>
 800aa0c:	2b0b      	cmp	r3, #11
 800aa0e:	d903      	bls.n	800aa18 <_malloc_r+0x68>
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	441c      	add	r4, r3
 800aa14:	6025      	str	r5, [r4, #0]
 800aa16:	e004      	b.n	800aa22 <_malloc_r+0x72>
 800aa18:	6863      	ldr	r3, [r4, #4]
 800aa1a:	42a2      	cmp	r2, r4
 800aa1c:	bf0c      	ite	eq
 800aa1e:	600b      	streq	r3, [r1, #0]
 800aa20:	6053      	strne	r3, [r2, #4]
 800aa22:	4630      	mov	r0, r6
 800aa24:	f000 f85a 	bl	800aadc <__malloc_unlock>
 800aa28:	f104 000b 	add.w	r0, r4, #11
 800aa2c:	1d23      	adds	r3, r4, #4
 800aa2e:	f020 0007 	bic.w	r0, r0, #7
 800aa32:	1ac2      	subs	r2, r0, r3
 800aa34:	d0cc      	beq.n	800a9d0 <_malloc_r+0x20>
 800aa36:	1a1b      	subs	r3, r3, r0
 800aa38:	50a3      	str	r3, [r4, r2]
 800aa3a:	e7c9      	b.n	800a9d0 <_malloc_r+0x20>
 800aa3c:	4622      	mov	r2, r4
 800aa3e:	6864      	ldr	r4, [r4, #4]
 800aa40:	e7cc      	b.n	800a9dc <_malloc_r+0x2c>
 800aa42:	1cc4      	adds	r4, r0, #3
 800aa44:	f024 0403 	bic.w	r4, r4, #3
 800aa48:	42a0      	cmp	r0, r4
 800aa4a:	d0e3      	beq.n	800aa14 <_malloc_r+0x64>
 800aa4c:	1a21      	subs	r1, r4, r0
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f000 f82e 	bl	800aab0 <_sbrk_r>
 800aa54:	3001      	adds	r0, #1
 800aa56:	d1dd      	bne.n	800aa14 <_malloc_r+0x64>
 800aa58:	e7cf      	b.n	800a9fa <_malloc_r+0x4a>
 800aa5a:	bf00      	nop
 800aa5c:	200000d8 	.word	0x200000d8
 800aa60:	200000dc 	.word	0x200000dc

0800aa64 <_realloc_r>:
 800aa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa66:	4607      	mov	r7, r0
 800aa68:	4614      	mov	r4, r2
 800aa6a:	460e      	mov	r6, r1
 800aa6c:	b921      	cbnz	r1, 800aa78 <_realloc_r+0x14>
 800aa6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa72:	4611      	mov	r1, r2
 800aa74:	f7ff bf9c 	b.w	800a9b0 <_malloc_r>
 800aa78:	b922      	cbnz	r2, 800aa84 <_realloc_r+0x20>
 800aa7a:	f7ff ff49 	bl	800a910 <_free_r>
 800aa7e:	4625      	mov	r5, r4
 800aa80:	4628      	mov	r0, r5
 800aa82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa84:	f000 f830 	bl	800aae8 <_malloc_usable_size_r>
 800aa88:	42a0      	cmp	r0, r4
 800aa8a:	d20f      	bcs.n	800aaac <_realloc_r+0x48>
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	4638      	mov	r0, r7
 800aa90:	f7ff ff8e 	bl	800a9b0 <_malloc_r>
 800aa94:	4605      	mov	r5, r0
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d0f2      	beq.n	800aa80 <_realloc_r+0x1c>
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	4622      	mov	r2, r4
 800aa9e:	f7ff ff0f 	bl	800a8c0 <memcpy>
 800aaa2:	4631      	mov	r1, r6
 800aaa4:	4638      	mov	r0, r7
 800aaa6:	f7ff ff33 	bl	800a910 <_free_r>
 800aaaa:	e7e9      	b.n	800aa80 <_realloc_r+0x1c>
 800aaac:	4635      	mov	r5, r6
 800aaae:	e7e7      	b.n	800aa80 <_realloc_r+0x1c>

0800aab0 <_sbrk_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4d06      	ldr	r5, [pc, #24]	; (800aacc <_sbrk_r+0x1c>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	4604      	mov	r4, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	602b      	str	r3, [r5, #0]
 800aabc:	f7f9 f866 	bl	8003b8c <_sbrk>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_sbrk_r+0x1a>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_sbrk_r+0x1a>
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	200004cc 	.word	0x200004cc

0800aad0 <__malloc_lock>:
 800aad0:	4801      	ldr	r0, [pc, #4]	; (800aad8 <__malloc_lock+0x8>)
 800aad2:	f000 b811 	b.w	800aaf8 <__retarget_lock_acquire_recursive>
 800aad6:	bf00      	nop
 800aad8:	200004d4 	.word	0x200004d4

0800aadc <__malloc_unlock>:
 800aadc:	4801      	ldr	r0, [pc, #4]	; (800aae4 <__malloc_unlock+0x8>)
 800aade:	f000 b80c 	b.w	800aafa <__retarget_lock_release_recursive>
 800aae2:	bf00      	nop
 800aae4:	200004d4 	.word	0x200004d4

0800aae8 <_malloc_usable_size_r>:
 800aae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaec:	1f18      	subs	r0, r3, #4
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	bfbc      	itt	lt
 800aaf2:	580b      	ldrlt	r3, [r1, r0]
 800aaf4:	18c0      	addlt	r0, r0, r3
 800aaf6:	4770      	bx	lr

0800aaf8 <__retarget_lock_acquire_recursive>:
 800aaf8:	4770      	bx	lr

0800aafa <__retarget_lock_release_recursive>:
 800aafa:	4770      	bx	lr

0800aafc <_init>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	bf00      	nop
 800ab00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab02:	bc08      	pop	{r3}
 800ab04:	469e      	mov	lr, r3
 800ab06:	4770      	bx	lr

0800ab08 <_fini>:
 800ab08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0a:	bf00      	nop
 800ab0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab0e:	bc08      	pop	{r3}
 800ab10:	469e      	mov	lr, r3
 800ab12:	4770      	bx	lr
