
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000719c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003070  08007324  08007324  00017324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a394  0800a394  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800a394  0800a394  0001a394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a39c  0800a39c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a39c  0800a39c  0001a39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3a0  0800a3a0  0001a3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800a3a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000248  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001be37  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ae2  00000000  00000000  0003be7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0003f968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  00040ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024328  00000000  00000000  00042258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be7a  00000000  00000000  00066580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3241  00000000  00000000  000823fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015563b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005790  00000000  00000000  00155690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800730c 	.word	0x0800730c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	0800730c 	.word	0x0800730c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <button_init+0x14>)
 80004da:	f002 fe69 	bl	80031b0 <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <button_Scan>:

void button_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <button_Scan+0xc8>)
 80004f4:	f002 fe5c 	bl	80031b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <button_Scan+0xc8>)
 80004fe:	f002 fe57 	bl	80031b0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000502:	230a      	movs	r3, #10
 8000504:	2202      	movs	r2, #2
 8000506:	492b      	ldr	r1, [pc, #172]	; (80005b4 <button_Scan+0xcc>)
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <button_Scan+0xd0>)
 800050a:	f004 fd92 	bl	8005032 <HAL_SPI_Receive>
	  int button_index = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000516:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e03f      	b.n	800059e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db06      	blt.n	8000532 <button_Scan+0x4a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc03      	bgt.n	8000532 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e018      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd07      	ble.n	8000548 <button_Scan+0x60>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc04      	bgt.n	8000548 <button_Scan+0x60>
			  button_index = 7 - i;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e00d      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	dd06      	ble.n	800055c <button_Scan+0x74>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0b      	cmp	r3, #11
 8000552:	dc03      	bgt.n	800055c <button_Scan+0x74>
			  button_index = i + 4;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e003      	b.n	8000564 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1c3 0317 	rsb	r3, r3, #23
 8000562:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <button_Scan+0xcc>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	4013      	ands	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <button_Scan+0x96>
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2100      	movs	r1, #0
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057c:	e009      	b.n	8000592 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	3301      	adds	r3, #1
 8000588:	b299      	uxth	r1, r3
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <button_Scan+0xd4>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000592:	897b      	ldrh	r3, [r7, #10]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddbc      	ble.n	800051e <button_Scan+0x36>
	  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	20000034 	.word	0x20000034
 80005b8:	20000178 	.word	0x20000178
 80005bc:	2000005c 	.word	0x2000005c

080005c0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005c4:	201e      	movs	r0, #30
 80005c6:	f002 f9cf 	bl	8002968 <DEC2BCD>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <ds3231_init+0x80>)
 80005d0:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005d2:	2016      	movs	r0, #22
 80005d4:	f002 f9c8 	bl	8002968 <DEC2BCD>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <ds3231_init+0x80>)
 80005de:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005e0:	2015      	movs	r0, #21
 80005e2:	f002 f9c1 	bl	8002968 <DEC2BCD>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <ds3231_init+0x80>)
 80005ec:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005ee:	2006      	movs	r0, #6
 80005f0:	f002 f9ba 	bl	8002968 <DEC2BCD>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <ds3231_init+0x80>)
 80005fa:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005fc:	200f      	movs	r0, #15
 80005fe:	f002 f9b3 	bl	8002968 <DEC2BCD>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <ds3231_init+0x80>)
 8000608:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800060a:	2009      	movs	r0, #9
 800060c:	f002 f9ac 	bl	8002968 <DEC2BCD>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <ds3231_init+0x80>)
 8000616:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000618:	2017      	movs	r0, #23
 800061a:	f002 f9a5 	bl	8002968 <DEC2BCD>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <ds3231_init+0x80>)
 8000624:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000626:	2332      	movs	r3, #50	; 0x32
 8000628:	2203      	movs	r2, #3
 800062a:	21d0      	movs	r1, #208	; 0xd0
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <ds3231_init+0x84>)
 800062e:	f003 fa3d 	bl	8003aac <HAL_I2C_IsDeviceReady>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d000      	beq.n	800063a <ds3231_init+0x7a>
		while(1);
 8000638:	e7fe      	b.n	8000638 <ds3231_init+0x78>
	};
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000084 	.word	0x20000084
 8000644:	200000dc 	.word	0x200000dc

08000648 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af04      	add	r7, sp, #16
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	4618      	mov	r0, r3
 800065c:	f002 f984 	bl	8002968 <DEC2BCD>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	b29a      	uxth	r2, r3
 8000668:	230a      	movs	r3, #10
 800066a:	9302      	str	r3, [sp, #8]
 800066c:	2301      	movs	r3, #1
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	f107 030f 	add.w	r3, r7, #15
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	21d0      	movs	r1, #208	; 0xd0
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <ds3231_Write+0x40>)
 800067c:	f002 fef6 	bl	800346c <HAL_I2C_Mem_Write>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000dc 	.word	0x200000dc

0800068c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000692:	230a      	movs	r3, #10
 8000694:	9302      	str	r3, [sp, #8]
 8000696:	2307      	movs	r3, #7
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <ds3231_ReadTime+0xa4>)
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2301      	movs	r3, #1
 80006a0:	2200      	movs	r2, #0
 80006a2:	21d0      	movs	r1, #208	; 0xd0
 80006a4:	4823      	ldr	r0, [pc, #140]	; (8000734 <ds3231_ReadTime+0xa8>)
 80006a6:	f002 ffdb 	bl	8003660 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 f940 	bl	8002934 <BCD2DEC>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <ds3231_ReadTime+0xac>)
 80006ba:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 f937 	bl	8002934 <BCD2DEC>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <ds3231_ReadTime+0xb0>)
 80006cc:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 f92e 	bl	8002934 <BCD2DEC>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <ds3231_ReadTime+0xb4>)
 80006de:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006e2:	78db      	ldrb	r3, [r3, #3]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f925 	bl	8002934 <BCD2DEC>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <ds3231_ReadTime+0xb8>)
 80006f0:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 f91c 	bl	8002934 <BCD2DEC>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <ds3231_ReadTime+0xbc>)
 8000702:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <ds3231_ReadTime+0xa4>)
 8000706:	795b      	ldrb	r3, [r3, #5]
 8000708:	4618      	mov	r0, r3
 800070a:	f002 f913 	bl	8002934 <BCD2DEC>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <ds3231_ReadTime+0xc0>)
 8000714:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <ds3231_ReadTime+0xa4>)
 8000718:	799b      	ldrb	r3, [r3, #6]
 800071a:	4618      	mov	r0, r3
 800071c:	f002 f90a 	bl	8002934 <BCD2DEC>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <ds3231_ReadTime+0xc4>)
 8000726:	701a      	strb	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000084 	.word	0x20000084
 8000734:	200000dc 	.word	0x200000dc
 8000738:	2000007c 	.word	0x2000007c
 800073c:	2000007e 	.word	0x2000007e
 8000740:	20000081 	.word	0x20000081
 8000744:	20000080 	.word	0x20000080
 8000748:	2000007f 	.word	0x2000007f
 800074c:	20000082 	.word	0x20000082
 8000750:	2000007d 	.word	0x2000007d

08000754 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
 800076a:	615a      	str	r2, [r3, #20]
 800076c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
 800077e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000780:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <MX_FSMC_Init+0xec>)
 8000782:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000786:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000788:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <MX_FSMC_Init+0xec>)
 800078a:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <MX_FSMC_Init+0xf0>)
 800078c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800078e:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <MX_FSMC_Init+0xec>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000794:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <MX_FSMC_Init+0xec>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <MX_FSMC_Init+0xec>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_FSMC_Init+0xec>)
 80007a2:	2210      	movs	r2, #16
 80007a4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_FSMC_Init+0xec>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_FSMC_Init+0xec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_FSMC_Init+0xec>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_FSMC_Init+0xec>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_FSMC_Init+0xec>)
 80007c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_FSMC_Init+0xec>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_FSMC_Init+0xec>)
 80007ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_FSMC_Init+0xec>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_FSMC_Init+0xec>)
 80007dc:	2200      	movs	r2, #0
 80007de:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_FSMC_Init+0xec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007e6:	230f      	movs	r3, #15
 80007e8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007ea:	230f      	movs	r3, #15
 80007ec:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007ee:	233c      	movs	r3, #60	; 0x3c
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007f6:	2310      	movs	r3, #16
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007fa:	2311      	movs	r3, #17
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007fe:	2300      	movs	r3, #0
 8000800:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000802:	2308      	movs	r3, #8
 8000804:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000806:	230f      	movs	r3, #15
 8000808:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800080a:	2309      	movs	r3, #9
 800080c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000812:	2310      	movs	r3, #16
 8000814:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000816:	2311      	movs	r3, #17
 8000818:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800081e:	463a      	mov	r2, r7
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_FSMC_Init+0xec>)
 8000828:	f004 ffe6 	bl	80057f8 <HAL_SRAM_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000832:	f001 fde5 	bl	8002400 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000836:	bf00      	nop
 8000838:	3738      	adds	r7, #56	; 0x38
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000008c 	.word	0x2000008c
 8000844:	a0000104 	.word	0xa0000104

08000848 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_FSMC_MspInit+0x88>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d131      	bne.n	80008c8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_FSMC_MspInit+0x88>)
 8000866:	2201      	movs	r2, #1
 8000868:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <HAL_FSMC_MspInit+0x8c>)
 8000870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <HAL_FSMC_MspInit+0x8c>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6393      	str	r3, [r2, #56]	; 0x38
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <HAL_FSMC_MspInit+0x8c>)
 800087c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000886:	f64f 7388 	movw	r3, #65416	; 0xff88
 800088a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000898:	230c      	movs	r3, #12
 800089a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <HAL_FSMC_MspInit+0x90>)
 80008a2:	f002 fae9 	bl	8002e78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80008a6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80008aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008b8:	230c      	movs	r3, #12
 80008ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <HAL_FSMC_MspInit+0x94>)
 80008c2:	f002 fad9 	bl	8002e78 <HAL_GPIO_Init>
 80008c6:	e000      	b.n	80008ca <HAL_FSMC_MspInit+0x82>
    return;
 80008c8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000038 	.word	0x20000038
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40020c00 	.word	0x40020c00

080008e0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008e8:	f7ff ffae 	bl	8000848 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	4b6f      	ldr	r3, [pc, #444]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a6e      	ldr	r2, [pc, #440]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b6c      	ldr	r3, [pc, #432]	; (8000acc <MX_GPIO_Init+0x1d8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0310 	and.w	r3, r3, #16
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	4b68      	ldr	r3, [pc, #416]	; (8000acc <MX_GPIO_Init+0x1d8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a67      	ldr	r2, [pc, #412]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b65      	ldr	r3, [pc, #404]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b61      	ldr	r3, [pc, #388]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a60      	ldr	r2, [pc, #384]	; (8000acc <MX_GPIO_Init+0x1d8>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b5e      	ldr	r3, [pc, #376]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b5a      	ldr	r3, [pc, #360]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a59      	ldr	r2, [pc, #356]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b57      	ldr	r3, [pc, #348]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	4b53      	ldr	r3, [pc, #332]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a52      	ldr	r2, [pc, #328]	; (8000acc <MX_GPIO_Init+0x1d8>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b50      	ldr	r3, [pc, #320]	; (8000acc <MX_GPIO_Init+0x1d8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b4c      	ldr	r3, [pc, #304]	; (8000acc <MX_GPIO_Init+0x1d8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a4b      	ldr	r2, [pc, #300]	; (8000acc <MX_GPIO_Init+0x1d8>)
 80009a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b49      	ldr	r3, [pc, #292]	; (8000acc <MX_GPIO_Init+0x1d8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b45      	ldr	r3, [pc, #276]	; (8000acc <MX_GPIO_Init+0x1d8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a44      	ldr	r2, [pc, #272]	; (8000acc <MX_GPIO_Init+0x1d8>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b42      	ldr	r3, [pc, #264]	; (8000acc <MX_GPIO_Init+0x1d8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2170      	movs	r1, #112	; 0x70
 80009d2:	483f      	ldr	r0, [pc, #252]	; (8000ad0 <MX_GPIO_Init+0x1dc>)
 80009d4:	f002 fbec 	bl	80031b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009de:	483d      	ldr	r0, [pc, #244]	; (8000ad4 <MX_GPIO_Init+0x1e0>)
 80009e0:	f002 fbe6 	bl	80031b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2140      	movs	r1, #64	; 0x40
 80009e8:	483b      	ldr	r0, [pc, #236]	; (8000ad8 <MX_GPIO_Init+0x1e4>)
 80009ea:	f002 fbe1 	bl	80031b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	4839      	ldr	r0, [pc, #228]	; (8000adc <MX_GPIO_Init+0x1e8>)
 80009f6:	f002 fbdb 	bl	80031b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2108      	movs	r1, #8
 80009fe:	4838      	ldr	r0, [pc, #224]	; (8000ae0 <MX_GPIO_Init+0x1ec>)
 8000a00:	f002 fbd6 	bl	80031b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a04:	2370      	movs	r3, #112	; 0x70
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	482d      	ldr	r0, [pc, #180]	; (8000ad0 <MX_GPIO_Init+0x1dc>)
 8000a1c:	f002 fa2c 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4826      	ldr	r0, [pc, #152]	; (8000ad4 <MX_GPIO_Init+0x1e0>)
 8000a3a:	f002 fa1d 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a3e:	23c0      	movs	r3, #192	; 0xc0
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4822      	ldr	r0, [pc, #136]	; (8000adc <MX_GPIO_Init+0x1e8>)
 8000a52:	f002 fa11 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a56:	2330      	movs	r3, #48	; 0x30
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	481a      	ldr	r0, [pc, #104]	; (8000ad4 <MX_GPIO_Init+0x1e0>)
 8000a6a:	f002 fa05 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a6e:	2340      	movs	r3, #64	; 0x40
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <MX_GPIO_Init+0x1e4>)
 8000a86:	f002 f9f7 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480e      	ldr	r0, [pc, #56]	; (8000adc <MX_GPIO_Init+0x1e8>)
 8000aa4:	f002 f9e8 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <MX_GPIO_Init+0x1ec>)
 8000ac0:	f002 f9da 	bl	8002e78 <HAL_GPIO_Init>

}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	; 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40021800 	.word	0x40021800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020c00 	.word	0x40020c00

08000ae4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000aea:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_I2C1_Init+0x58>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b22:	f002 fb5f 	bl	80031e4 <HAL_I2C_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b2c:	f001 fc68 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000dc 	.word	0x200000dc
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	000186a0 	.word	0x000186a0

08000b40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_I2C_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12b      	bne.n	8000bba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b7e:	23c0      	movs	r3, #192	; 0xc0
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b82:	2312      	movs	r3, #18
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_I2C_MspInit+0x8c>)
 8000b9a:	f002 f96d 	bl	8002e78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <LCD_WR_REG+0x1c>)
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	8013      	strh	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	600ffffe 	.word	0x600ffffe

08000bf0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <LCD_WR_DATA+0x1c>)
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	8053      	strh	r3, [r2, #2]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	600ffffe 	.word	0x600ffffe

08000c10 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <LCD_RD_DATA+0x20>)
 8000c18:	885b      	ldrh	r3, [r3, #2]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	b29b      	uxth	r3, r3
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	600ffffe 	.word	0x600ffffe

08000c34 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	4611      	mov	r1, r2
 8000c40:	461a      	mov	r2, r3
 8000c42:	4623      	mov	r3, r4
 8000c44:	80fb      	strh	r3, [r7, #6]
 8000c46:	4603      	mov	r3, r0
 8000c48:	80bb      	strh	r3, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	807b      	strh	r3, [r7, #2]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c52:	202a      	movs	r0, #42	; 0x2a
 8000c54:	f7ff ffbc 	bl	8000bd0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	0a1b      	lsrs	r3, r3, #8
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ffc6 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ffc0 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c70:	887b      	ldrh	r3, [r7, #2]
 8000c72:	0a1b      	lsrs	r3, r3, #8
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ffba 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ffb4 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000c88:	202b      	movs	r0, #43	; 0x2b
 8000c8a:	f7ff ffa1 	bl	8000bd0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ffab 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000c9a:	88bb      	ldrh	r3, [r7, #4]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ffa5 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000ca6:	883b      	ldrh	r3, [r7, #0]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff9f 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000cb2:	883b      	ldrh	r3, [r7, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff99 	bl	8000bf0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cbe:	202c      	movs	r0, #44	; 0x2c
 8000cc0:	f7ff ff86 	bl	8000bd0 <LCD_WR_REG>
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd90      	pop	{r4, r7, pc}

08000ccc <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <lcd_Clear+0x70>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <lcd_Clear+0x70>)
 8000cf0:	885b      	ldrh	r3, [r3, #2]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff ff9b 	bl	8000c34 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	81fb      	strh	r3, [r7, #14]
 8000d02:	e011      	b.n	8000d28 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	81bb      	strh	r3, [r7, #12]
 8000d08:	e006      	b.n	8000d18 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff6f 	bl	8000bf0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d12:	89bb      	ldrh	r3, [r7, #12]
 8000d14:	3301      	adds	r3, #1
 8000d16:	81bb      	strh	r3, [r7, #12]
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <lcd_Clear+0x70>)
 8000d1a:	885b      	ldrh	r3, [r3, #2]
 8000d1c:	89ba      	ldrh	r2, [r7, #12]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3f3      	bcc.n	8000d0a <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	3301      	adds	r3, #1
 8000d26:	81fb      	strh	r3, [r7, #14]
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <lcd_Clear+0x70>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	89fa      	ldrh	r2, [r7, #14]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d3e8      	bcc.n	8000d04 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000130 	.word	0x20000130

08000d40 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4604      	mov	r4, r0
 8000d48:	4608      	mov	r0, r1
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4623      	mov	r3, r4
 8000d50:	80fb      	strh	r3, [r7, #6]
 8000d52:	4603      	mov	r3, r0
 8000d54:	80bb      	strh	r3, [r7, #4]
 8000d56:	460b      	mov	r3, r1
 8000d58:	807b      	strh	r3, [r7, #2]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000d5e:	887b      	ldrh	r3, [r7, #2]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	883b      	ldrh	r3, [r7, #0]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	88b9      	ldrh	r1, [r7, #4]
 8000d6c:	88f8      	ldrh	r0, [r7, #6]
 8000d6e:	f7ff ff61 	bl	8000c34 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	81fb      	strh	r3, [r7, #14]
 8000d76:	e010      	b.n	8000d9a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	81bb      	strh	r3, [r7, #12]
 8000d7c:	e006      	b.n	8000d8c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000d7e:	8c3b      	ldrh	r3, [r7, #32]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff35 	bl	8000bf0 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000d86:	89bb      	ldrh	r3, [r7, #12]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	81bb      	strh	r3, [r7, #12]
 8000d8c:	89ba      	ldrh	r2, [r7, #12]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d3f4      	bcc.n	8000d7e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000d94:	89fb      	ldrh	r3, [r7, #14]
 8000d96:	3301      	adds	r3, #1
 8000d98:	81fb      	strh	r3, [r7, #14]
 8000d9a:	89fa      	ldrh	r2, [r7, #14]
 8000d9c:	883b      	ldrh	r3, [r7, #0]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d3ea      	bcc.n	8000d78 <lcd_Fill+0x38>
		}
	}
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd90      	pop	{r4, r7, pc}

08000dac <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
 8000db6:	460b      	mov	r3, r1
 8000db8:	80bb      	strh	r3, [r7, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	88fa      	ldrh	r2, [r7, #6]
 8000dc2:	88b9      	ldrh	r1, [r7, #4]
 8000dc4:	88f8      	ldrh	r0, [r7, #6]
 8000dc6:	f7ff ff35 	bl	8000c34 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff0f 	bl	8000bf0 <LCD_WR_DATA>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4604      	mov	r4, r0
 8000de4:	4608      	mov	r0, r1
 8000de6:	4611      	mov	r1, r2
 8000de8:	461a      	mov	r2, r3
 8000dea:	4623      	mov	r3, r4
 8000dec:	80fb      	strh	r3, [r7, #6]
 8000dee:	4603      	mov	r3, r0
 8000df0:	80bb      	strh	r3, [r7, #4]
 8000df2:	460b      	mov	r3, r1
 8000df4:	70fb      	strb	r3, [r7, #3]
 8000df6:	4613      	mov	r3, r2
 8000df8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e06:	085b      	lsrs	r3, r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	461a      	mov	r2, r3
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	bf14      	ite	ne
 8000e1e:	2301      	movne	r3, #1
 8000e20:	2300      	moveq	r3, #0
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	fb12 f303 	smulbb	r3, r2, r3
 8000e32:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	3b20      	subs	r3, #32
 8000e38:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4413      	add	r3, r2
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3b01      	subs	r3, #1
 8000e46:	b29c      	uxth	r4, r3
 8000e48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	3b01      	subs	r3, #1
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	88b9      	ldrh	r1, [r7, #4]
 8000e5a:	88f8      	ldrh	r0, [r7, #6]
 8000e5c:	4622      	mov	r2, r4
 8000e5e:	f7ff fee9 	bl	8000c34 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	827b      	strh	r3, [r7, #18]
 8000e66:	e07a      	b.n	8000f5e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000e68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e6c:	2b0c      	cmp	r3, #12
 8000e6e:	d028      	beq.n	8000ec2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000e70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e74:	2b10      	cmp	r3, #16
 8000e76:	d108      	bne.n	8000e8a <lcd_ShowChar+0xae>
 8000e78:	78fa      	ldrb	r2, [r7, #3]
 8000e7a:	8a7b      	ldrh	r3, [r7, #18]
 8000e7c:	493c      	ldr	r1, [pc, #240]	; (8000f70 <lcd_ShowChar+0x194>)
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	440a      	add	r2, r1
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	75fb      	strb	r3, [r7, #23]
 8000e88:	e01b      	b.n	8000ec2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000e8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e8e:	2b18      	cmp	r3, #24
 8000e90:	d10b      	bne.n	8000eaa <lcd_ShowChar+0xce>
 8000e92:	78fa      	ldrb	r2, [r7, #3]
 8000e94:	8a79      	ldrh	r1, [r7, #18]
 8000e96:	4837      	ldr	r0, [pc, #220]	; (8000f74 <lcd_ShowChar+0x198>)
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	4403      	add	r3, r0
 8000ea2:	440b      	add	r3, r1
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	75fb      	strb	r3, [r7, #23]
 8000ea8:	e00b      	b.n	8000ec2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000eaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eae:	2b20      	cmp	r3, #32
 8000eb0:	d15a      	bne.n	8000f68 <lcd_ShowChar+0x18c>
 8000eb2:	78fa      	ldrb	r2, [r7, #3]
 8000eb4:	8a7b      	ldrh	r3, [r7, #18]
 8000eb6:	4930      	ldr	r1, [pc, #192]	; (8000f78 <lcd_ShowChar+0x19c>)
 8000eb8:	0192      	lsls	r2, r2, #6
 8000eba:	440a      	add	r2, r1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	75bb      	strb	r3, [r7, #22]
 8000ec6:	e044      	b.n	8000f52 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000ec8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d120      	bne.n	8000f12 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000ed0:	7dfa      	ldrb	r2, [r7, #23]
 8000ed2:	7dbb      	ldrb	r3, [r7, #22]
 8000ed4:	fa42 f303 	asr.w	r3, r2, r3
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d004      	beq.n	8000eea <lcd_ShowChar+0x10e>
 8000ee0:	883b      	ldrh	r3, [r7, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fe84 	bl	8000bf0 <LCD_WR_DATA>
 8000ee8:	e003      	b.n	8000ef2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000eea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fe7f 	bl	8000bf0 <LCD_WR_DATA>
				m++;
 8000ef2:	7d7b      	ldrb	r3, [r7, #21]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000ef8:	7d7b      	ldrb	r3, [r7, #21]
 8000efa:	7bfa      	ldrb	r2, [r7, #15]
 8000efc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f00:	fb02 f201 	mul.w	r2, r2, r1
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d11f      	bne.n	8000f4c <lcd_ShowChar+0x170>
				{
					m=0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	757b      	strb	r3, [r7, #21]
					break;
 8000f10:	e022      	b.n	8000f58 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000f12:	7dfa      	ldrb	r2, [r7, #23]
 8000f14:	7dbb      	ldrb	r3, [r7, #22]
 8000f16:	fa42 f303 	asr.w	r3, r2, r3
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <lcd_ShowChar+0x152>
 8000f22:	883a      	ldrh	r2, [r7, #0]
 8000f24:	88b9      	ldrh	r1, [r7, #4]
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff3f 	bl	8000dac <lcd_DrawPoint>
				x++;
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	3301      	adds	r3, #1
 8000f32:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f34:	88fa      	ldrh	r2, [r7, #6]
 8000f36:	8a3b      	ldrh	r3, [r7, #16]
 8000f38:	1ad2      	subs	r2, r2, r3
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d105      	bne.n	8000f4c <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f40:	8a3b      	ldrh	r3, [r7, #16]
 8000f42:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f44:	88bb      	ldrh	r3, [r7, #4]
 8000f46:	3301      	adds	r3, #1
 8000f48:	80bb      	strh	r3, [r7, #4]
					break;
 8000f4a:	e005      	b.n	8000f58 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f4c:	7dbb      	ldrb	r3, [r7, #22]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	75bb      	strb	r3, [r7, #22]
 8000f52:	7dbb      	ldrb	r3, [r7, #22]
 8000f54:	2b07      	cmp	r3, #7
 8000f56:	d9b7      	bls.n	8000ec8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f58:	8a7b      	ldrh	r3, [r7, #18]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	827b      	strh	r3, [r7, #18]
 8000f5e:	8a7a      	ldrh	r2, [r7, #18]
 8000f60:	89bb      	ldrh	r3, [r7, #12]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d380      	bcc.n	8000e68 <lcd_ShowChar+0x8c>
 8000f66:	e000      	b.n	8000f6a <lcd_ShowChar+0x18e>
		else return;
 8000f68:	bf00      	nop
				}
			}
		}
	}
}
 8000f6a:	371c      	adds	r7, #28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	080073fc 	.word	0x080073fc
 8000f74:	080079ec 	.word	0x080079ec
 8000f78:	08008bbc 	.word	0x08008bbc

08000f7c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000f90:	e004      	b.n	8000f9c <mypow+0x20>
 8000f92:	79fa      	ldrb	r2, [r7, #7]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	fb02 f303 	mul.w	r3, r2, r3
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	79bb      	ldrb	r3, [r7, #6]
 8000f9e:	1e5a      	subs	r2, r3, #1
 8000fa0:	71ba      	strb	r2, [r7, #6]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f5      	bne.n	8000f92 <mypow+0x16>
	return result;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	80fb      	strh	r3, [r7, #6]
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80bb      	strh	r3, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	807b      	strh	r3, [r7, #2]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000fd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fda:	085b      	lsrs	r3, r3, #1
 8000fdc:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e059      	b.n	8001098 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000fe4:	887c      	ldrh	r4, [r7, #2]
 8000fe6:	787a      	ldrb	r2, [r7, #1]
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	200a      	movs	r0, #10
 8000ff6:	f7ff ffc1 	bl	8000f7c <mypow>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	fbb4 f1f3 	udiv	r1, r4, r3
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <lcd_ShowIntNum+0xf8>)
 8001002:	fba3 2301 	umull	r2, r3, r3, r1
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	1aca      	subs	r2, r1, r3
 8001012:	4613      	mov	r3, r2
 8001014:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001016:	7bbb      	ldrb	r3, [r7, #14]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d121      	bne.n	8001060 <lcd_ShowIntNum+0xac>
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	787b      	ldrb	r3, [r7, #1]
 8001020:	3b01      	subs	r3, #1
 8001022:	429a      	cmp	r2, r3
 8001024:	da1c      	bge.n	8001060 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001026:	7b3b      	ldrb	r3, [r7, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d117      	bne.n	800105c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	b29a      	uxth	r2, r3
 8001030:	7b7b      	ldrb	r3, [r7, #13]
 8001032:	b29b      	uxth	r3, r3
 8001034:	fb12 f303 	smulbb	r3, r2, r3
 8001038:	b29a      	uxth	r2, r3
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	4413      	add	r3, r2
 800103e:	b298      	uxth	r0, r3
 8001040:	8c3a      	ldrh	r2, [r7, #32]
 8001042:	88b9      	ldrh	r1, [r7, #4]
 8001044:	2300      	movs	r3, #0
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4613      	mov	r3, r2
 8001054:	2220      	movs	r2, #32
 8001056:	f7ff fec1 	bl	8000ddc <lcd_ShowChar>
				continue;
 800105a:	e01a      	b.n	8001092 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 800105c:	2301      	movs	r3, #1
 800105e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	b29a      	uxth	r2, r3
 8001064:	7b7b      	ldrb	r3, [r7, #13]
 8001066:	b29b      	uxth	r3, r3
 8001068:	fb12 f303 	smulbb	r3, r2, r3
 800106c:	b29a      	uxth	r2, r3
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	4413      	add	r3, r2
 8001072:	b298      	uxth	r0, r3
 8001074:	7b3b      	ldrb	r3, [r7, #12]
 8001076:	3330      	adds	r3, #48	; 0x30
 8001078:	b2da      	uxtb	r2, r3
 800107a:	8c3c      	ldrh	r4, [r7, #32]
 800107c:	88b9      	ldrh	r1, [r7, #4]
 800107e:	2300      	movs	r3, #0
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	4623      	mov	r3, r4
 800108e:	f7ff fea5 	bl	8000ddc <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	3301      	adds	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	787b      	ldrb	r3, [r7, #1]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3a1      	bcc.n	8000fe4 <lcd_ShowIntNum+0x30>
	}
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	cccccccd 	.word	0xcccccccd

080010b0 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <lcd_SetDir+0x44>)
 80010cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010d0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <lcd_SetDir+0x44>)
 80010d4:	22f0      	movs	r2, #240	; 0xf0
 80010d6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80010d8:	e006      	b.n	80010e8 <lcd_SetDir+0x38>
		lcddev.width=240;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <lcd_SetDir+0x44>)
 80010dc:	22f0      	movs	r2, #240	; 0xf0
 80010de:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <lcd_SetDir+0x44>)
 80010e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010e6:	805a      	strh	r2, [r3, #2]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	20000130 	.word	0x20000130

080010f8 <lcd_init>:


void lcd_init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001102:	48aa      	ldr	r0, [pc, #680]	; (80013ac <lcd_init+0x2b4>)
 8001104:	f002 f854 	bl	80031b0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800110c:	f001 fcec 	bl	8002ae8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001116:	48a5      	ldr	r0, [pc, #660]	; (80013ac <lcd_init+0x2b4>)
 8001118:	f002 f84a 	bl	80031b0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800111c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001120:	f001 fce2 	bl	8002ae8 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff ffc3 	bl	80010b0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800112a:	20d3      	movs	r0, #211	; 0xd3
 800112c:	f7ff fd50 	bl	8000bd0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001130:	f7ff fd6e 	bl	8000c10 <LCD_RD_DATA>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b9d      	ldr	r3, [pc, #628]	; (80013b0 <lcd_init+0x2b8>)
 800113a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800113c:	f7ff fd68 	bl	8000c10 <LCD_RD_DATA>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b9a      	ldr	r3, [pc, #616]	; (80013b0 <lcd_init+0x2b8>)
 8001146:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001148:	f7ff fd62 	bl	8000c10 <LCD_RD_DATA>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b97      	ldr	r3, [pc, #604]	; (80013b0 <lcd_init+0x2b8>)
 8001152:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001154:	4b96      	ldr	r3, [pc, #600]	; (80013b0 <lcd_init+0x2b8>)
 8001156:	889b      	ldrh	r3, [r3, #4]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b94      	ldr	r3, [pc, #592]	; (80013b0 <lcd_init+0x2b8>)
 800115e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001160:	f7ff fd56 	bl	8000c10 <LCD_RD_DATA>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b91      	ldr	r3, [pc, #580]	; (80013b0 <lcd_init+0x2b8>)
 800116a:	889b      	ldrh	r3, [r3, #4]
 800116c:	4313      	orrs	r3, r2
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b8f      	ldr	r3, [pc, #572]	; (80013b0 <lcd_init+0x2b8>)
 8001172:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001174:	20cf      	movs	r0, #207	; 0xcf
 8001176:	f7ff fd2b 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff fd38 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001180:	20c1      	movs	r0, #193	; 0xc1
 8001182:	f7ff fd35 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001186:	2030      	movs	r0, #48	; 0x30
 8001188:	f7ff fd32 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800118c:	20ed      	movs	r0, #237	; 0xed
 800118e:	f7ff fd1f 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001192:	2064      	movs	r0, #100	; 0x64
 8001194:	f7ff fd2c 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001198:	2003      	movs	r0, #3
 800119a:	f7ff fd29 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800119e:	2012      	movs	r0, #18
 80011a0:	f7ff fd26 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80011a4:	2081      	movs	r0, #129	; 0x81
 80011a6:	f7ff fd23 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80011aa:	20e8      	movs	r0, #232	; 0xe8
 80011ac:	f7ff fd10 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80011b0:	2085      	movs	r0, #133	; 0x85
 80011b2:	f7ff fd1d 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80011b6:	2010      	movs	r0, #16
 80011b8:	f7ff fd1a 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80011bc:	207a      	movs	r0, #122	; 0x7a
 80011be:	f7ff fd17 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80011c2:	20cb      	movs	r0, #203	; 0xcb
 80011c4:	f7ff fd04 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80011c8:	2039      	movs	r0, #57	; 0x39
 80011ca:	f7ff fd11 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80011ce:	202c      	movs	r0, #44	; 0x2c
 80011d0:	f7ff fd0e 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff fd0b 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80011da:	2034      	movs	r0, #52	; 0x34
 80011dc:	f7ff fd08 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80011e0:	2002      	movs	r0, #2
 80011e2:	f7ff fd05 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80011e6:	20f7      	movs	r0, #247	; 0xf7
 80011e8:	f7ff fcf2 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80011ec:	2020      	movs	r0, #32
 80011ee:	f7ff fcff 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80011f2:	20ea      	movs	r0, #234	; 0xea
 80011f4:	f7ff fcec 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fcf9 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff fcf6 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001204:	20c0      	movs	r0, #192	; 0xc0
 8001206:	f7ff fce3 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800120a:	201b      	movs	r0, #27
 800120c:	f7ff fcf0 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001210:	20c1      	movs	r0, #193	; 0xc1
 8001212:	f7ff fcdd 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff fcea 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800121c:	20c5      	movs	r0, #197	; 0xc5
 800121e:	f7ff fcd7 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001222:	2030      	movs	r0, #48	; 0x30
 8001224:	f7ff fce4 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001228:	2030      	movs	r0, #48	; 0x30
 800122a:	f7ff fce1 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800122e:	20c7      	movs	r0, #199	; 0xc7
 8001230:	f7ff fcce 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001234:	20b7      	movs	r0, #183	; 0xb7
 8001236:	f7ff fcdb 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800123a:	2036      	movs	r0, #54	; 0x36
 800123c:	f7ff fcc8 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001240:	2008      	movs	r0, #8
 8001242:	f7ff fcd5 	bl	8000bf0 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001246:	203a      	movs	r0, #58	; 0x3a
 8001248:	f7ff fcc2 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800124c:	2055      	movs	r0, #85	; 0x55
 800124e:	f7ff fccf 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001252:	20b1      	movs	r0, #177	; 0xb1
 8001254:	f7ff fcbc 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fcc9 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800125e:	201a      	movs	r0, #26
 8001260:	f7ff fcc6 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001264:	20b6      	movs	r0, #182	; 0xb6
 8001266:	f7ff fcb3 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800126a:	200a      	movs	r0, #10
 800126c:	f7ff fcc0 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001270:	20a2      	movs	r0, #162	; 0xa2
 8001272:	f7ff fcbd 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001276:	20f2      	movs	r0, #242	; 0xf2
 8001278:	f7ff fcaa 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff fcb7 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001282:	2026      	movs	r0, #38	; 0x26
 8001284:	f7ff fca4 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff fcb1 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800128e:	20e0      	movs	r0, #224	; 0xe0
 8001290:	f7ff fc9e 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001294:	200f      	movs	r0, #15
 8001296:	f7ff fcab 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800129a:	202a      	movs	r0, #42	; 0x2a
 800129c:	f7ff fca8 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80012a0:	2028      	movs	r0, #40	; 0x28
 80012a2:	f7ff fca5 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012a6:	2008      	movs	r0, #8
 80012a8:	f7ff fca2 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80012ac:	200e      	movs	r0, #14
 80012ae:	f7ff fc9f 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012b2:	2008      	movs	r0, #8
 80012b4:	f7ff fc9c 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80012b8:	2054      	movs	r0, #84	; 0x54
 80012ba:	f7ff fc99 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80012be:	20a9      	movs	r0, #169	; 0xa9
 80012c0:	f7ff fc96 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80012c4:	2043      	movs	r0, #67	; 0x43
 80012c6:	f7ff fc93 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80012ca:	200a      	movs	r0, #10
 80012cc:	f7ff fc90 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012d0:	200f      	movs	r0, #15
 80012d2:	f7ff fc8d 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff fc8a 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff fc87 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f7ff fc84 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fc81 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80012ee:	20e1      	movs	r0, #225	; 0xe1
 80012f0:	f7ff fc6e 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fc7b 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80012fa:	2015      	movs	r0, #21
 80012fc:	f7ff fc78 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001300:	2017      	movs	r0, #23
 8001302:	f7ff fc75 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001306:	2007      	movs	r0, #7
 8001308:	f7ff fc72 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800130c:	2011      	movs	r0, #17
 800130e:	f7ff fc6f 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001312:	2006      	movs	r0, #6
 8001314:	f7ff fc6c 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001318:	202b      	movs	r0, #43	; 0x2b
 800131a:	f7ff fc69 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800131e:	2056      	movs	r0, #86	; 0x56
 8001320:	f7ff fc66 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001324:	203c      	movs	r0, #60	; 0x3c
 8001326:	f7ff fc63 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800132a:	2005      	movs	r0, #5
 800132c:	f7ff fc60 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001330:	2010      	movs	r0, #16
 8001332:	f7ff fc5d 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001336:	200f      	movs	r0, #15
 8001338:	f7ff fc5a 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800133c:	203f      	movs	r0, #63	; 0x3f
 800133e:	f7ff fc57 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001342:	203f      	movs	r0, #63	; 0x3f
 8001344:	f7ff fc54 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001348:	200f      	movs	r0, #15
 800134a:	f7ff fc51 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800134e:	202b      	movs	r0, #43	; 0x2b
 8001350:	f7ff fc3e 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff fc4b 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fc48 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001360:	2001      	movs	r0, #1
 8001362:	f7ff fc45 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001366:	203f      	movs	r0, #63	; 0x3f
 8001368:	f7ff fc42 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800136c:	202a      	movs	r0, #42	; 0x2a
 800136e:	f7ff fc2f 	bl	8000bd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fc3c 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff fc39 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff fc36 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001384:	20ef      	movs	r0, #239	; 0xef
 8001386:	f7ff fc33 	bl	8000bf0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800138a:	2011      	movs	r0, #17
 800138c:	f7ff fc20 	bl	8000bd0 <LCD_WR_REG>
	HAL_Delay(120);
 8001390:	2078      	movs	r0, #120	; 0x78
 8001392:	f001 fba9 	bl	8002ae8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001396:	2029      	movs	r0, #41	; 0x29
 8001398:	f7ff fc1a 	bl	8000bd0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	4804      	ldr	r0, [pc, #16]	; (80013b4 <lcd_init+0x2bc>)
 80013a4:	f001 ff04 	bl	80031b0 <HAL_GPIO_WritePin>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40020800 	.word	0x40020800
 80013b0:	20000130 	.word	0x20000130
 80013b4:	40020000 	.word	0x40020000

080013b8 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b08b      	sub	sp, #44	; 0x2c
 80013bc:	af04      	add	r7, sp, #16
 80013be:	60ba      	str	r2, [r7, #8]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4603      	mov	r3, r0
 80013c4:	81fb      	strh	r3, [r7, #14]
 80013c6:	460b      	mov	r3, r1
 80013c8:	81bb      	strh	r3, [r7, #12]
 80013ca:	4613      	mov	r3, r2
 80013cc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80013ce:	89fb      	ldrh	r3, [r7, #14]
 80013d0:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80013d6:	e048      	b.n	800146a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d145      	bne.n	800146a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80013de:	89fa      	ldrh	r2, [r7, #14]
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <lcd_ShowStr+0xc4>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	1acb      	subs	r3, r1, r3
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dc3f      	bgt.n	8001474 <lcd_ShowStr+0xbc>
 80013f4:	89ba      	ldrh	r2, [r7, #12]
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <lcd_ShowStr+0xc4>)
 80013f8:	885b      	ldrh	r3, [r3, #2]
 80013fa:	4619      	mov	r1, r3
 80013fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001400:	1acb      	subs	r3, r1, r3
 8001402:	429a      	cmp	r2, r3
 8001404:	dc36      	bgt.n	8001474 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b80      	cmp	r3, #128	; 0x80
 800140c:	d902      	bls.n	8001414 <lcd_ShowStr+0x5c>
 800140e:	2301      	movs	r3, #1
 8001410:	75fb      	strb	r3, [r7, #23]
 8001412:	e02a      	b.n	800146a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b0d      	cmp	r3, #13
 800141a:	d10b      	bne.n	8001434 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800141c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001420:	b29a      	uxth	r2, r3
 8001422:	89bb      	ldrh	r3, [r7, #12]
 8001424:	4413      	add	r3, r2
 8001426:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001428:	8abb      	ldrh	r3, [r7, #20]
 800142a:	81fb      	strh	r3, [r7, #14]
					str++;
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	3301      	adds	r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	e017      	b.n	8001464 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	88fc      	ldrh	r4, [r7, #6]
 800143a:	89b9      	ldrh	r1, [r7, #12]
 800143c:	89f8      	ldrh	r0, [r7, #14]
 800143e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	4623      	mov	r3, r4
 8001450:	f7ff fcc4 	bl	8000ddc <lcd_ShowChar>
					x+=sizey/2;
 8001454:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001458:	085b      	lsrs	r3, r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	b29a      	uxth	r2, r3
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	4413      	add	r3, r2
 8001462:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	3301      	adds	r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1b2      	bne.n	80013d8 <lcd_ShowStr+0x20>
 8001472:	e000      	b.n	8001476 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001474:	bf00      	nop
			}
		}
	}
}
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	20000130 	.word	0x20000130

08001480 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af04      	add	r7, sp, #16
 8001486:	60ba      	str	r2, [r7, #8]
 8001488:	461a      	mov	r2, r3
 800148a:	4603      	mov	r3, r0
 800148c:	81fb      	strh	r3, [r7, #14]
 800148e:	460b      	mov	r3, r1
 8001490:	81bb      	strh	r3, [r7, #12]
 8001492:	4613      	mov	r3, r2
 8001494:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001496:	68b8      	ldr	r0, [r7, #8]
 8001498:	f7fe fe96 	bl	80001c8 <strlen>
 800149c:	4603      	mov	r3, r0
 800149e:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <lcd_StrCenter+0x60>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	8afb      	ldrh	r3, [r7, #22]
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	0fda      	lsrs	r2, r3, #31
 80014ae:	4413      	add	r3, r2
 80014b0:	105b      	asrs	r3, r3, #1
 80014b2:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80014b4:	89fa      	ldrh	r2, [r7, #14]
 80014b6:	8abb      	ldrh	r3, [r7, #20]
 80014b8:	4413      	add	r3, r2
 80014ba:	b298      	uxth	r0, r3
 80014bc:	88fa      	ldrh	r2, [r7, #6]
 80014be:	89b9      	ldrh	r1, [r7, #12]
 80014c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014c4:	9302      	str	r3, [sp, #8]
 80014c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	8c3b      	ldrh	r3, [r7, #32]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f7ff ff70 	bl	80013b8 <lcd_ShowStr>
}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000130 	.word	0x20000130

080014e4 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2140      	movs	r1, #64	; 0x40
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <led7_init+0x14>)
 80014ee:	f001 fe5f 	bl	80031b0 <HAL_GPIO_WritePin>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40021800 	.word	0x40021800

080014fc <led7_Scan>:

void led7_Scan(){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001500:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <led7_Scan+0x104>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <led7_Scan+0x104>)
 800150a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800150c:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <led7_Scan+0x108>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a3d      	ldr	r2, [pc, #244]	; (8001608 <led7_Scan+0x10c>)
 8001512:	5cd3      	ldrb	r3, [r2, r3]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21a      	sxth	r2, r3
 8001518:	4b39      	ldr	r3, [pc, #228]	; (8001600 <led7_Scan+0x104>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	b21b      	sxth	r3, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	b21b      	sxth	r3, r3
 8001522:	b29a      	uxth	r2, r3
 8001524:	4b36      	ldr	r3, [pc, #216]	; (8001600 <led7_Scan+0x104>)
 8001526:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001528:	4b36      	ldr	r3, [pc, #216]	; (8001604 <led7_Scan+0x108>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d847      	bhi.n	80015c0 <led7_Scan+0xc4>
 8001530:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <led7_Scan+0x3c>)
 8001532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001536:	bf00      	nop
 8001538:	08001549 	.word	0x08001549
 800153c:	08001567 	.word	0x08001567
 8001540:	08001585 	.word	0x08001585
 8001544:	080015a3 	.word	0x080015a3
	case 0:
		spi_buffer |= 0x00b0;
 8001548:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <led7_Scan+0x104>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <led7_Scan+0x104>)
 8001554:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001556:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <led7_Scan+0x104>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <led7_Scan+0x104>)
 8001562:	801a      	strh	r2, [r3, #0]
		break;
 8001564:	e02d      	b.n	80015c2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <led7_Scan+0x104>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800156e:	b29a      	uxth	r2, r3
 8001570:	4b23      	ldr	r3, [pc, #140]	; (8001600 <led7_Scan+0x104>)
 8001572:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <led7_Scan+0x104>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	f023 0320 	bic.w	r3, r3, #32
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <led7_Scan+0x104>)
 8001580:	801a      	strh	r2, [r3, #0]
		break;
 8001582:	e01e      	b.n	80015c2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <led7_Scan+0x104>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <led7_Scan+0x104>)
 8001590:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <led7_Scan+0x104>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	f023 0310 	bic.w	r3, r3, #16
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <led7_Scan+0x104>)
 800159e:	801a      	strh	r2, [r3, #0]
		break;
 80015a0:	e00f      	b.n	80015c2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <led7_Scan+0x104>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <led7_Scan+0x104>)
 80015ae:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <led7_Scan+0x104>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <led7_Scan+0x104>)
 80015bc:	801a      	strh	r2, [r3, #0]
		break;
 80015be:	e000      	b.n	80015c2 <led7_Scan+0xc6>
	default:
		break;
 80015c0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <led7_Scan+0x108>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	425a      	negs	r2, r3
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	f002 0203 	and.w	r2, r2, #3
 80015d2:	bf58      	it	pl
 80015d4:	4253      	negpl	r3, r2
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <led7_Scan+0x108>)
 80015d8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	480b      	ldr	r0, [pc, #44]	; (800160c <led7_Scan+0x110>)
 80015e0:	f001 fde6 	bl	80031b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80015e4:	2301      	movs	r3, #1
 80015e6:	2202      	movs	r2, #2
 80015e8:	4905      	ldr	r1, [pc, #20]	; (8001600 <led7_Scan+0x104>)
 80015ea:	4809      	ldr	r0, [pc, #36]	; (8001610 <led7_Scan+0x114>)
 80015ec:	f003 fbe5 	bl	8004dba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2140      	movs	r1, #64	; 0x40
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <led7_Scan+0x110>)
 80015f6:	f001 fddb 	bl	80031b0 <HAL_GPIO_WritePin>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000004 	.word	0x20000004
 8001604:	2000003c 	.word	0x2000003c
 8001608:	20000000 	.word	0x20000000
 800160c:	40021800 	.word	0x40021800
 8001610:	20000178 	.word	0x20000178

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161a:	f001 f9f3 	bl	8002a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161e:	f000 f8c7 	bl	80017b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001622:	f7ff f967 	bl	80008f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001626:	f001 f837 	bl	8002698 <MX_TIM2_Init>
  MX_SPI1_Init();
 800162a:	f000 ff3f 	bl	80024ac <MX_SPI1_Init>
  MX_FSMC_Init();
 800162e:	f7ff f891 	bl	8000754 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001632:	f7ff fa57 	bl	8000ae4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001636:	f001 f903 	bl	8002840 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800163a:	f000 f923 	bl	8001884 <system_init>

    	// Inside the main loop



      while (!flag_timer2);
 800163e:	bf00      	nop
 8001640:	4b4e      	ldr	r3, [pc, #312]	; (800177c <main+0x168>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0fb      	beq.n	8001640 <main+0x2c>
      flag_timer2 = 0;
 8001648:	4b4c      	ldr	r3, [pc, #304]	; (800177c <main+0x168>)
 800164a:	2200      	movs	r2, #0
 800164c:	801a      	strh	r2, [r3, #0]
      button_Scan();
 800164e:	f7fe ff4b 	bl	80004e8 <button_Scan>
      buttonBai5();
 8001652:	f000 f961 	bl	8001918 <buttonBai5>
  	if (data_available_flag) {
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <main+0x16c>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <main+0x54>
  	    ProcessRingBufferData();  // Process all available data in the ring buffer
 800165e:	f000 fdbb 	bl	80021d8 <ProcessRingBufferData>
  	    data_available_flag = 0;   // Reset the flag after processing
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <main+0x16c>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
  	}
      switch (current_mode) {
 8001668:	4b46      	ldr	r3, [pc, #280]	; (8001784 <main+0x170>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b04      	cmp	r3, #4
 800166e:	f200 8081 	bhi.w	8001774 <main+0x160>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <main+0x64>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	0800168d 	.word	0x0800168d
 800167c:	080016bb 	.word	0x080016bb
 8001680:	080016db 	.word	0x080016db
 8001684:	08001701 	.word	0x08001701
 8001688:	08001721 	.word	0x08001721
          case DISPLAY_MODE:
        	  lcd_StrCenter(0, 2, "DISPLAY MODE", WHITE, BLACK, 16, 1);
 800168c:	2301      	movs	r3, #1
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	2310      	movs	r3, #16
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	2300      	movs	r3, #0
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800169c:	4a3a      	ldr	r2, [pc, #232]	; (8001788 <main+0x174>)
 800169e:	2102      	movs	r1, #2
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff feed 	bl	8001480 <lcd_StrCenter>
              ds3231_ReadTime();
 80016a6:	f7fe fff1 	bl	800068c <ds3231_ReadTime>
              displayTime();
 80016aa:	f000 f977 	bl	800199c <displayTime>
              checkAlarm();
 80016ae:	f000 fbd1 	bl	8001e54 <checkAlarm>
              adjust_part =0;
 80016b2:	4b36      	ldr	r3, [pc, #216]	; (800178c <main+0x178>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
              break;
 80016b8:	e05f      	b.n	800177a <main+0x166>

          case ADJUST_MODE:
        	  lcd_StrCenter(0, 2, "ADJUST MANUALLY Mode", WHITE, BLACK, 16, 1);
 80016ba:	2301      	movs	r3, #1
 80016bc:	9302      	str	r3, [sp, #8]
 80016be:	2310      	movs	r3, #16
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	2300      	movs	r3, #0
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ca:	4a31      	ldr	r2, [pc, #196]	; (8001790 <main+0x17c>)
 80016cc:	2102      	movs	r1, #2
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff fed6 	bl	8001480 <lcd_StrCenter>
              adjustTime();
 80016d4:	f000 f9e0 	bl	8001a98 <adjustTime>
              break;
 80016d8:	e04f      	b.n	800177a <main+0x166>

          case ALARM_MODE:
        	  lcd_StrCenter(0, 2, "ALARM Mode", WHITE, BLACK, 16, 1);
 80016da:	2301      	movs	r3, #1
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	2310      	movs	r3, #16
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ea:	4a2a      	ldr	r2, [pc, #168]	; (8001794 <main+0x180>)
 80016ec:	2102      	movs	r1, #2
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fec6 	bl	8001480 <lcd_StrCenter>
              setAlarm();
 80016f4:	f000 fb2e 	bl	8001d54 <setAlarm>
              adjust_part =0;
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <main+0x178>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
              break;
 80016fe:	e03c      	b.n	800177a <main+0x166>
          case ADJUST_RS232_Mode:
        	  lcd_StrCenter(0, 2, "ADJUST RS232 Mode", WHITE, BLACK, 16, 1);
 8001700:	2301      	movs	r3, #1
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	2310      	movs	r3, #16
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	2300      	movs	r3, #0
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001710:	4a21      	ldr	r2, [pc, #132]	; (8001798 <main+0x184>)
 8001712:	2102      	movs	r1, #2
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff feb3 	bl	8001480 <lcd_StrCenter>
//        	  lcd_ShowStr(20, 30, "Traffic light", WHITE, Black, 24, 0);
        	  adjustTimeRS232();
 800171a:	f000 fc0b 	bl	8001f34 <adjustTimeRS232>
        	  break;
 800171e:	e02c      	b.n	800177a <main+0x166>
          case ADJUST_RS232_Mode_ERROR:
        	    lcd_StrCenter(0, 2, "ERROR: No response", RED, BLACK, 16, 1);
 8001720:	2301      	movs	r3, #1
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2310      	movs	r3, #16
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	2300      	movs	r3, #0
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001730:	4a1a      	ldr	r2, [pc, #104]	; (800179c <main+0x188>)
 8001732:	2102      	movs	r1, #2
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fea3 	bl	8001480 <lcd_StrCenter>
      	        error_display_counter++;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <main+0x18c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <main+0x18c>)
 8001744:	701a      	strb	r2, [r3, #0]
      	        if (error_display_counter >= ERROR_DISPLAY_TIME) {
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <main+0x18c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b3b      	cmp	r3, #59	; 0x3b
 800174c:	d914      	bls.n	8001778 <main+0x164>
      	            current_mode = DISPLAY_MODE;  // Reset to normal mode
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <main+0x170>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
      	            lcd_Clear(BLACK);
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff fab9 	bl	8000ccc <lcd_Clear>
      	            in_error_display = 0;
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <main+0x190>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
      	            error_display_counter = 0;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <main+0x18c>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
      	          attempt_count = 0;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <main+0x194>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
      	          timeout_counter = TIMEOUT;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <main+0x198>)
 800176e:	2264      	movs	r2, #100	; 0x64
 8001770:	801a      	strh	r2, [r3, #0]
      	        }
        	  break;
 8001772:	e001      	b.n	8001778 <main+0x164>
          default:
              break;
 8001774:	bf00      	nop
 8001776:	e762      	b.n	800163e <main+0x2a>
        	  break;
 8001778:	bf00      	nop
      while (!flag_timer2);
 800177a:	e760      	b.n	800163e <main+0x2a>
 800177c:	20000054 	.word	0x20000054
 8001780:	20000046 	.word	0x20000046
 8001784:	20000047 	.word	0x20000047
 8001788:	08007324 	.word	0x08007324
 800178c:	20000048 	.word	0x20000048
 8001790:	08007334 	.word	0x08007334
 8001794:	0800734c 	.word	0x0800734c
 8001798:	08007358 	.word	0x08007358
 800179c:	0800736c 	.word	0x0800736c
 80017a0:	20000050 	.word	0x20000050
 80017a4:	20000051 	.word	0x20000051
 80017a8:	2000004c 	.word	0x2000004c
 80017ac:	20000006 	.word	0x20000006

080017b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b094      	sub	sp, #80	; 0x50
 80017b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b6:	f107 0320 	add.w	r3, r7, #32
 80017ba:	2230      	movs	r2, #48	; 0x30
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 fd9c 	bl	80072fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <SystemClock_Config+0xcc>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	4a27      	ldr	r2, [pc, #156]	; (800187c <SystemClock_Config+0xcc>)
 80017de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <SystemClock_Config+0xcc>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <SystemClock_Config+0xd0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a21      	ldr	r2, [pc, #132]	; (8001880 <SystemClock_Config+0xd0>)
 80017fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <SystemClock_Config+0xd0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800180c:	2302      	movs	r3, #2
 800180e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001810:	2301      	movs	r3, #1
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001814:	2310      	movs	r3, #16
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001818:	2302      	movs	r3, #2
 800181a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800181c:	2300      	movs	r3, #0
 800181e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001820:	2308      	movs	r3, #8
 8001822:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001824:	23a8      	movs	r3, #168	; 0xa8
 8001826:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001828:	2302      	movs	r3, #2
 800182a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800182c:	2304      	movs	r3, #4
 800182e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001830:	f107 0320 	add.w	r3, r7, #32
 8001834:	4618      	mov	r0, r3
 8001836:	f002 fdc3 	bl	80043c0 <HAL_RCC_OscConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001840:	f000 fdde 	bl	8002400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001844:	230f      	movs	r3, #15
 8001846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001848:	2302      	movs	r3, #2
 800184a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001850:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001856:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800185a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	2105      	movs	r1, #5
 8001862:	4618      	mov	r0, r3
 8001864:	f003 f824 	bl	80048b0 <HAL_RCC_ClockConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800186e:	f000 fdc7 	bl	8002400 <Error_Handler>
  }
}
 8001872:	bf00      	nop
 8001874:	3750      	adds	r7, #80	; 0x50
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000

08001884 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2120      	movs	r1, #32
 800188c:	4811      	ldr	r0, [pc, #68]	; (80018d4 <system_init+0x50>)
 800188e:	f001 fc8f 	bl	80031b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2140      	movs	r1, #64	; 0x40
 8001896:	480f      	ldr	r0, [pc, #60]	; (80018d4 <system_init+0x50>)
 8001898:	f001 fc8a 	bl	80031b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2110      	movs	r1, #16
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <system_init+0x50>)
 80018a2:	f001 fc85 	bl	80031b0 <HAL_GPIO_WritePin>
	  timer_init();
 80018a6:	f000 fdb1 	bl	800240c <timer_init>
	  led7_init();
 80018aa:	f7ff fe1b 	bl	80014e4 <led7_init>
	  button_init();
 80018ae:	f7fe fe0f 	bl	80004d0 <button_init>
	  lcd_init();
 80018b2:	f7ff fc21 	bl	80010f8 <lcd_init>
	  uart_init_rs232();
 80018b6:	f000 ff61 	bl	800277c <uart_init_rs232>
	  ds3231_init();
 80018ba:	f7fe fe81 	bl	80005c0 <ds3231_init>
	  setTimer2(50);
 80018be:	2032      	movs	r0, #50	; 0x32
 80018c0:	f000 fdae 	bl	8002420 <setTimer2>
	  lcd_Clear(BLACK);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f7ff fa01 	bl	8000ccc <lcd_Clear>
	  updateTime();
 80018ca:	f000 f805 	bl	80018d8 <updateTime>
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000

080018d8 <updateTime>:
		uart_Rs232SendString(":");
		uart_Rs232SendNum(ds3231_sec);
		uart_Rs232SendString("\n");
	}
}
void updateTime(){
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 80018dc:	2117      	movs	r1, #23
 80018de:	2006      	movs	r0, #6
 80018e0:	f7fe feb2 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 80018e4:	210a      	movs	r1, #10
 80018e6:	2005      	movs	r0, #5
 80018e8:	f7fe feae 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 80018ec:	2114      	movs	r1, #20
 80018ee:	2004      	movs	r0, #4
 80018f0:	f7fe feaa 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 80018f4:	2106      	movs	r1, #6
 80018f6:	2003      	movs	r0, #3
 80018f8:	f7fe fea6 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 1);
 80018fc:	2101      	movs	r1, #1
 80018fe:	2002      	movs	r0, #2
 8001900:	f7fe fea2 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 2);
 8001904:	2102      	movs	r1, #2
 8001906:	2001      	movs	r0, #1
 8001908:	f7fe fe9e 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 30);
 800190c:	211e      	movs	r1, #30
 800190e:	2000      	movs	r0, #0
 8001910:	f7fe fe9a 	bl	8000648 <ds3231_Write>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <buttonBai5>:
void buttonBai5(){
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
    if (button_count[0] == 1) {
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <buttonBai5+0x38>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d112      	bne.n	800194a <buttonBai5+0x32>
        current_mode = (current_mode +1) % 4;
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <buttonBai5+0x3c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	425a      	negs	r2, r3
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	f002 0203 	and.w	r2, r2, #3
 8001934:	bf58      	it	pl
 8001936:	4253      	negpl	r3, r2
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <buttonBai5+0x3c>)
 800193c:	701a      	strb	r2, [r3, #0]
       lcd_Clear(BLACK);
 800193e:	2000      	movs	r0, #0
 8001940:	f7ff f9c4 	bl	8000ccc <lcd_Clear>
       request_RS232_count =0;
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <buttonBai5+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
    }
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000005c 	.word	0x2000005c
 8001954:	20000047 	.word	0x20000047
 8001958:	2000004b 	.word	0x2000004b

0800195c <isButtonUp>:

uint8_t isButtonUp()
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <isButtonUp+0x1c>)
 8001962:	88db      	ldrh	r3, [r3, #6]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <isButtonUp+0x10>
        return 1;
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <isButtonUp+0x12>
    else
        return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	2000005c 	.word	0x2000005c

0800197c <isButtonDown>:
uint8_t isButtonDown()
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <isButtonDown+0x1c>)
 8001982:	89db      	ldrh	r3, [r3, #14]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <isButtonDown+0x10>
        return 1;
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <isButtonDown+0x12>
    else
        return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	2000005c 	.word	0x2000005c

0800199c <displayTime>:
void displayTime(){
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af04      	add	r7, sp, #16

	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 80019a2:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <displayTime+0xe0>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	2318      	movs	r3, #24
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2300      	movs	r3, #0
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2302      	movs	r3, #2
 80019b8:	2164      	movs	r1, #100	; 0x64
 80019ba:	2046      	movs	r0, #70	; 0x46
 80019bc:	f7ff fafa 	bl	8000fb4 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80019c0:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <displayTime+0xe4>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	2318      	movs	r3, #24
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	2300      	movs	r3, #0
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2302      	movs	r3, #2
 80019d6:	2164      	movs	r1, #100	; 0x64
 80019d8:	206e      	movs	r0, #110	; 0x6e
 80019da:	f7ff faeb 	bl	8000fb4 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80019de:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <displayTime+0xe8>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	2318      	movs	r3, #24
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	2300      	movs	r3, #0
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2302      	movs	r3, #2
 80019f4:	2164      	movs	r1, #100	; 0x64
 80019f6:	2096      	movs	r0, #150	; 0x96
 80019f8:	f7ff fadc 	bl	8000fb4 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <displayTime+0xec>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	2318      	movs	r3, #24
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	2300      	movs	r3, #0
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2302      	movs	r3, #2
 8001a12:	2182      	movs	r1, #130	; 0x82
 8001a14:	2014      	movs	r0, #20
 8001a16:	f7ff facd 	bl	8000fb4 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <displayTime+0xf0>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	2318      	movs	r3, #24
 8001a22:	9302      	str	r3, [sp, #8]
 8001a24:	2300      	movs	r3, #0
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2302      	movs	r3, #2
 8001a30:	2182      	movs	r1, #130	; 0x82
 8001a32:	2046      	movs	r0, #70	; 0x46
 8001a34:	f7ff fabe 	bl	8000fb4 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <displayTime+0xf4>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	2318      	movs	r3, #24
 8001a40:	9302      	str	r3, [sp, #8]
 8001a42:	2300      	movs	r3, #0
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	2182      	movs	r1, #130	; 0x82
 8001a50:	206e      	movs	r0, #110	; 0x6e
 8001a52:	f7ff faaf 	bl	8000fb4 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <displayTime+0xf8>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	2318      	movs	r3, #24
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	2300      	movs	r3, #0
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	2182      	movs	r1, #130	; 0x82
 8001a6e:	2096      	movs	r0, #150	; 0x96
 8001a70:	f7ff faa0 	bl	8000fb4 <lcd_ShowIntNum>
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000081 	.word	0x20000081
 8001a80:	2000007e 	.word	0x2000007e
 8001a84:	2000007c 	.word	0x2000007c
 8001a88:	20000080 	.word	0x20000080
 8001a8c:	2000007f 	.word	0x2000007f
 8001a90:	20000082 	.word	0x20000082
 8001a94:	2000007d 	.word	0x2000007d

08001a98 <adjustTime>:

void adjustTime() {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af04      	add	r7, sp, #16
//    lcd_ShowStr(10, 10, "Adjust Time", RED, BLACK, 24);
	counter_blink = (counter_blink + 1)%10;
 8001a9e:	4ba2      	ldr	r3, [pc, #648]	; (8001d28 <adjustTime+0x290>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	4ba1      	ldr	r3, [pc, #644]	; (8001d2c <adjustTime+0x294>)
 8001aa6:	fb83 1302 	smull	r1, r3, r3, r2
 8001aaa:	1099      	asrs	r1, r3, #2
 8001aac:	17d3      	asrs	r3, r2, #31
 8001aae:	1ac9      	subs	r1, r1, r3
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	1ad1      	subs	r1, r2, r3
 8001aba:	b2ca      	uxtb	r2, r1
 8001abc:	4b9a      	ldr	r3, [pc, #616]	; (8001d28 <adjustTime+0x290>)
 8001abe:	701a      	strb	r2, [r3, #0]
    // Increment the selected part of time
    if (isButtonUp()) {
 8001ac0:	f7ff ff4c 	bl	800195c <isButtonUp>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d042      	beq.n	8001b50 <adjustTime+0xb8>
        if (adjust_part == 0){
 8001aca:	4b99      	ldr	r3, [pc, #612]	; (8001d30 <adjustTime+0x298>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d111      	bne.n	8001af6 <adjustTime+0x5e>
        	ds3231_hours = (ds3231_hours + 1) % 24;
 8001ad2:	4b98      	ldr	r3, [pc, #608]	; (8001d34 <adjustTime+0x29c>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	4b97      	ldr	r3, [pc, #604]	; (8001d38 <adjustTime+0x2a0>)
 8001ada:	fb83 1302 	smull	r1, r3, r3, r2
 8001ade:	1099      	asrs	r1, r3, #2
 8001ae0:	17d3      	asrs	r3, r2, #31
 8001ae2:	1ac9      	subs	r1, r1, r3
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	440b      	add	r3, r1
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	1ad1      	subs	r1, r2, r3
 8001aee:	b2ca      	uxtb	r2, r1
 8001af0:	4b90      	ldr	r3, [pc, #576]	; (8001d34 <adjustTime+0x29c>)
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e02c      	b.n	8001b50 <adjustTime+0xb8>

        }
        else if (adjust_part == 1) ds3231_min = (ds3231_min + 1) % 60;
 8001af6:	4b8e      	ldr	r3, [pc, #568]	; (8001d30 <adjustTime+0x298>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d112      	bne.n	8001b24 <adjustTime+0x8c>
 8001afe:	4b8f      	ldr	r3, [pc, #572]	; (8001d3c <adjustTime+0x2a4>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	4b8e      	ldr	r3, [pc, #568]	; (8001d40 <adjustTime+0x2a8>)
 8001b06:	fb83 1302 	smull	r1, r3, r3, r2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	1159      	asrs	r1, r3, #5
 8001b0e:	17d3      	asrs	r3, r2, #31
 8001b10:	1ac9      	subs	r1, r1, r3
 8001b12:	460b      	mov	r3, r1
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a5b      	subs	r3, r3, r1
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	1ad1      	subs	r1, r2, r3
 8001b1c:	b2ca      	uxtb	r2, r1
 8001b1e:	4b87      	ldr	r3, [pc, #540]	; (8001d3c <adjustTime+0x2a4>)
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	e015      	b.n	8001b50 <adjustTime+0xb8>
        else if (adjust_part == 2) ds3231_sec = (ds3231_sec + 1) % 60;
 8001b24:	4b82      	ldr	r3, [pc, #520]	; (8001d30 <adjustTime+0x298>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d111      	bne.n	8001b50 <adjustTime+0xb8>
 8001b2c:	4b85      	ldr	r3, [pc, #532]	; (8001d44 <adjustTime+0x2ac>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	4b83      	ldr	r3, [pc, #524]	; (8001d40 <adjustTime+0x2a8>)
 8001b34:	fb83 1302 	smull	r1, r3, r3, r2
 8001b38:	4413      	add	r3, r2
 8001b3a:	1159      	asrs	r1, r3, #5
 8001b3c:	17d3      	asrs	r3, r2, #31
 8001b3e:	1ac9      	subs	r1, r1, r3
 8001b40:	460b      	mov	r3, r1
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	1a5b      	subs	r3, r3, r1
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	1ad1      	subs	r1, r2, r3
 8001b4a:	b2ca      	uxtb	r2, r1
 8001b4c:	4b7d      	ldr	r3, [pc, #500]	; (8001d44 <adjustTime+0x2ac>)
 8001b4e:	701a      	strb	r2, [r3, #0]
    }

    // Save part and move to the next part
    if (isButtonDown()) {
 8001b50:	f7ff ff14 	bl	800197c <isButtonDown>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d02a      	beq.n	8001bb0 <adjustTime+0x118>
        adjust_part = (adjust_part + 1) % 3;  // Rotate through hours, minutes, seconds
 8001b5a:	4b75      	ldr	r3, [pc, #468]	; (8001d30 <adjustTime+0x298>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	4b79      	ldr	r3, [pc, #484]	; (8001d48 <adjustTime+0x2b0>)
 8001b62:	fb83 3102 	smull	r3, r1, r3, r2
 8001b66:	17d3      	asrs	r3, r2, #31
 8001b68:	1ac9      	subs	r1, r1, r3
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	440b      	add	r3, r1
 8001b70:	1ad1      	subs	r1, r2, r3
 8001b72:	b2ca      	uxtb	r2, r1
 8001b74:	4b6e      	ldr	r3, [pc, #440]	; (8001d30 <adjustTime+0x298>)
 8001b76:	701a      	strb	r2, [r3, #0]

        if (adjust_part == 0) {
 8001b78:	4b6d      	ldr	r3, [pc, #436]	; (8001d30 <adjustTime+0x298>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d117      	bne.n	8001bb0 <adjustTime+0x118>
        	ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8001b80:	4b6c      	ldr	r3, [pc, #432]	; (8001d34 <adjustTime+0x29c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	2002      	movs	r0, #2
 8001b88:	f7fe fd5e 	bl	8000648 <ds3231_Write>
			ds3231_Write(ADDRESS_MIN, ds3231_min);
 8001b8c:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <adjustTime+0x2a4>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7fe fd58 	bl	8000648 <ds3231_Write>
			ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001b98:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <adjustTime+0x2ac>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7fe fd52 	bl	8000648 <ds3231_Write>
            current_mode = DISPLAY_MODE;
 8001ba4:	4b69      	ldr	r3, [pc, #420]	; (8001d4c <adjustTime+0x2b4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
            lcd_Clear(BLACK);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f7ff f88e 	bl	8000ccc <lcd_Clear>
        }
    }

    // Display and blink selected part

    if (adjust_part == 0) {
 8001bb0:	4b5f      	ldr	r3, [pc, #380]	; (8001d30 <adjustTime+0x298>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d13a      	bne.n	8001c2e <adjustTime+0x196>
    	if(counter_blink ==0 &&blink_flag ==0)
 8001bb8:	4b5b      	ldr	r3, [pc, #364]	; (8001d28 <adjustTime+0x290>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d118      	bne.n	8001bf2 <adjustTime+0x15a>
 8001bc0:	4b63      	ldr	r3, [pc, #396]	; (8001d50 <adjustTime+0x2b8>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d114      	bne.n	8001bf2 <adjustTime+0x15a>
    	{
    		displayTime();
 8001bc8:	f7ff fee8 	bl	800199c <displayTime>
    		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001bcc:	4b59      	ldr	r3, [pc, #356]	; (8001d34 <adjustTime+0x29c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	2318      	movs	r3, #24
 8001bd4:	9302      	str	r3, [sp, #8]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2302      	movs	r3, #2
 8001be2:	2164      	movs	r1, #100	; 0x64
 8001be4:	2046      	movs	r0, #70	; 0x46
 8001be6:	f7ff f9e5 	bl	8000fb4 <lcd_ShowIntNum>
    		blink_flag =1;
 8001bea:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <adjustTime+0x2b8>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	e097      	b.n	8001d22 <adjustTime+0x28a>
    	}
    	else if (counter_blink ==0 &&blink_flag ==1){
 8001bf2:	4b4d      	ldr	r3, [pc, #308]	; (8001d28 <adjustTime+0x290>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 8093 	bne.w	8001d22 <adjustTime+0x28a>
 8001bfc:	4b54      	ldr	r3, [pc, #336]	; (8001d50 <adjustTime+0x2b8>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	f040 808e 	bne.w	8001d22 <adjustTime+0x28a>
    		displayTime();
 8001c06:	f7ff fec9 	bl	800199c <displayTime>
    		lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 8001c0a:	4b4a      	ldr	r3, [pc, #296]	; (8001d34 <adjustTime+0x29c>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	2318      	movs	r3, #24
 8001c12:	9302      	str	r3, [sp, #8]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	2164      	movs	r1, #100	; 0x64
 8001c20:	2046      	movs	r0, #70	; 0x46
 8001c22:	f7ff f9c7 	bl	8000fb4 <lcd_ShowIntNum>
    		blink_flag =0;
 8001c26:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <adjustTime+0x2b8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
    		displayTime();
    		lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
    		blink_flag =0;
    	}
    }
}
 8001c2c:	e079      	b.n	8001d22 <adjustTime+0x28a>
    else if (adjust_part == 1) {
 8001c2e:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <adjustTime+0x298>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d138      	bne.n	8001ca8 <adjustTime+0x210>
    	if(counter_blink ==0 &&blink_flag ==0)
 8001c36:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <adjustTime+0x290>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <adjustTime+0x1d8>
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <adjustTime+0x2b8>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d114      	bne.n	8001c70 <adjustTime+0x1d8>
    		displayTime();
 8001c46:	f7ff fea9 	bl	800199c <displayTime>
    		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <adjustTime+0x2a4>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	2318      	movs	r3, #24
 8001c52:	9302      	str	r3, [sp, #8]
 8001c54:	2300      	movs	r3, #0
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2302      	movs	r3, #2
 8001c60:	2164      	movs	r1, #100	; 0x64
 8001c62:	206e      	movs	r0, #110	; 0x6e
 8001c64:	f7ff f9a6 	bl	8000fb4 <lcd_ShowIntNum>
    		blink_flag =1;
 8001c68:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <adjustTime+0x2b8>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	e058      	b.n	8001d22 <adjustTime+0x28a>
    	else if (counter_blink ==0 &&blink_flag ==1){
 8001c70:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <adjustTime+0x290>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d154      	bne.n	8001d22 <adjustTime+0x28a>
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <adjustTime+0x2b8>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d150      	bne.n	8001d22 <adjustTime+0x28a>
    		displayTime();
 8001c80:	f7ff fe8c 	bl	800199c <displayTime>
    		lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <adjustTime+0x2a4>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	2318      	movs	r3, #24
 8001c8c:	9302      	str	r3, [sp, #8]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	2300      	movs	r3, #0
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	2302      	movs	r3, #2
 8001c98:	2164      	movs	r1, #100	; 0x64
 8001c9a:	206e      	movs	r0, #110	; 0x6e
 8001c9c:	f7ff f98a 	bl	8000fb4 <lcd_ShowIntNum>
    		blink_flag =0;
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <adjustTime+0x2b8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
}
 8001ca6:	e03c      	b.n	8001d22 <adjustTime+0x28a>
    else if (adjust_part == 2) {
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <adjustTime+0x298>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d138      	bne.n	8001d22 <adjustTime+0x28a>
    	if(counter_blink ==0 &&blink_flag ==0)
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <adjustTime+0x290>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d118      	bne.n	8001cea <adjustTime+0x252>
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <adjustTime+0x2b8>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d114      	bne.n	8001cea <adjustTime+0x252>
    		displayTime();
 8001cc0:	f7ff fe6c 	bl	800199c <displayTime>
    		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <adjustTime+0x2ac>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	2318      	movs	r3, #24
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2302      	movs	r3, #2
 8001cda:	2164      	movs	r1, #100	; 0x64
 8001cdc:	2096      	movs	r0, #150	; 0x96
 8001cde:	f7ff f969 	bl	8000fb4 <lcd_ShowIntNum>
    		blink_flag =1;
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <adjustTime+0x2b8>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	e01b      	b.n	8001d22 <adjustTime+0x28a>
    	else if(counter_blink ==0 &&blink_flag ==1){
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <adjustTime+0x290>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d117      	bne.n	8001d22 <adjustTime+0x28a>
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <adjustTime+0x2b8>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d113      	bne.n	8001d22 <adjustTime+0x28a>
    		displayTime();
 8001cfa:	f7ff fe4f 	bl	800199c <displayTime>
    		lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <adjustTime+0x2ac>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	2318      	movs	r3, #24
 8001d06:	9302      	str	r3, [sp, #8]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2302      	movs	r3, #2
 8001d12:	2164      	movs	r1, #100	; 0x64
 8001d14:	2096      	movs	r0, #150	; 0x96
 8001d16:	f7ff f94d 	bl	8000fb4 <lcd_ShowIntNum>
    		blink_flag =0;
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <adjustTime+0x2b8>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
}
 8001d20:	e7ff      	b.n	8001d22 <adjustTime+0x28a>
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000040 	.word	0x20000040
 8001d2c:	66666667 	.word	0x66666667
 8001d30:	20000048 	.word	0x20000048
 8001d34:	20000081 	.word	0x20000081
 8001d38:	2aaaaaab 	.word	0x2aaaaaab
 8001d3c:	2000007e 	.word	0x2000007e
 8001d40:	88888889 	.word	0x88888889
 8001d44:	2000007c 	.word	0x2000007c
 8001d48:	55555556 	.word	0x55555556
 8001d4c:	20000047 	.word	0x20000047
 8001d50:	20000041 	.word	0x20000041

08001d54 <setAlarm>:
static uint8_t alarm_active = 2;  // Flag to indicate if the alarm is active
static uint16_t alarm_duration = 0;


void setAlarm() {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af04      	add	r7, sp, #16
//    lcd_ShowStr(10, 10, "Set Alarm", YELLOW, BLACK, 24);

    // Adjust alarm time
    if (isButtonUp()) {
 8001d5a:	f7ff fdff 	bl	800195c <isButtonUp>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d02b      	beq.n	8001dbc <setAlarm+0x68>
        if (adjust_part == 0) alarm_hours = (alarm_hours + 1) % 24;
 8001d64:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <setAlarm+0xe4>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d111      	bne.n	8001d90 <setAlarm+0x3c>
 8001d6c:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <setAlarm+0xe8>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	4b33      	ldr	r3, [pc, #204]	; (8001e40 <setAlarm+0xec>)
 8001d74:	fb83 1302 	smull	r1, r3, r3, r2
 8001d78:	1099      	asrs	r1, r3, #2
 8001d7a:	17d3      	asrs	r3, r2, #31
 8001d7c:	1ac9      	subs	r1, r1, r3
 8001d7e:	460b      	mov	r3, r1
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	440b      	add	r3, r1
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	1ad1      	subs	r1, r2, r3
 8001d88:	b2ca      	uxtb	r2, r1
 8001d8a:	4b2c      	ldr	r3, [pc, #176]	; (8001e3c <setAlarm+0xe8>)
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	e015      	b.n	8001dbc <setAlarm+0x68>
        else if (adjust_part == 1) alarm_minutes = (alarm_minutes + 1) % 60;
 8001d90:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <setAlarm+0xe4>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d111      	bne.n	8001dbc <setAlarm+0x68>
 8001d98:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <setAlarm+0xf0>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <setAlarm+0xf4>)
 8001da0:	fb83 1302 	smull	r1, r3, r3, r2
 8001da4:	4413      	add	r3, r2
 8001da6:	1159      	asrs	r1, r3, #5
 8001da8:	17d3      	asrs	r3, r2, #31
 8001daa:	1ac9      	subs	r1, r1, r3
 8001dac:	460b      	mov	r3, r1
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	1a5b      	subs	r3, r3, r1
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	1ad1      	subs	r1, r2, r3
 8001db6:	b2ca      	uxtb	r2, r1
 8001db8:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <setAlarm+0xf0>)
 8001dba:	701a      	strb	r2, [r3, #0]


    }

    if (isButtonDown()) {
 8001dbc:	f7ff fdde 	bl	800197c <isButtonDown>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d017      	beq.n	8001df6 <setAlarm+0xa2>
        adjust_part = (adjust_part + 1) % 2;  // Move to next part
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <setAlarm+0xe4>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	bfb8      	it	lt
 8001dd4:	425b      	neglt	r3, r3
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <setAlarm+0xe4>)
 8001dda:	701a      	strb	r2, [r3, #0]

        if (adjust_part == 0) {
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <setAlarm+0xe4>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d108      	bne.n	8001df6 <setAlarm+0xa2>
            current_mode = DISPLAY_MODE; // Return to view mode
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <setAlarm+0xf8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
            lcd_Clear(BLACK);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7fe ff6e 	bl	8000ccc <lcd_Clear>
            alarm_active = 1;
 8001df0:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <setAlarm+0xfc>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
        }
    }

    // Display alarm time
    lcd_ShowIntNum(70, 100, alarm_hours, 2, YELLOW, BLACK, 24);
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <setAlarm+0xe8>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	2318      	movs	r3, #24
 8001dfe:	9302      	str	r3, [sp, #8]
 8001e00:	2300      	movs	r3, #0
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	2164      	movs	r1, #100	; 0x64
 8001e0e:	2046      	movs	r0, #70	; 0x46
 8001e10:	f7ff f8d0 	bl	8000fb4 <lcd_ShowIntNum>
    lcd_ShowIntNum(110, 100, alarm_minutes, 2, YELLOW, BLACK, 24);
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <setAlarm+0xf0>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	2318      	movs	r3, #24
 8001e1c:	9302      	str	r3, [sp, #8]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2302      	movs	r3, #2
 8001e2a:	2164      	movs	r1, #100	; 0x64
 8001e2c:	206e      	movs	r0, #110	; 0x6e
 8001e2e:	f7ff f8c1 	bl	8000fb4 <lcd_ShowIntNum>

}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000048 	.word	0x20000048
 8001e3c:	20000049 	.word	0x20000049
 8001e40:	2aaaaaab 	.word	0x2aaaaaab
 8001e44:	2000004a 	.word	0x2000004a
 8001e48:	88888889 	.word	0x88888889
 8001e4c:	20000047 	.word	0x20000047
 8001e50:	20000008 	.word	0x20000008

08001e54 <checkAlarm>:
uint8_t flash_counter = 0;
void checkAlarm() {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af02      	add	r7, sp, #8
    ds3231_ReadTime();
 8001e5a:	f7fe fc17 	bl	800068c <ds3231_ReadTime>

    // Check if it's time for the alarm to trigger
    if (ds3231_hours == alarm_hours && ds3231_min == alarm_minutes) {
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <checkAlarm+0x70>)
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <checkAlarm+0x74>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d124      	bne.n	8001eb4 <checkAlarm+0x60>
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <checkAlarm+0x78>)
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <checkAlarm+0x7c>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d11e      	bne.n	8001eb4 <checkAlarm+0x60>
        flash_counter++;  // Increment the flash counter every time checkAlarm is called
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <checkAlarm+0x80>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <checkAlarm+0x80>)
 8001e80:	701a      	strb	r2, [r3, #0]

        // Flash red screen every 5 seconds
        if (flash_counter >= 20) {
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <checkAlarm+0x80>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b13      	cmp	r3, #19
 8001e88:	d918      	bls.n	8001ebc <checkAlarm+0x68>
            lcd_Fill(0, 0, 240, 320, RED);  // Flash red screen
 8001e8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e94:	22f0      	movs	r2, #240	; 0xf0
 8001e96:	2100      	movs	r1, #0
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7fe ff51 	bl	8000d40 <lcd_Fill>
            flash_counter = 0;  // Reset the counter after flashing
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <checkAlarm+0x80>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
            if(flash_counter == 0){
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <checkAlarm+0x80>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d107      	bne.n	8001ebc <checkAlarm+0x68>
            	lcd_Clear(BLACK);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7fe ff0d 	bl	8000ccc <lcd_Clear>
        if (flash_counter >= 20) {
 8001eb2:	e003      	b.n	8001ebc <checkAlarm+0x68>
            }
        }
    } else {
        flash_counter = 0;  // Reset counter if not in alarm time
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <checkAlarm+0x80>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
    }
}
 8001eba:	e000      	b.n	8001ebe <checkAlarm+0x6a>
        if (flash_counter >= 20) {
 8001ebc:	bf00      	nop
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000081 	.word	0x20000081
 8001ec8:	20000049 	.word	0x20000049
 8001ecc:	2000007e 	.word	0x2000007e
 8001ed0:	2000004a 	.word	0x2000004a
 8001ed4:	20000052 	.word	0x20000052

08001ed8 <resendRequest>:

void resendRequest() {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
    switch (adjust_part) {
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <resendRequest+0x48>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d014      	beq.n	8001f0e <resendRequest+0x36>
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	dc19      	bgt.n	8001f1c <resendRequest+0x44>
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <resendRequest+0x1a>
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d007      	beq.n	8001f00 <resendRequest+0x28>
        case 0: HAL_UART_Transmit(&huart1, (uint8_t *)"Request Hour\n", 13, 10); break;
        case 1: HAL_UART_Transmit(&huart1, (uint8_t *)"Request Min\n", 12, 10); break;
        case 2: HAL_UART_Transmit(&huart1, (uint8_t *)"Request Sec\n", 12, 10); break;
    }
}
 8001ef0:	e014      	b.n	8001f1c <resendRequest+0x44>
        case 0: HAL_UART_Transmit(&huart1, (uint8_t *)"Request Hour\n", 13, 10); break;
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	220d      	movs	r2, #13
 8001ef6:	490b      	ldr	r1, [pc, #44]	; (8001f24 <resendRequest+0x4c>)
 8001ef8:	480b      	ldr	r0, [pc, #44]	; (8001f28 <resendRequest+0x50>)
 8001efa:	f004 f990 	bl	800621e <HAL_UART_Transmit>
 8001efe:	e00d      	b.n	8001f1c <resendRequest+0x44>
        case 1: HAL_UART_Transmit(&huart1, (uint8_t *)"Request Min\n", 12, 10); break;
 8001f00:	230a      	movs	r3, #10
 8001f02:	220c      	movs	r2, #12
 8001f04:	4909      	ldr	r1, [pc, #36]	; (8001f2c <resendRequest+0x54>)
 8001f06:	4808      	ldr	r0, [pc, #32]	; (8001f28 <resendRequest+0x50>)
 8001f08:	f004 f989 	bl	800621e <HAL_UART_Transmit>
 8001f0c:	e006      	b.n	8001f1c <resendRequest+0x44>
        case 2: HAL_UART_Transmit(&huart1, (uint8_t *)"Request Sec\n", 12, 10); break;
 8001f0e:	230a      	movs	r3, #10
 8001f10:	220c      	movs	r2, #12
 8001f12:	4907      	ldr	r1, [pc, #28]	; (8001f30 <resendRequest+0x58>)
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <resendRequest+0x50>)
 8001f16:	f004 f982 	bl	800621e <HAL_UART_Transmit>
 8001f1a:	bf00      	nop
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000048 	.word	0x20000048
 8001f24:	08007388 	.word	0x08007388
 8001f28:	20000218 	.word	0x20000218
 8001f2c:	08007398 	.word	0x08007398
 8001f30:	080073a8 	.word	0x080073a8

08001f34 <adjustTimeRS232>:




void adjustTimeRS232(void){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af04      	add	r7, sp, #16
	counter_blink = (counter_blink + 1)%10;
 8001f3a:	4b99      	ldr	r3, [pc, #612]	; (80021a0 <adjustTimeRS232+0x26c>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	4b98      	ldr	r3, [pc, #608]	; (80021a4 <adjustTimeRS232+0x270>)
 8001f42:	fb83 1302 	smull	r1, r3, r3, r2
 8001f46:	1099      	asrs	r1, r3, #2
 8001f48:	17d3      	asrs	r3, r2, #31
 8001f4a:	1ac9      	subs	r1, r1, r3
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	1ad1      	subs	r1, r2, r3
 8001f56:	b2ca      	uxtb	r2, r1
 8001f58:	4b91      	ldr	r3, [pc, #580]	; (80021a0 <adjustTimeRS232+0x26c>)
 8001f5a:	701a      	strb	r2, [r3, #0]
	timeout_counter = (timeout_counter + 1)%TIMEOUT;
 8001f5c:	4b92      	ldr	r3, [pc, #584]	; (80021a8 <adjustTimeRS232+0x274>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	4a92      	ldr	r2, [pc, #584]	; (80021ac <adjustTimeRS232+0x278>)
 8001f64:	fb82 1203 	smull	r1, r2, r2, r3
 8001f68:	1151      	asrs	r1, r2, #5
 8001f6a:	17da      	asrs	r2, r3, #31
 8001f6c:	1a8a      	subs	r2, r1, r2
 8001f6e:	2164      	movs	r1, #100	; 0x64
 8001f70:	fb01 f202 	mul.w	r2, r1, r2
 8001f74:	1a9a      	subs	r2, r3, r2
 8001f76:	b292      	uxth	r2, r2
 8001f78:	4b8b      	ldr	r3, [pc, #556]	; (80021a8 <adjustTimeRS232+0x274>)
 8001f7a:	801a      	strh	r2, [r3, #0]



	    if (isButtonDown()) {
 8001f7c:	f7ff fcfe 	bl	800197c <isButtonDown>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d02a      	beq.n	8001fdc <adjustTimeRS232+0xa8>
	        adjust_part = (adjust_part + 1) % 3;  // Rotate through hours, minutes, seconds
 8001f86:	4b8a      	ldr	r3, [pc, #552]	; (80021b0 <adjustTimeRS232+0x27c>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	4b89      	ldr	r3, [pc, #548]	; (80021b4 <adjustTimeRS232+0x280>)
 8001f8e:	fb83 3102 	smull	r3, r1, r3, r2
 8001f92:	17d3      	asrs	r3, r2, #31
 8001f94:	1ac9      	subs	r1, r1, r3
 8001f96:	460b      	mov	r3, r1
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	440b      	add	r3, r1
 8001f9c:	1ad1      	subs	r1, r2, r3
 8001f9e:	b2ca      	uxtb	r2, r1
 8001fa0:	4b83      	ldr	r3, [pc, #524]	; (80021b0 <adjustTimeRS232+0x27c>)
 8001fa2:	701a      	strb	r2, [r3, #0]

	        if (adjust_part == 0) {
 8001fa4:	4b82      	ldr	r3, [pc, #520]	; (80021b0 <adjustTimeRS232+0x27c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d117      	bne.n	8001fdc <adjustTimeRS232+0xa8>
	        	ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8001fac:	4b82      	ldr	r3, [pc, #520]	; (80021b8 <adjustTimeRS232+0x284>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	f7fe fb48 	bl	8000648 <ds3231_Write>
				ds3231_Write(ADDRESS_MIN, ds3231_min);
 8001fb8:	4b80      	ldr	r3, [pc, #512]	; (80021bc <adjustTimeRS232+0x288>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f7fe fb42 	bl	8000648 <ds3231_Write>
				ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001fc4:	4b7e      	ldr	r3, [pc, #504]	; (80021c0 <adjustTimeRS232+0x28c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7fe fb3c 	bl	8000648 <ds3231_Write>
	            current_mode = DISPLAY_MODE;
 8001fd0:	4b7c      	ldr	r3, [pc, #496]	; (80021c4 <adjustTimeRS232+0x290>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
	            lcd_Clear(BLACK);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7fe fe78 	bl	8000ccc <lcd_Clear>
	        }
	    }

	    if (data_available_flag) {
 8001fdc:	4b7a      	ldr	r3, [pc, #488]	; (80021c8 <adjustTimeRS232+0x294>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <adjustTimeRS232+0xba>
	        data_available_flag = 0;
 8001fe4:	4b78      	ldr	r3, [pc, #480]	; (80021c8 <adjustTimeRS232+0x294>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
	        ProcessRingBufferData();
 8001fea:	f000 f8f5 	bl	80021d8 <ProcessRingBufferData>
	    }

	    if (timeout_counter ==0) {  // 5 seconds elapsed
 8001fee:	4b6e      	ldr	r3, [pc, #440]	; (80021a8 <adjustTimeRS232+0x274>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d118      	bne.n	8002028 <adjustTimeRS232+0xf4>
	        if (attempt_count < MAX_ATTEMPTS) {
 8001ff6:	4b75      	ldr	r3, [pc, #468]	; (80021cc <adjustTimeRS232+0x298>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d80b      	bhi.n	8002016 <adjustTimeRS232+0xe2>
	            resendRequest();
 8001ffe:	f7ff ff6b 	bl	8001ed8 <resendRequest>
	            timeout_counter = 0;  // Reset counter after resend
 8002002:	4b69      	ldr	r3, [pc, #420]	; (80021a8 <adjustTimeRS232+0x274>)
 8002004:	2200      	movs	r2, #0
 8002006:	801a      	strh	r2, [r3, #0]
	            attempt_count++;
 8002008:	4b70      	ldr	r3, [pc, #448]	; (80021cc <adjustTimeRS232+0x298>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b6e      	ldr	r3, [pc, #440]	; (80021cc <adjustTimeRS232+0x298>)
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	e008      	b.n	8002028 <adjustTimeRS232+0xf4>

	        }
	        else{
	            current_mode = ADJUST_RS232_Mode_ERROR;
 8002016:	4b6b      	ldr	r3, [pc, #428]	; (80021c4 <adjustTimeRS232+0x290>)
 8002018:	2204      	movs	r2, #4
 800201a:	701a      	strb	r2, [r3, #0]
	            lcd_Clear(BLACK);
 800201c:	2000      	movs	r0, #0
 800201e:	f7fe fe55 	bl	8000ccc <lcd_Clear>
	            error_display_counter = 0;
 8002022:	4b6b      	ldr	r3, [pc, #428]	; (80021d0 <adjustTimeRS232+0x29c>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
	        }

	    }

	    //Blink with 0.5 second
	    if (adjust_part == 0) {
 8002028:	4b61      	ldr	r3, [pc, #388]	; (80021b0 <adjustTimeRS232+0x27c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d13a      	bne.n	80020a6 <adjustTimeRS232+0x172>
	    	if(counter_blink ==0 &&blink_flag ==0)
 8002030:	4b5b      	ldr	r3, [pc, #364]	; (80021a0 <adjustTimeRS232+0x26c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d118      	bne.n	800206a <adjustTimeRS232+0x136>
 8002038:	4b66      	ldr	r3, [pc, #408]	; (80021d4 <adjustTimeRS232+0x2a0>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d114      	bne.n	800206a <adjustTimeRS232+0x136>
	    	{
	    		displayTime();
 8002040:	f7ff fcac 	bl	800199c <displayTime>
	    		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8002044:	4b5c      	ldr	r3, [pc, #368]	; (80021b8 <adjustTimeRS232+0x284>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	b29a      	uxth	r2, r3
 800204a:	2318      	movs	r3, #24
 800204c:	9302      	str	r3, [sp, #8]
 800204e:	2300      	movs	r3, #0
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2302      	movs	r3, #2
 800205a:	2164      	movs	r1, #100	; 0x64
 800205c:	2046      	movs	r0, #70	; 0x46
 800205e:	f7fe ffa9 	bl	8000fb4 <lcd_ShowIntNum>
	    		blink_flag =1;
 8002062:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <adjustTimeRS232+0x2a0>)
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	e097      	b.n	800219a <adjustTimeRS232+0x266>
	    	}
	    	else if (counter_blink ==0 &&blink_flag ==1){
 800206a:	4b4d      	ldr	r3, [pc, #308]	; (80021a0 <adjustTimeRS232+0x26c>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f040 8093 	bne.w	800219a <adjustTimeRS232+0x266>
 8002074:	4b57      	ldr	r3, [pc, #348]	; (80021d4 <adjustTimeRS232+0x2a0>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	f040 808e 	bne.w	800219a <adjustTimeRS232+0x266>
	    		displayTime();
 800207e:	f7ff fc8d 	bl	800199c <displayTime>
	    		lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 8002082:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <adjustTimeRS232+0x284>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	b29a      	uxth	r2, r3
 8002088:	2318      	movs	r3, #24
 800208a:	9302      	str	r3, [sp, #8]
 800208c:	2300      	movs	r3, #0
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2300      	movs	r3, #0
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	2302      	movs	r3, #2
 8002096:	2164      	movs	r1, #100	; 0x64
 8002098:	2046      	movs	r0, #70	; 0x46
 800209a:	f7fe ff8b 	bl	8000fb4 <lcd_ShowIntNum>
	    		blink_flag =0;
 800209e:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <adjustTimeRS232+0x2a0>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
	    		displayTime();
	    		lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
	    		blink_flag =0;
	    	}
	    }
}
 80020a4:	e079      	b.n	800219a <adjustTimeRS232+0x266>
	    else if (adjust_part == 1) {
 80020a6:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <adjustTimeRS232+0x27c>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d138      	bne.n	8002120 <adjustTimeRS232+0x1ec>
	    	if(counter_blink ==0 &&blink_flag ==0)
 80020ae:	4b3c      	ldr	r3, [pc, #240]	; (80021a0 <adjustTimeRS232+0x26c>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d118      	bne.n	80020e8 <adjustTimeRS232+0x1b4>
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <adjustTimeRS232+0x2a0>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d114      	bne.n	80020e8 <adjustTimeRS232+0x1b4>
	    		displayTime();
 80020be:	f7ff fc6d 	bl	800199c <displayTime>
	    		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80020c2:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <adjustTimeRS232+0x288>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	2318      	movs	r3, #24
 80020ca:	9302      	str	r3, [sp, #8]
 80020cc:	2300      	movs	r3, #0
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2302      	movs	r3, #2
 80020d8:	2164      	movs	r1, #100	; 0x64
 80020da:	206e      	movs	r0, #110	; 0x6e
 80020dc:	f7fe ff6a 	bl	8000fb4 <lcd_ShowIntNum>
	    		blink_flag =1;
 80020e0:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <adjustTimeRS232+0x2a0>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e058      	b.n	800219a <adjustTimeRS232+0x266>
	    	else if (counter_blink ==0 &&blink_flag ==1){
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <adjustTimeRS232+0x26c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d154      	bne.n	800219a <adjustTimeRS232+0x266>
 80020f0:	4b38      	ldr	r3, [pc, #224]	; (80021d4 <adjustTimeRS232+0x2a0>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d150      	bne.n	800219a <adjustTimeRS232+0x266>
	    		displayTime();
 80020f8:	f7ff fc50 	bl	800199c <displayTime>
	    		lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 80020fc:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <adjustTimeRS232+0x288>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b29a      	uxth	r2, r3
 8002102:	2318      	movs	r3, #24
 8002104:	9302      	str	r3, [sp, #8]
 8002106:	2300      	movs	r3, #0
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	2300      	movs	r3, #0
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2302      	movs	r3, #2
 8002110:	2164      	movs	r1, #100	; 0x64
 8002112:	206e      	movs	r0, #110	; 0x6e
 8002114:	f7fe ff4e 	bl	8000fb4 <lcd_ShowIntNum>
	    		blink_flag =0;
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <adjustTimeRS232+0x2a0>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
}
 800211e:	e03c      	b.n	800219a <adjustTimeRS232+0x266>
	    else if (adjust_part == 2) {
 8002120:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <adjustTimeRS232+0x27c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d138      	bne.n	800219a <adjustTimeRS232+0x266>
	    	if(counter_blink ==0 &&blink_flag ==0)
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <adjustTimeRS232+0x26c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d118      	bne.n	8002162 <adjustTimeRS232+0x22e>
 8002130:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <adjustTimeRS232+0x2a0>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d114      	bne.n	8002162 <adjustTimeRS232+0x22e>
	    		displayTime();
 8002138:	f7ff fc30 	bl	800199c <displayTime>
	    		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <adjustTimeRS232+0x28c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b29a      	uxth	r2, r3
 8002142:	2318      	movs	r3, #24
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	2300      	movs	r3, #0
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2302      	movs	r3, #2
 8002152:	2164      	movs	r1, #100	; 0x64
 8002154:	2096      	movs	r0, #150	; 0x96
 8002156:	f7fe ff2d 	bl	8000fb4 <lcd_ShowIntNum>
	    		blink_flag =1;
 800215a:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <adjustTimeRS232+0x2a0>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	e01b      	b.n	800219a <adjustTimeRS232+0x266>
	    	else if(counter_blink ==0 &&blink_flag ==1){
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <adjustTimeRS232+0x26c>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d117      	bne.n	800219a <adjustTimeRS232+0x266>
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <adjustTimeRS232+0x2a0>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d113      	bne.n	800219a <adjustTimeRS232+0x266>
	    		displayTime();
 8002172:	f7ff fc13 	bl	800199c <displayTime>
	    		lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <adjustTimeRS232+0x28c>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b29a      	uxth	r2, r3
 800217c:	2318      	movs	r3, #24
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	2300      	movs	r3, #0
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	2300      	movs	r3, #0
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2302      	movs	r3, #2
 800218a:	2164      	movs	r1, #100	; 0x64
 800218c:	2096      	movs	r0, #150	; 0x96
 800218e:	f7fe ff11 	bl	8000fb4 <lcd_ShowIntNum>
	    		blink_flag =0;
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <adjustTimeRS232+0x2a0>)
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
}
 8002198:	e7ff      	b.n	800219a <adjustTimeRS232+0x266>
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000040 	.word	0x20000040
 80021a4:	66666667 	.word	0x66666667
 80021a8:	20000006 	.word	0x20000006
 80021ac:	51eb851f 	.word	0x51eb851f
 80021b0:	20000048 	.word	0x20000048
 80021b4:	55555556 	.word	0x55555556
 80021b8:	20000081 	.word	0x20000081
 80021bc:	2000007e 	.word	0x2000007e
 80021c0:	2000007c 	.word	0x2000007c
 80021c4:	20000047 	.word	0x20000047
 80021c8:	20000046 	.word	0x20000046
 80021cc:	2000004c 	.word	0x2000004c
 80021d0:	20000050 	.word	0x20000050
 80021d4:	20000041 	.word	0x20000041

080021d8 <ProcessRingBufferData>:
void ProcessRingBufferData() {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
    while (tail != head) {
 80021de:	e0d8      	b.n	8002392 <ProcessRingBufferData+0x1ba>
        uint8_t data = ring_buffer[tail];
 80021e0:	4b72      	ldr	r3, [pc, #456]	; (80023ac <ProcessRingBufferData+0x1d4>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b72      	ldr	r3, [pc, #456]	; (80023b0 <ProcessRingBufferData+0x1d8>)
 80021e8:	5c9b      	ldrb	r3, [r3, r2]
 80021ea:	71fb      	strb	r3, [r7, #7]
        tail = (tail + 1) % RING_BUFFER_SIZE;
 80021ec:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <ProcessRingBufferData+0x1d4>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	4b70      	ldr	r3, [pc, #448]	; (80023b4 <ProcessRingBufferData+0x1dc>)
 80021f4:	fb83 1302 	smull	r1, r3, r3, r2
 80021f8:	1099      	asrs	r1, r3, #2
 80021fa:	17d3      	asrs	r3, r2, #31
 80021fc:	1ac9      	subs	r1, r1, r3
 80021fe:	460b      	mov	r3, r1
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	1ad1      	subs	r1, r2, r3
 8002208:	b28a      	uxth	r2, r1
 800220a:	4b68      	ldr	r3, [pc, #416]	; (80023ac <ProcessRingBufferData+0x1d4>)
 800220c:	801a      	strh	r2, [r3, #0]

        if (data >= '0' && data <= '9') {
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	2b2f      	cmp	r3, #47	; 0x2f
 8002212:	f240 80b8 	bls.w	8002386 <ProcessRingBufferData+0x1ae>
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	2b39      	cmp	r3, #57	; 0x39
 800221a:	f200 80b4 	bhi.w	8002386 <ProcessRingBufferData+0x1ae>
            temp_value = temp_value * 10 + (data - '0');
 800221e:	4b66      	ldr	r3, [pc, #408]	; (80023b8 <ProcessRingBufferData+0x1e0>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	0092      	lsls	r2, r2, #2
 8002226:	4413      	add	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	b2da      	uxtb	r2, r3
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	4413      	add	r3, r2
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3b30      	subs	r3, #48	; 0x30
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b60      	ldr	r3, [pc, #384]	; (80023b8 <ProcessRingBufferData+0x1e0>)
 8002238:	701a      	strb	r2, [r3, #0]
            digit_count++;
 800223a:	4b60      	ldr	r3, [pc, #384]	; (80023bc <ProcessRingBufferData+0x1e4>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	3301      	adds	r3, #1
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4b5e      	ldr	r3, [pc, #376]	; (80023bc <ProcessRingBufferData+0x1e4>)
 8002244:	701a      	strb	r2, [r3, #0]

            // Check if we have enough digits or an early validation for hours > 2
            if (digit_count == 2 || (adjust_part == 0 && temp_value > 2)) {
 8002246:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <ProcessRingBufferData+0x1e4>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d009      	beq.n	8002262 <ProcessRingBufferData+0x8a>
 800224e:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <ProcessRingBufferData+0x1e8>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 809d 	bne.w	8002392 <ProcessRingBufferData+0x1ba>
 8002258:	4b57      	ldr	r3, [pc, #348]	; (80023b8 <ProcessRingBufferData+0x1e0>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b02      	cmp	r3, #2
 800225e:	f240 8098 	bls.w	8002392 <ProcessRingBufferData+0x1ba>
                // Check if temp_value is within valid ranges for each part
                if ((adjust_part == 0 && (temp_value < 0 || temp_value > 23)) ||   // Check hours (0-23)
 8002262:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <ProcessRingBufferData+0x1e8>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d103      	bne.n	8002272 <ProcessRingBufferData+0x9a>
 800226a:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <ProcessRingBufferData+0x1e0>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b17      	cmp	r3, #23
 8002270:	d80f      	bhi.n	8002292 <ProcessRingBufferData+0xba>
                    (adjust_part == 1 && (temp_value < 0 || temp_value > 59)) ||   // Check minutes (0-59)
 8002272:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <ProcessRingBufferData+0x1e8>)
 8002274:	781b      	ldrb	r3, [r3, #0]
                if ((adjust_part == 0 && (temp_value < 0 || temp_value > 23)) ||   // Check hours (0-23)
 8002276:	2b01      	cmp	r3, #1
 8002278:	d103      	bne.n	8002282 <ProcessRingBufferData+0xaa>
                    (adjust_part == 1 && (temp_value < 0 || temp_value > 59)) ||   // Check minutes (0-59)
 800227a:	4b4f      	ldr	r3, [pc, #316]	; (80023b8 <ProcessRingBufferData+0x1e0>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b3b      	cmp	r3, #59	; 0x3b
 8002280:	d807      	bhi.n	8002292 <ProcessRingBufferData+0xba>
                    (adjust_part == 2 && (temp_value < 0 || temp_value > 59))) {   // Check seconds (0-59)
 8002282:	4b4f      	ldr	r3, [pc, #316]	; (80023c0 <ProcessRingBufferData+0x1e8>)
 8002284:	781b      	ldrb	r3, [r3, #0]
                    (adjust_part == 1 && (temp_value < 0 || temp_value > 59)) ||   // Check minutes (0-59)
 8002286:	2b02      	cmp	r3, #2
 8002288:	d110      	bne.n	80022ac <ProcessRingBufferData+0xd4>
                    (adjust_part == 2 && (temp_value < 0 || temp_value > 59))) {   // Check seconds (0-59)
 800228a:	4b4b      	ldr	r3, [pc, #300]	; (80023b8 <ProcessRingBufferData+0x1e0>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b3b      	cmp	r3, #59	; 0x3b
 8002290:	d90c      	bls.n	80022ac <ProcessRingBufferData+0xd4>

                    // Invalid value, send error message and reset inputs
                    HAL_UART_Transmit(&huart1, (uint8_t *)"Wrong resend\n", 13, 10);
 8002292:	230a      	movs	r3, #10
 8002294:	220d      	movs	r2, #13
 8002296:	494b      	ldr	r1, [pc, #300]	; (80023c4 <ProcessRingBufferData+0x1ec>)
 8002298:	484b      	ldr	r0, [pc, #300]	; (80023c8 <ProcessRingBufferData+0x1f0>)
 800229a:	f003 ffc0 	bl	800621e <HAL_UART_Transmit>
                    temp_value = 0;
 800229e:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <ProcessRingBufferData+0x1e0>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
                    digit_count = 0;
 80022a4:	4b45      	ldr	r3, [pc, #276]	; (80023bc <ProcessRingBufferData+0x1e4>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
                    continue;
 80022aa:	e072      	b.n	8002392 <ProcessRingBufferData+0x1ba>
                }

                // Set the appropriate time part
                switch (adjust_part) {
 80022ac:	4b44      	ldr	r3, [pc, #272]	; (80023c0 <ProcessRingBufferData+0x1e8>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d01c      	beq.n	80022ee <ProcessRingBufferData+0x116>
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	dc25      	bgt.n	8002304 <ProcessRingBufferData+0x12c>
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <ProcessRingBufferData+0xea>
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d00b      	beq.n	80022d8 <ProcessRingBufferData+0x100>
 80022c0:	e020      	b.n	8002304 <ProcessRingBufferData+0x12c>
                    case 0:
                        ds3231_hours = temp_value;  // Valid hour
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <ProcessRingBufferData+0x1e0>)
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	4b41      	ldr	r3, [pc, #260]	; (80023cc <ProcessRingBufferData+0x1f4>)
 80022c8:	701a      	strb	r2, [r3, #0]
                        HAL_UART_Transmit(&huart1, (uint8_t *)"Hour Set\n", 9, 10);
 80022ca:	230a      	movs	r3, #10
 80022cc:	2209      	movs	r2, #9
 80022ce:	4940      	ldr	r1, [pc, #256]	; (80023d0 <ProcessRingBufferData+0x1f8>)
 80022d0:	483d      	ldr	r0, [pc, #244]	; (80023c8 <ProcessRingBufferData+0x1f0>)
 80022d2:	f003 ffa4 	bl	800621e <HAL_UART_Transmit>
                        break;
 80022d6:	e015      	b.n	8002304 <ProcessRingBufferData+0x12c>
                    case 1:
                        ds3231_min = temp_value;  // Valid minute
 80022d8:	4b37      	ldr	r3, [pc, #220]	; (80023b8 <ProcessRingBufferData+0x1e0>)
 80022da:	781a      	ldrb	r2, [r3, #0]
 80022dc:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <ProcessRingBufferData+0x1fc>)
 80022de:	701a      	strb	r2, [r3, #0]
                        HAL_UART_Transmit(&huart1, (uint8_t *)"Minute Set\n", 11, 10);
 80022e0:	230a      	movs	r3, #10
 80022e2:	220b      	movs	r2, #11
 80022e4:	493c      	ldr	r1, [pc, #240]	; (80023d8 <ProcessRingBufferData+0x200>)
 80022e6:	4838      	ldr	r0, [pc, #224]	; (80023c8 <ProcessRingBufferData+0x1f0>)
 80022e8:	f003 ff99 	bl	800621e <HAL_UART_Transmit>
                        break;
 80022ec:	e00a      	b.n	8002304 <ProcessRingBufferData+0x12c>
                    case 2:
                        ds3231_sec = temp_value;  // Valid second
 80022ee:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <ProcessRingBufferData+0x1e0>)
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <ProcessRingBufferData+0x204>)
 80022f4:	701a      	strb	r2, [r3, #0]
                        HAL_UART_Transmit(&huart1, (uint8_t *)"Second Set\n", 11, 10);
 80022f6:	230a      	movs	r3, #10
 80022f8:	220b      	movs	r2, #11
 80022fa:	4939      	ldr	r1, [pc, #228]	; (80023e0 <ProcessRingBufferData+0x208>)
 80022fc:	4832      	ldr	r0, [pc, #200]	; (80023c8 <ProcessRingBufferData+0x1f0>)
 80022fe:	f003 ff8e 	bl	800621e <HAL_UART_Transmit>
                        break;
 8002302:	bf00      	nop
                }

                // Reset temporary variables on valid data
                attempt_count = 0;
 8002304:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <ProcessRingBufferData+0x20c>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
                timeout_counter = 0;
 800230a:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <ProcessRingBufferData+0x210>)
 800230c:	2200      	movs	r2, #0
 800230e:	801a      	strh	r2, [r3, #0]
                request_sent = 0;
 8002310:	4b36      	ldr	r3, [pc, #216]	; (80023ec <ProcessRingBufferData+0x214>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
                temp_value = 0;
 8002316:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <ProcessRingBufferData+0x1e0>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
                digit_count = 0;
 800231c:	4b27      	ldr	r3, [pc, #156]	; (80023bc <ProcessRingBufferData+0x1e4>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]

                // Move to the next part
                adjust_part = (adjust_part + 1) % 3;
 8002322:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <ProcessRingBufferData+0x1e8>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <ProcessRingBufferData+0x218>)
 800232a:	fb83 3102 	smull	r3, r1, r3, r2
 800232e:	17d3      	asrs	r3, r2, #31
 8002330:	1ac9      	subs	r1, r1, r3
 8002332:	460b      	mov	r3, r1
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	440b      	add	r3, r1
 8002338:	1ad1      	subs	r1, r2, r3
 800233a:	b2ca      	uxtb	r2, r1
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <ProcessRingBufferData+0x1e8>)
 800233e:	701a      	strb	r2, [r3, #0]

                // If finished adjusting all parts, save and exit
                if (adjust_part == 0) {
 8002340:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <ProcessRingBufferData+0x1e8>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d124      	bne.n	8002392 <ProcessRingBufferData+0x1ba>
                    ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8002348:	4b20      	ldr	r3, [pc, #128]	; (80023cc <ProcessRingBufferData+0x1f4>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
 800234e:	2002      	movs	r0, #2
 8002350:	f7fe f97a 	bl	8000648 <ds3231_Write>
                    ds3231_Write(ADDRESS_MIN, ds3231_min);
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <ProcessRingBufferData+0x1fc>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	2001      	movs	r0, #1
 800235c:	f7fe f974 	bl	8000648 <ds3231_Write>
                    ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8002360:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <ProcessRingBufferData+0x204>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4619      	mov	r1, r3
 8002366:	2000      	movs	r0, #0
 8002368:	f7fe f96e 	bl	8000648 <ds3231_Write>
                    current_mode = DISPLAY_MODE;
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <ProcessRingBufferData+0x21c>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
                    lcd_Clear(BLACK);
 8002372:	2000      	movs	r0, #0
 8002374:	f7fe fcaa 	bl	8000ccc <lcd_Clear>
                    HAL_UART_Transmit(&huart1, (uint8_t *)"Time Adjusted\n", 14, 10);
 8002378:	230a      	movs	r3, #10
 800237a:	220e      	movs	r2, #14
 800237c:	491e      	ldr	r1, [pc, #120]	; (80023f8 <ProcessRingBufferData+0x220>)
 800237e:	4812      	ldr	r0, [pc, #72]	; (80023c8 <ProcessRingBufferData+0x1f0>)
 8002380:	f003 ff4d 	bl	800621e <HAL_UART_Transmit>
            if (digit_count == 2 || (adjust_part == 0 && temp_value > 2)) {
 8002384:	e005      	b.n	8002392 <ProcessRingBufferData+0x1ba>
                }
            }
        } else {
            // Non-numeric data received, send error message
            HAL_UART_Transmit(&huart1, (uint8_t *)"Wrong resend\n", 13, 10);
 8002386:	230a      	movs	r3, #10
 8002388:	220d      	movs	r2, #13
 800238a:	490e      	ldr	r1, [pc, #56]	; (80023c4 <ProcessRingBufferData+0x1ec>)
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <ProcessRingBufferData+0x1f0>)
 800238e:	f003 ff46 	bl	800621e <HAL_UART_Transmit>
    while (tail != head) {
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <ProcessRingBufferData+0x1d4>)
 8002394:	881a      	ldrh	r2, [r3, #0]
 8002396:	4b19      	ldr	r3, [pc, #100]	; (80023fc <ProcessRingBufferData+0x224>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	f47f af20 	bne.w	80021e0 <ProcessRingBufferData+0x8>
        }
    }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000044 	.word	0x20000044
 80023b0:	2000016c 	.word	0x2000016c
 80023b4:	66666667 	.word	0x66666667
 80023b8:	2000004d 	.word	0x2000004d
 80023bc:	2000004e 	.word	0x2000004e
 80023c0:	20000048 	.word	0x20000048
 80023c4:	080073b8 	.word	0x080073b8
 80023c8:	20000218 	.word	0x20000218
 80023cc:	20000081 	.word	0x20000081
 80023d0:	080073c8 	.word	0x080073c8
 80023d4:	2000007e 	.word	0x2000007e
 80023d8:	080073d4 	.word	0x080073d4
 80023dc:	2000007c 	.word	0x2000007c
 80023e0:	080073e0 	.word	0x080073e0
 80023e4:	2000004c 	.word	0x2000004c
 80023e8:	20000006 	.word	0x20000006
 80023ec:	2000004f 	.word	0x2000004f
 80023f0:	55555556 	.word	0x55555556
 80023f4:	20000047 	.word	0x20000047
 80023f8:	080073ec 	.word	0x080073ec
 80023fc:	20000042 	.word	0x20000042

08002400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002404:	b672      	cpsid	i
}
 8002406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002408:	e7fe      	b.n	8002408 <Error_Handler+0x8>
	...

0800240c <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <timer_init+0x10>)
 8002412:	f003 fa85 	bl	8005920 <HAL_TIM_Base_Start_IT>
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200001d0 	.word	0x200001d0

08002420 <setTimer2>:

void setTimer2(uint16_t duration){
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800242a:	4a08      	ldr	r2, [pc, #32]	; (800244c <setTimer2+0x2c>)
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <setTimer2+0x2c>)
 8002432:	881a      	ldrh	r2, [r3, #0]
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <setTimer2+0x30>)
 8002436:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <setTimer2+0x34>)
 800243a:	2200      	movs	r2, #0
 800243c:	801a      	strh	r2, [r3, #0]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000058 	.word	0x20000058
 8002450:	20000056 	.word	0x20000056
 8002454:	20000054 	.word	0x20000054

08002458 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002468:	d116      	bne.n	8002498 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d010      	beq.n	8002494 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800247c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002488:	2201      	movs	r2, #1
 800248a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800248e:	881a      	ldrh	r2, [r3, #0]
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002492:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002494:	f7ff f832 	bl	80014fc <led7_Scan>
	}
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000056 	.word	0x20000056
 80024a4:	20000054 	.word	0x20000054
 80024a8:	20000058 	.word	0x20000058

080024ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <MX_SPI1_Init+0x64>)
 80024b2:	4a18      	ldr	r2, [pc, #96]	; (8002514 <MX_SPI1_Init+0x68>)
 80024b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <MX_SPI1_Init+0x64>)
 80024b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <MX_SPI1_Init+0x64>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <MX_SPI1_Init+0x64>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <MX_SPI1_Init+0x64>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <MX_SPI1_Init+0x64>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <MX_SPI1_Init+0x64>)
 80024d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <MX_SPI1_Init+0x64>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <MX_SPI1_Init+0x64>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <MX_SPI1_Init+0x64>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <MX_SPI1_Init+0x64>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <MX_SPI1_Init+0x64>)
 80024f8:	220a      	movs	r2, #10
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024fc:	4804      	ldr	r0, [pc, #16]	; (8002510 <MX_SPI1_Init+0x64>)
 80024fe:	f002 fbd3 	bl	8004ca8 <HAL_SPI_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002508:	f7ff ff7a 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000178 	.word	0x20000178
 8002514:	40013000 	.word	0x40013000

08002518 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <HAL_SPI_MspInit+0x84>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d12b      	bne.n	8002592 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_SPI_MspInit+0x88>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <HAL_SPI_MspInit+0x88>)
 8002544:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002548:	6453      	str	r3, [r2, #68]	; 0x44
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_SPI_MspInit+0x88>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_SPI_MspInit+0x88>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <HAL_SPI_MspInit+0x88>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_SPI_MspInit+0x88>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002572:	2338      	movs	r3, #56	; 0x38
 8002574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002582:	2305      	movs	r3, #5
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	4619      	mov	r1, r3
 800258c:	4805      	ldr	r0, [pc, #20]	; (80025a4 <HAL_SPI_MspInit+0x8c>)
 800258e:	f000 fc73 	bl	8002e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002592:	bf00      	nop
 8002594:	3728      	adds	r7, #40	; 0x28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40013000 	.word	0x40013000
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020400 	.word	0x40020400

080025a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_MspInit+0x4c>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <HAL_MspInit+0x4c>)
 80025b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025bc:	6453      	str	r3, [r2, #68]	; 0x44
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_MspInit+0x4c>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_MspInit+0x4c>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <HAL_MspInit+0x4c>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_MspInit+0x4c>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <NMI_Handler+0x4>

080025fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002602:	e7fe      	b.n	8002602 <HardFault_Handler+0x4>

08002604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002608:	e7fe      	b.n	8002608 <MemManage_Handler+0x4>

0800260a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800260e:	e7fe      	b.n	800260e <BusFault_Handler+0x4>

08002610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <UsageFault_Handler+0x4>

08002616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002644:	f000 fa30 	bl	8002aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}

0800264c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <TIM2_IRQHandler+0x10>)
 8002652:	f003 f9d5 	bl	8005a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200001d0 	.word	0x200001d0

08002660 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <USART1_IRQHandler+0x10>)
 8002666:	f003 fe9d 	bl	80063a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000218 	.word	0x20000218

08002674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <SystemInit+0x20>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <SystemInit+0x20>)
 8002680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269e:	f107 0308 	add.w	r3, r7, #8
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ac:	463b      	mov	r3, r7
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <MX_TIM2_Init+0x94>)
 80026b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <MX_TIM2_Init+0x94>)
 80026be:	f240 3247 	movw	r2, #839	; 0x347
 80026c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <MX_TIM2_Init+0x94>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <MX_TIM2_Init+0x94>)
 80026cc:	2263      	movs	r2, #99	; 0x63
 80026ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d0:	4b16      	ldr	r3, [pc, #88]	; (800272c <MX_TIM2_Init+0x94>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <MX_TIM2_Init+0x94>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026dc:	4813      	ldr	r0, [pc, #76]	; (800272c <MX_TIM2_Init+0x94>)
 80026de:	f003 f8cf 	bl	8005880 <HAL_TIM_Base_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026e8:	f7ff fe8a 	bl	8002400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026f2:	f107 0308 	add.w	r3, r7, #8
 80026f6:	4619      	mov	r1, r3
 80026f8:	480c      	ldr	r0, [pc, #48]	; (800272c <MX_TIM2_Init+0x94>)
 80026fa:	f003 fa89 	bl	8005c10 <HAL_TIM_ConfigClockSource>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002704:	f7ff fe7c 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002708:	2300      	movs	r3, #0
 800270a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002710:	463b      	mov	r3, r7
 8002712:	4619      	mov	r1, r3
 8002714:	4805      	ldr	r0, [pc, #20]	; (800272c <MX_TIM2_Init+0x94>)
 8002716:	f003 fca5 	bl	8006064 <HAL_TIMEx_MasterConfigSynchronization>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002720:	f7ff fe6e 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002724:	bf00      	nop
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200001d0 	.word	0x200001d0

08002730 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002740:	d115      	bne.n	800276e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_TIM_Base_MspInit+0x48>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <HAL_TIM_Base_MspInit+0x48>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6413      	str	r3, [r2, #64]	; 0x40
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_TIM_Base_MspInit+0x48>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	201c      	movs	r0, #28
 8002764:	f000 fabf 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002768:	201c      	movs	r0, #28
 800276a:	f000 fad8 	bl	8002d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800

0800277c <uart_init_rs232>:
uint8_t receive_buffer1 = 0;
uint8_t msg[100];

extern uint16_t head, tail;
extern uint8_t data_available_flag;
void uart_init_rs232(){
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002780:	2201      	movs	r2, #1
 8002782:	4903      	ldr	r1, [pc, #12]	; (8002790 <uart_init_rs232+0x14>)
 8002784:	4803      	ldr	r0, [pc, #12]	; (8002794 <uart_init_rs232+0x18>)
 8002786:	f003 fddc 	bl	8006342 <HAL_UART_Receive_IT>
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000005a 	.word	0x2000005a
 8002794:	20000218 	.word	0x20000218

08002798 <HAL_UART_RxCpltCallback>:
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1e      	ldr	r2, [pc, #120]	; (8002820 <HAL_UART_RxCpltCallback+0x88>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d136      	bne.n	8002818 <HAL_UART_RxCpltCallback+0x80>
        // Add the received byte to the ring buffer
        ring_buffer[head] = receive_buffer1;
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_UART_RxCpltCallback+0x8c>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_UART_RxCpltCallback+0x90>)
 80027b2:	7819      	ldrb	r1, [r3, #0]
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_UART_RxCpltCallback+0x94>)
 80027b6:	5499      	strb	r1, [r3, r2]
        head = (head + 1) % RING_BUFFER_SIZE;
 80027b8:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <HAL_UART_RxCpltCallback+0x8c>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <HAL_UART_RxCpltCallback+0x98>)
 80027c0:	fb83 1302 	smull	r1, r3, r3, r2
 80027c4:	1099      	asrs	r1, r3, #2
 80027c6:	17d3      	asrs	r3, r2, #31
 80027c8:	1ac9      	subs	r1, r1, r3
 80027ca:	460b      	mov	r3, r1
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	1ad1      	subs	r1, r2, r3
 80027d4:	b28a      	uxth	r2, r1
 80027d6:	4b13      	ldr	r3, [pc, #76]	; (8002824 <HAL_UART_RxCpltCallback+0x8c>)
 80027d8:	801a      	strh	r2, [r3, #0]

        // Check if the buffer is full (head == tail indicates overflow)
        if (head == tail) {
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_UART_RxCpltCallback+0x8c>)
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_UART_RxCpltCallback+0x9c>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d110      	bne.n	8002808 <HAL_UART_RxCpltCallback+0x70>
            // Handle overflow: adjust tail to discard oldest data
            tail = (tail + 1) % RING_BUFFER_SIZE;
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <HAL_UART_RxCpltCallback+0x9c>)
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_UART_RxCpltCallback+0x98>)
 80027ee:	fb83 1302 	smull	r1, r3, r3, r2
 80027f2:	1099      	asrs	r1, r3, #2
 80027f4:	17d3      	asrs	r3, r2, #31
 80027f6:	1ac9      	subs	r1, r1, r3
 80027f8:	460b      	mov	r3, r1
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	1ad1      	subs	r1, r2, r3
 8002802:	b28a      	uxth	r2, r1
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_UART_RxCpltCallback+0x9c>)
 8002806:	801a      	strh	r2, [r3, #0]
        }

        // Set flag to indicate new data is available for processing
        data_available_flag = 1;
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_UART_RxCpltCallback+0xa0>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]

        // Re-enable UART interrupt for the next byte
        HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800280e:	2201      	movs	r2, #1
 8002810:	4905      	ldr	r1, [pc, #20]	; (8002828 <HAL_UART_RxCpltCallback+0x90>)
 8002812:	480a      	ldr	r0, [pc, #40]	; (800283c <HAL_UART_RxCpltCallback+0xa4>)
 8002814:	f003 fd95 	bl	8006342 <HAL_UART_Receive_IT>
    }
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40011000 	.word	0x40011000
 8002824:	20000042 	.word	0x20000042
 8002828:	2000005a 	.word	0x2000005a
 800282c:	2000016c 	.word	0x2000016c
 8002830:	66666667 	.word	0x66666667
 8002834:	20000044 	.word	0x20000044
 8002838:	20000046 	.word	0x20000046
 800283c:	20000218 	.word	0x20000218

08002840 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_USART1_UART_Init+0x4c>)
 8002846:	4a12      	ldr	r2, [pc, #72]	; (8002890 <MX_USART1_UART_Init+0x50>)
 8002848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <MX_USART1_UART_Init+0x4c>)
 800284c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <MX_USART1_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <MX_USART1_UART_Init+0x4c>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <MX_USART1_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <MX_USART1_UART_Init+0x4c>)
 8002866:	220c      	movs	r2, #12
 8002868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <MX_USART1_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <MX_USART1_UART_Init+0x4c>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002876:	4805      	ldr	r0, [pc, #20]	; (800288c <MX_USART1_UART_Init+0x4c>)
 8002878:	f003 fc84 	bl	8006184 <HAL_UART_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002882:	f7ff fdbd 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000218 	.word	0x20000218
 8002890:	40011000 	.word	0x40011000

08002894 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <HAL_UART_MspInit+0x94>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d134      	bne.n	8002920 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_UART_MspInit+0x98>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	4a1b      	ldr	r2, [pc, #108]	; (800292c <HAL_UART_MspInit+0x98>)
 80028c0:	f043 0310 	orr.w	r3, r3, #16
 80028c4:	6453      	str	r3, [r2, #68]	; 0x44
 80028c6:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_UART_MspInit+0x98>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_UART_MspInit+0x98>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a14      	ldr	r2, [pc, #80]	; (800292c <HAL_UART_MspInit+0x98>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_UART_MspInit+0x98>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002900:	2307      	movs	r3, #7
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	4809      	ldr	r0, [pc, #36]	; (8002930 <HAL_UART_MspInit+0x9c>)
 800290c:	f000 fab4 	bl	8002e78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002910:	2200      	movs	r2, #0
 8002912:	2100      	movs	r1, #0
 8002914:	2025      	movs	r0, #37	; 0x25
 8002916:	f000 f9e6 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800291a:	2025      	movs	r0, #37	; 0x25
 800291c:	f000 f9ff 	bl	8002d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002920:	bf00      	nop
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40011000 	.word	0x40011000
 800292c:	40023800 	.word	0x40023800
 8002930:	40020000 	.word	0x40020000

08002934 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	4413      	add	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	b2da      	uxtb	r2, r3
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4413      	add	r3, r2
 8002958:	b2db      	uxtb	r3, r3
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <DEC2BCD+0x44>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	08db      	lsrs	r3, r3, #3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	b258      	sxtb	r0, r3
 8002982:	79fa      	ldrb	r2, [r7, #7]
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <DEC2BCD+0x44>)
 8002986:	fba3 1302 	umull	r1, r3, r3, r2
 800298a:	08d9      	lsrs	r1, r3, #3
 800298c:	460b      	mov	r3, r1
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	b25b      	sxtb	r3, r3
 800299a:	4303      	orrs	r3, r0
 800299c:	b25b      	sxtb	r3, r3
 800299e:	b2db      	uxtb	r3, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	cccccccd 	.word	0xcccccccd

080029b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029b4:	480d      	ldr	r0, [pc, #52]	; (80029ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029b6:	490e      	ldr	r1, [pc, #56]	; (80029f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029b8:	4a0e      	ldr	r2, [pc, #56]	; (80029f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029bc:	e002      	b.n	80029c4 <LoopCopyDataInit>

080029be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c2:	3304      	adds	r3, #4

080029c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c8:	d3f9      	bcc.n	80029be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029cc:	4c0b      	ldr	r4, [pc, #44]	; (80029fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d0:	e001      	b.n	80029d6 <LoopFillZerobss>

080029d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d4:	3204      	adds	r2, #4

080029d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d8:	d3fb      	bcc.n	80029d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029da:	f7ff fe4b 	bl	8002674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029de:	f004 fc69 	bl	80072b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029e2:	f7fe fe17 	bl	8001614 <main>
  bx  lr    
 80029e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80029f4:	0800a3a4 	.word	0x0800a3a4
  ldr r2, =_sbss
 80029f8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80029fc:	20000260 	.word	0x20000260

08002a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a00:	e7fe      	b.n	8002a00 <ADC_IRQHandler>
	...

08002a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <HAL_Init+0x40>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <HAL_Init+0x40>)
 8002a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_Init+0x40>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <HAL_Init+0x40>)
 8002a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_Init+0x40>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_Init+0x40>)
 8002a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a2c:	2003      	movs	r0, #3
 8002a2e:	f000 f94f 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a32:	200f      	movs	r0, #15
 8002a34:	f000 f808 	bl	8002a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a38:	f7ff fdb6 	bl	80025a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023c00 	.word	0x40023c00

08002a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_InitTick+0x54>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_InitTick+0x58>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f967 	bl	8002d3a <HAL_SYSTICK_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00e      	b.n	8002a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b0f      	cmp	r3, #15
 8002a7a:	d80a      	bhi.n	8002a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f000 f92f 	bl	8002ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a88:	4a06      	ldr	r2, [pc, #24]	; (8002aa4 <HAL_InitTick+0x5c>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e000      	b.n	8002a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	2000000c 	.word	0x2000000c
 8002aa0:	20000014 	.word	0x20000014
 8002aa4:	20000010 	.word	0x20000010

08002aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_IncTick+0x20>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_IncTick+0x24>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <HAL_IncTick+0x24>)
 8002aba:	6013      	str	r3, [r2, #0]
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000014 	.word	0x20000014
 8002acc:	2000025c 	.word	0x2000025c

08002ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_GetTick+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	2000025c 	.word	0x2000025c

08002ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff ffee 	bl	8002ad0 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d005      	beq.n	8002b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_Delay+0x44>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b0e:	bf00      	nop
 8002b10:	f7ff ffde 	bl	8002ad0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d8f7      	bhi.n	8002b10 <HAL_Delay+0x28>
  {
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000014 	.word	0x20000014

08002b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b62:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	60d3      	str	r3, [r2, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <__NVIC_GetPriorityGrouping+0x18>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	f003 0307 	and.w	r3, r3, #7
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db0b      	blt.n	8002bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4907      	ldr	r1, [pc, #28]	; (8002bcc <__NVIC_EnableIRQ+0x38>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	; (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	; (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	; 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	; 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c9c:	d301      	bcc.n	8002ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00f      	b.n	8002cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <SysTick_Config+0x40>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002caa:	210f      	movs	r1, #15
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	f7ff ff8e 	bl	8002bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <SysTick_Config+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <SysTick_Config+0x40>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff29 	bl	8002b30 <__NVIC_SetPriorityGrouping>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf8:	f7ff ff3e 	bl	8002b78 <__NVIC_GetPriorityGrouping>
 8002cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff8e 	bl	8002c24 <NVIC_EncodePriority>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff5d 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	4603      	mov	r3, r0
 8002d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff31 	bl	8002b94 <__NVIC_EnableIRQ>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ffa2 	bl	8002c8c <SysTick_Config>
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d60:	f7ff feb6 	bl	8002ad0 <HAL_GetTick>
 8002d64:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d008      	beq.n	8002d84 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2280      	movs	r2, #128	; 0x80
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e052      	b.n	8002e2a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0216 	bic.w	r2, r2, #22
 8002d92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d103      	bne.n	8002db4 <HAL_DMA_Abort+0x62>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0208 	bic.w	r2, r2, #8
 8002dc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd4:	e013      	b.n	8002dfe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dd6:	f7ff fe7b 	bl	8002ad0 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	d90c      	bls.n	8002dfe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2203      	movs	r2, #3
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e015      	b.n	8002e2a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e4      	bne.n	8002dd6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	223f      	movs	r2, #63	; 0x3f
 8002e12:	409a      	lsls	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d004      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e00c      	b.n	8002e6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2205      	movs	r2, #5
 8002e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	; 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	e16b      	b.n	800316c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e94:	2201      	movs	r2, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	f040 815a 	bne.w	8003166 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d005      	beq.n	8002eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d130      	bne.n	8002f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f00:	2201      	movs	r2, #1
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 0201 	and.w	r2, r3, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d017      	beq.n	8002f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d123      	bne.n	8002fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	08da      	lsrs	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3208      	adds	r2, #8
 8002f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	220f      	movs	r2, #15
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	08da      	lsrs	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3208      	adds	r2, #8
 8002fb6:	69b9      	ldr	r1, [r7, #24]
 8002fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0203 	and.w	r2, r3, #3
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80b4 	beq.w	8003166 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	4b60      	ldr	r3, [pc, #384]	; (8003184 <HAL_GPIO_Init+0x30c>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	4a5f      	ldr	r2, [pc, #380]	; (8003184 <HAL_GPIO_Init+0x30c>)
 8003008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800300c:	6453      	str	r3, [r2, #68]	; 0x44
 800300e:	4b5d      	ldr	r3, [pc, #372]	; (8003184 <HAL_GPIO_Init+0x30c>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800301a:	4a5b      	ldr	r2, [pc, #364]	; (8003188 <HAL_GPIO_Init+0x310>)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	3302      	adds	r3, #2
 8003022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	220f      	movs	r2, #15
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a52      	ldr	r2, [pc, #328]	; (800318c <HAL_GPIO_Init+0x314>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d02b      	beq.n	800309e <HAL_GPIO_Init+0x226>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a51      	ldr	r2, [pc, #324]	; (8003190 <HAL_GPIO_Init+0x318>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d025      	beq.n	800309a <HAL_GPIO_Init+0x222>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a50      	ldr	r2, [pc, #320]	; (8003194 <HAL_GPIO_Init+0x31c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01f      	beq.n	8003096 <HAL_GPIO_Init+0x21e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a4f      	ldr	r2, [pc, #316]	; (8003198 <HAL_GPIO_Init+0x320>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d019      	beq.n	8003092 <HAL_GPIO_Init+0x21a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a4e      	ldr	r2, [pc, #312]	; (800319c <HAL_GPIO_Init+0x324>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <HAL_GPIO_Init+0x216>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a4d      	ldr	r2, [pc, #308]	; (80031a0 <HAL_GPIO_Init+0x328>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00d      	beq.n	800308a <HAL_GPIO_Init+0x212>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a4c      	ldr	r2, [pc, #304]	; (80031a4 <HAL_GPIO_Init+0x32c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d007      	beq.n	8003086 <HAL_GPIO_Init+0x20e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a4b      	ldr	r2, [pc, #300]	; (80031a8 <HAL_GPIO_Init+0x330>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d101      	bne.n	8003082 <HAL_GPIO_Init+0x20a>
 800307e:	2307      	movs	r3, #7
 8003080:	e00e      	b.n	80030a0 <HAL_GPIO_Init+0x228>
 8003082:	2308      	movs	r3, #8
 8003084:	e00c      	b.n	80030a0 <HAL_GPIO_Init+0x228>
 8003086:	2306      	movs	r3, #6
 8003088:	e00a      	b.n	80030a0 <HAL_GPIO_Init+0x228>
 800308a:	2305      	movs	r3, #5
 800308c:	e008      	b.n	80030a0 <HAL_GPIO_Init+0x228>
 800308e:	2304      	movs	r3, #4
 8003090:	e006      	b.n	80030a0 <HAL_GPIO_Init+0x228>
 8003092:	2303      	movs	r3, #3
 8003094:	e004      	b.n	80030a0 <HAL_GPIO_Init+0x228>
 8003096:	2302      	movs	r3, #2
 8003098:	e002      	b.n	80030a0 <HAL_GPIO_Init+0x228>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_GPIO_Init+0x228>
 800309e:	2300      	movs	r3, #0
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	f002 0203 	and.w	r2, r2, #3
 80030a6:	0092      	lsls	r2, r2, #2
 80030a8:	4093      	lsls	r3, r2
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b0:	4935      	ldr	r1, [pc, #212]	; (8003188 <HAL_GPIO_Init+0x310>)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	3302      	adds	r3, #2
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030be:	4b3b      	ldr	r3, [pc, #236]	; (80031ac <HAL_GPIO_Init+0x334>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030e2:	4a32      	ldr	r2, [pc, #200]	; (80031ac <HAL_GPIO_Init+0x334>)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030e8:	4b30      	ldr	r3, [pc, #192]	; (80031ac <HAL_GPIO_Init+0x334>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800310c:	4a27      	ldr	r2, [pc, #156]	; (80031ac <HAL_GPIO_Init+0x334>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003112:	4b26      	ldr	r3, [pc, #152]	; (80031ac <HAL_GPIO_Init+0x334>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003136:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_GPIO_Init+0x334>)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <HAL_GPIO_Init+0x334>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003160:	4a12      	ldr	r2, [pc, #72]	; (80031ac <HAL_GPIO_Init+0x334>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3301      	adds	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b0f      	cmp	r3, #15
 8003170:	f67f ae90 	bls.w	8002e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3724      	adds	r7, #36	; 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	40013800 	.word	0x40013800
 800318c:	40020000 	.word	0x40020000
 8003190:	40020400 	.word	0x40020400
 8003194:	40020800 	.word	0x40020800
 8003198:	40020c00 	.word	0x40020c00
 800319c:	40021000 	.word	0x40021000
 80031a0:	40021400 	.word	0x40021400
 80031a4:	40021800 	.word	0x40021800
 80031a8:	40021c00 	.word	0x40021c00
 80031ac:	40013c00 	.word	0x40013c00

080031b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	807b      	strh	r3, [r7, #2]
 80031bc:	4613      	mov	r3, r2
 80031be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031c0:	787b      	ldrb	r3, [r7, #1]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031cc:	e003      	b.n	80031d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	041a      	lsls	r2, r3, #16
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	619a      	str	r2, [r3, #24]
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e12b      	b.n	800344e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fc98 	bl	8000b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	; 0x24
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003236:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003246:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003248:	f001 fd06 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 800324c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4a81      	ldr	r2, [pc, #516]	; (8003458 <HAL_I2C_Init+0x274>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d807      	bhi.n	8003268 <HAL_I2C_Init+0x84>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4a80      	ldr	r2, [pc, #512]	; (800345c <HAL_I2C_Init+0x278>)
 800325c:	4293      	cmp	r3, r2
 800325e:	bf94      	ite	ls
 8003260:	2301      	movls	r3, #1
 8003262:	2300      	movhi	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e006      	b.n	8003276 <HAL_I2C_Init+0x92>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4a7d      	ldr	r2, [pc, #500]	; (8003460 <HAL_I2C_Init+0x27c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	bf94      	ite	ls
 8003270:	2301      	movls	r3, #1
 8003272:	2300      	movhi	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0e7      	b.n	800344e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4a78      	ldr	r2, [pc, #480]	; (8003464 <HAL_I2C_Init+0x280>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	0c9b      	lsrs	r3, r3, #18
 8003288:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4a6a      	ldr	r2, [pc, #424]	; (8003458 <HAL_I2C_Init+0x274>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d802      	bhi.n	80032b8 <HAL_I2C_Init+0xd4>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	3301      	adds	r3, #1
 80032b6:	e009      	b.n	80032cc <HAL_I2C_Init+0xe8>
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	4a69      	ldr	r2, [pc, #420]	; (8003468 <HAL_I2C_Init+0x284>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	3301      	adds	r3, #1
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	495c      	ldr	r1, [pc, #368]	; (8003458 <HAL_I2C_Init+0x274>)
 80032e8:	428b      	cmp	r3, r1
 80032ea:	d819      	bhi.n	8003320 <HAL_I2C_Init+0x13c>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1e59      	subs	r1, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032fa:	1c59      	adds	r1, r3, #1
 80032fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003300:	400b      	ands	r3, r1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_I2C_Init+0x138>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1e59      	subs	r1, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fbb1 f3f3 	udiv	r3, r1, r3
 8003314:	3301      	adds	r3, #1
 8003316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331a:	e051      	b.n	80033c0 <HAL_I2C_Init+0x1dc>
 800331c:	2304      	movs	r3, #4
 800331e:	e04f      	b.n	80033c0 <HAL_I2C_Init+0x1dc>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d111      	bne.n	800334c <HAL_I2C_Init+0x168>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	1e58      	subs	r0, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	440b      	add	r3, r1
 8003336:	fbb0 f3f3 	udiv	r3, r0, r3
 800333a:	3301      	adds	r3, #1
 800333c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e012      	b.n	8003372 <HAL_I2C_Init+0x18e>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1e58      	subs	r0, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	0099      	lsls	r1, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003362:	3301      	adds	r3, #1
 8003364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_I2C_Init+0x196>
 8003376:	2301      	movs	r3, #1
 8003378:	e022      	b.n	80033c0 <HAL_I2C_Init+0x1dc>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10e      	bne.n	80033a0 <HAL_I2C_Init+0x1bc>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1e58      	subs	r0, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6859      	ldr	r1, [r3, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	440b      	add	r3, r1
 8003390:	fbb0 f3f3 	udiv	r3, r0, r3
 8003394:	3301      	adds	r3, #1
 8003396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800339e:	e00f      	b.n	80033c0 <HAL_I2C_Init+0x1dc>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1e58      	subs	r0, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6859      	ldr	r1, [r3, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	0099      	lsls	r1, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	6809      	ldr	r1, [r1, #0]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6911      	ldr	r1, [r2, #16]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68d2      	ldr	r2, [r2, #12]
 80033fa:	4311      	orrs	r1, r2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	430b      	orrs	r3, r1
 8003402:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	000186a0 	.word	0x000186a0
 800345c:	001e847f 	.word	0x001e847f
 8003460:	003d08ff 	.word	0x003d08ff
 8003464:	431bde83 	.word	0x431bde83
 8003468:	10624dd3 	.word	0x10624dd3

0800346c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	4608      	mov	r0, r1
 8003476:	4611      	mov	r1, r2
 8003478:	461a      	mov	r2, r3
 800347a:	4603      	mov	r3, r0
 800347c:	817b      	strh	r3, [r7, #10]
 800347e:	460b      	mov	r3, r1
 8003480:	813b      	strh	r3, [r7, #8]
 8003482:	4613      	mov	r3, r2
 8003484:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003486:	f7ff fb23 	bl	8002ad0 <HAL_GetTick>
 800348a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b20      	cmp	r3, #32
 8003496:	f040 80d9 	bne.w	800364c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	2319      	movs	r3, #25
 80034a0:	2201      	movs	r2, #1
 80034a2:	496d      	ldr	r1, [pc, #436]	; (8003658 <HAL_I2C_Mem_Write+0x1ec>)
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fdad 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034b0:	2302      	movs	r3, #2
 80034b2:	e0cc      	b.n	800364e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_I2C_Mem_Write+0x56>
 80034be:	2302      	movs	r3, #2
 80034c0:	e0c5      	b.n	800364e <HAL_I2C_Mem_Write+0x1e2>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d007      	beq.n	80034e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2221      	movs	r2, #33	; 0x21
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2240      	movs	r2, #64	; 0x40
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a3a      	ldr	r2, [r7, #32]
 8003512:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003518:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a4d      	ldr	r2, [pc, #308]	; (800365c <HAL_I2C_Mem_Write+0x1f0>)
 8003528:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800352a:	88f8      	ldrh	r0, [r7, #6]
 800352c:	893a      	ldrh	r2, [r7, #8]
 800352e:	8979      	ldrh	r1, [r7, #10]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	4603      	mov	r3, r0
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 fbe4 	bl	8003d08 <I2C_RequestMemoryWrite>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d052      	beq.n	80035ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e081      	b.n	800364e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fe2e 	bl	80041b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	2b04      	cmp	r3, #4
 8003560:	d107      	bne.n	8003572 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003570:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e06b      	b.n	800364e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d11b      	bne.n	80035ec <HAL_I2C_Mem_Write+0x180>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d017      	beq.n	80035ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1aa      	bne.n	800354a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fe1a 	bl	8004232 <I2C_WaitOnBTFFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00d      	beq.n	8003620 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	2b04      	cmp	r3, #4
 800360a:	d107      	bne.n	800361c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e016      	b.n	800364e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	00100002 	.word	0x00100002
 800365c:	ffff0000 	.word	0xffff0000

08003660 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08c      	sub	sp, #48	; 0x30
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	4608      	mov	r0, r1
 800366a:	4611      	mov	r1, r2
 800366c:	461a      	mov	r2, r3
 800366e:	4603      	mov	r3, r0
 8003670:	817b      	strh	r3, [r7, #10]
 8003672:	460b      	mov	r3, r1
 8003674:	813b      	strh	r3, [r7, #8]
 8003676:	4613      	mov	r3, r2
 8003678:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800367a:	f7ff fa29 	bl	8002ad0 <HAL_GetTick>
 800367e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b20      	cmp	r3, #32
 800368a:	f040 8208 	bne.w	8003a9e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	2319      	movs	r3, #25
 8003694:	2201      	movs	r2, #1
 8003696:	497b      	ldr	r1, [pc, #492]	; (8003884 <HAL_I2C_Mem_Read+0x224>)
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fcb3 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
 80036a6:	e1fb      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_I2C_Mem_Read+0x56>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e1f4      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x440>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d007      	beq.n	80036dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2222      	movs	r2, #34	; 0x22
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2240      	movs	r2, #64	; 0x40
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800370c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a5b      	ldr	r2, [pc, #364]	; (8003888 <HAL_I2C_Mem_Read+0x228>)
 800371c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800371e:	88f8      	ldrh	r0, [r7, #6]
 8003720:	893a      	ldrh	r2, [r7, #8]
 8003722:	8979      	ldrh	r1, [r7, #10]
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	4603      	mov	r3, r0
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fb80 	bl	8003e34 <I2C_RequestMemoryRead>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e1b0      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003742:	2b00      	cmp	r3, #0
 8003744:	d113      	bne.n	800376e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003746:	2300      	movs	r3, #0
 8003748:	623b      	str	r3, [r7, #32]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	623b      	str	r3, [r7, #32]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	623b      	str	r3, [r7, #32]
 800375a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e184      	b.n	8003a78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	2b01      	cmp	r3, #1
 8003774:	d11b      	bne.n	80037ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003784:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e164      	b.n	8003a78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d11b      	bne.n	80037ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	e144      	b.n	8003a78 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003804:	e138      	b.n	8003a78 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380a:	2b03      	cmp	r3, #3
 800380c:	f200 80f1 	bhi.w	80039f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003814:	2b01      	cmp	r3, #1
 8003816:	d123      	bne.n	8003860 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fd49 	bl	80042b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e139      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800385e:	e10b      	b.n	8003a78 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	2b02      	cmp	r3, #2
 8003866:	d14e      	bne.n	8003906 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	2200      	movs	r2, #0
 8003870:	4906      	ldr	r1, [pc, #24]	; (800388c <HAL_I2C_Mem_Read+0x22c>)
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 fbc6 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e10e      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x440>
 8003882:	bf00      	nop
 8003884:	00100002 	.word	0x00100002
 8003888:	ffff0000 	.word	0xffff0000
 800388c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003904:	e0b8      	b.n	8003a78 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390c:	2200      	movs	r2, #0
 800390e:	4966      	ldr	r1, [pc, #408]	; (8003aa8 <HAL_I2C_Mem_Read+0x448>)
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fb77 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0bf      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003968:	2200      	movs	r2, #0
 800396a:	494f      	ldr	r1, [pc, #316]	; (8003aa8 <HAL_I2C_Mem_Read+0x448>)
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fb49 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e091      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039f0:	e042      	b.n	8003a78 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fc5c 	bl	80042b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e04c      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d118      	bne.n	8003a78 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f47f aec2 	bne.w	8003806 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e000      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a9e:	2302      	movs	r3, #2
  }
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3728      	adds	r7, #40	; 0x28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	00010004 	.word	0x00010004

08003aac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	607a      	str	r2, [r7, #4]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003abc:	f7ff f808 	bl	8002ad0 <HAL_GetTick>
 8003ac0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	f040 8111 	bne.w	8003cf6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	2319      	movs	r3, #25
 8003ada:	2201      	movs	r2, #1
 8003adc:	4988      	ldr	r1, [pc, #544]	; (8003d00 <HAL_I2C_IsDeviceReady+0x254>)
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fa90 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003aea:	2302      	movs	r3, #2
 8003aec:	e104      	b.n	8003cf8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_I2C_IsDeviceReady+0x50>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e0fd      	b.n	8003cf8 <HAL_I2C_IsDeviceReady+0x24c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d007      	beq.n	8003b22 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2224      	movs	r2, #36	; 0x24
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a70      	ldr	r2, [pc, #448]	; (8003d04 <HAL_I2C_IsDeviceReady+0x258>)
 8003b44:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b54:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 fa4e 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00d      	beq.n	8003b8a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7c:	d103      	bne.n	8003b86 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0b6      	b.n	8003cf8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b8a:	897b      	ldrh	r3, [r7, #10]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b98:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b9a:	f7fe ff99 	bl	8002ad0 <HAL_GetTick>
 8003b9e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	2300      	movne	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bce:	e025      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bd0:	f7fe ff7e 	bl	8002ad0 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d302      	bcc.n	8003be6 <HAL_I2C_IsDeviceReady+0x13a>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d103      	bne.n	8003bee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	22a0      	movs	r2, #160	; 0xa0
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2ba0      	cmp	r3, #160	; 0xa0
 8003c26:	d005      	beq.n	8003c34 <HAL_I2C_IsDeviceReady+0x188>
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d102      	bne.n	8003c34 <HAL_I2C_IsDeviceReady+0x188>
 8003c2e:	7dbb      	ldrb	r3, [r7, #22]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0cd      	beq.n	8003bd0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d129      	bne.n	8003c9e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c58:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	2319      	movs	r3, #25
 8003c76:	2201      	movs	r2, #1
 8003c78:	4921      	ldr	r1, [pc, #132]	; (8003d00 <HAL_I2C_IsDeviceReady+0x254>)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f9c2 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e036      	b.n	8003cf8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e02c      	b.n	8003cf8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cb6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2319      	movs	r3, #25
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	490f      	ldr	r1, [pc, #60]	; (8003d00 <HAL_I2C_IsDeviceReady+0x254>)
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f99e 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e012      	b.n	8003cf8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	f4ff af32 	bcc.w	8003b46 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003cf6:	2302      	movs	r3, #2
  }
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3720      	adds	r7, #32
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	00100002 	.word	0x00100002
 8003d04:	ffff0000 	.word	0xffff0000

08003d08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	4608      	mov	r0, r1
 8003d12:	4611      	mov	r1, r2
 8003d14:	461a      	mov	r2, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	817b      	strh	r3, [r7, #10]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	813b      	strh	r3, [r7, #8]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f960 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00d      	beq.n	8003d66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d58:	d103      	bne.n	8003d62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e05f      	b.n	8003e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d66:	897b      	ldrh	r3, [r7, #10]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	6a3a      	ldr	r2, [r7, #32]
 8003d7a:	492d      	ldr	r1, [pc, #180]	; (8003e30 <I2C_RequestMemoryWrite+0x128>)
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f998 	bl	80040b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e04c      	b.n	8003e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da4:	6a39      	ldr	r1, [r7, #32]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fa02 	bl	80041b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00d      	beq.n	8003dce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d107      	bne.n	8003dca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e02b      	b.n	8003e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d105      	bne.n	8003de0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd4:	893b      	ldrh	r3, [r7, #8]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	611a      	str	r2, [r3, #16]
 8003dde:	e021      	b.n	8003e24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003de0:	893b      	ldrh	r3, [r7, #8]
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df0:	6a39      	ldr	r1, [r7, #32]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f9dc 	bl	80041b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00d      	beq.n	8003e1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d107      	bne.n	8003e16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e005      	b.n	8003e26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e1a:	893b      	ldrh	r3, [r7, #8]
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	00010002 	.word	0x00010002

08003e34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	4611      	mov	r1, r2
 8003e40:	461a      	mov	r2, r3
 8003e42:	4603      	mov	r3, r0
 8003e44:	817b      	strh	r3, [r7, #10]
 8003e46:	460b      	mov	r3, r1
 8003e48:	813b      	strh	r3, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f8c2 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e94:	d103      	bne.n	8003e9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e0aa      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	6a3a      	ldr	r2, [r7, #32]
 8003eb6:	4952      	ldr	r1, [pc, #328]	; (8004000 <I2C_RequestMemoryRead+0x1cc>)
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f8fa 	bl	80040b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e097      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee0:	6a39      	ldr	r1, [r7, #32]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f964 	bl	80041b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d107      	bne.n	8003f06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e076      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f10:	893b      	ldrh	r3, [r7, #8]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	611a      	str	r2, [r3, #16]
 8003f1a:	e021      	b.n	8003f60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f1c:	893b      	ldrh	r3, [r7, #8]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2c:	6a39      	ldr	r1, [r7, #32]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f93e 	bl	80041b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d107      	bne.n	8003f52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e050      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f56:	893b      	ldrh	r3, [r7, #8]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f62:	6a39      	ldr	r1, [r7, #32]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f923 	bl	80041b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00d      	beq.n	8003f8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d107      	bne.n	8003f88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e035      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f82b 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00d      	beq.n	8003fd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc2:	d103      	bne.n	8003fcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e013      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fd0:	897b      	ldrh	r3, [r7, #10]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	6a3a      	ldr	r2, [r7, #32]
 8003fe4:	4906      	ldr	r1, [pc, #24]	; (8004000 <I2C_RequestMemoryRead+0x1cc>)
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f863 	bl	80040b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	00010002 	.word	0x00010002

08004004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004014:	e025      	b.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d021      	beq.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401e:	f7fe fd57 	bl	8002ad0 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d302      	bcc.n	8004034 <I2C_WaitOnFlagUntilTimeout+0x30>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d116      	bne.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f043 0220 	orr.w	r2, r3, #32
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e023      	b.n	80040aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	0c1b      	lsrs	r3, r3, #16
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	d10d      	bne.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x84>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	43da      	mvns	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4013      	ands	r3, r2
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	bf0c      	ite	eq
 800407e:	2301      	moveq	r3, #1
 8004080:	2300      	movne	r3, #0
 8004082:	b2db      	uxtb	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	e00c      	b.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	43da      	mvns	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4013      	ands	r3, r2
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	bf0c      	ite	eq
 800409a:	2301      	moveq	r3, #1
 800409c:	2300      	movne	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d0b6      	beq.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040c0:	e051      	b.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d0:	d123      	bne.n	800411a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f043 0204 	orr.w	r2, r3, #4
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e046      	b.n	80041a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d021      	beq.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004122:	f7fe fcd5 	bl	8002ad0 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	429a      	cmp	r2, r3
 8004130:	d302      	bcc.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d116      	bne.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f043 0220 	orr.w	r2, r3, #32
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e020      	b.n	80041a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d10c      	bne.n	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	43da      	mvns	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf14      	ite	ne
 8004182:	2301      	movne	r3, #1
 8004184:	2300      	moveq	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	e00b      	b.n	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	43da      	mvns	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4013      	ands	r3, r2
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf14      	ite	ne
 800419c:	2301      	movne	r3, #1
 800419e:	2300      	moveq	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d18d      	bne.n	80040c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041bc:	e02d      	b.n	800421a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f8ce 	bl	8004360 <I2C_IsAcknowledgeFailed>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e02d      	b.n	800422a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d4:	d021      	beq.n	800421a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d6:	f7fe fc7b 	bl	8002ad0 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d302      	bcc.n	80041ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d116      	bne.n	800421a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f043 0220 	orr.w	r2, r3, #32
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e007      	b.n	800422a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b80      	cmp	r3, #128	; 0x80
 8004226:	d1ca      	bne.n	80041be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800423e:	e02d      	b.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f88d 	bl	8004360 <I2C_IsAcknowledgeFailed>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e02d      	b.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d021      	beq.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004258:	f7fe fc3a 	bl	8002ad0 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	429a      	cmp	r2, r3
 8004266:	d302      	bcc.n	800426e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d116      	bne.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f043 0220 	orr.w	r2, r3, #32
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e007      	b.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d1ca      	bne.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042c0:	e042      	b.n	8004348 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	d119      	bne.n	8004304 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0210 	mvn.w	r2, #16
 80042d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e029      	b.n	8004358 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004304:	f7fe fbe4 	bl	8002ad0 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	429a      	cmp	r2, r3
 8004312:	d302      	bcc.n	800431a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d116      	bne.n	8004348 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e007      	b.n	8004358 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d1b5      	bne.n	80042c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004376:	d11b      	bne.n	80043b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004380:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f043 0204 	orr.w	r2, r3, #4
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e264      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d075      	beq.n	80044ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043de:	4ba3      	ldr	r3, [pc, #652]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d00c      	beq.n	8004404 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ea:	4ba0      	ldr	r3, [pc, #640]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d112      	bne.n	800441c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043f6:	4b9d      	ldr	r3, [pc, #628]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004402:	d10b      	bne.n	800441c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004404:	4b99      	ldr	r3, [pc, #612]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d05b      	beq.n	80044c8 <HAL_RCC_OscConfig+0x108>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d157      	bne.n	80044c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e23f      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004424:	d106      	bne.n	8004434 <HAL_RCC_OscConfig+0x74>
 8004426:	4b91      	ldr	r3, [pc, #580]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a90      	ldr	r2, [pc, #576]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e01d      	b.n	8004470 <HAL_RCC_OscConfig+0xb0>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800443c:	d10c      	bne.n	8004458 <HAL_RCC_OscConfig+0x98>
 800443e:	4b8b      	ldr	r3, [pc, #556]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a8a      	ldr	r2, [pc, #552]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	4b88      	ldr	r3, [pc, #544]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a87      	ldr	r2, [pc, #540]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	e00b      	b.n	8004470 <HAL_RCC_OscConfig+0xb0>
 8004458:	4b84      	ldr	r3, [pc, #528]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a83      	ldr	r2, [pc, #524]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 800445e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	4b81      	ldr	r3, [pc, #516]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a80      	ldr	r2, [pc, #512]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 800446a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800446e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d013      	beq.n	80044a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fe fb2a 	bl	8002ad0 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004480:	f7fe fb26 	bl	8002ad0 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	; 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e204      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004492:	4b76      	ldr	r3, [pc, #472]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0xc0>
 800449e:	e014      	b.n	80044ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a0:	f7fe fb16 	bl	8002ad0 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a8:	f7fe fb12 	bl	8002ad0 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b64      	cmp	r3, #100	; 0x64
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e1f0      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ba:	4b6c      	ldr	r3, [pc, #432]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0xe8>
 80044c6:	e000      	b.n	80044ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d063      	beq.n	800459e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044d6:	4b65      	ldr	r3, [pc, #404]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 030c 	and.w	r3, r3, #12
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044e2:	4b62      	ldr	r3, [pc, #392]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d11c      	bne.n	8004528 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ee:	4b5f      	ldr	r3, [pc, #380]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d116      	bne.n	8004528 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fa:	4b5c      	ldr	r3, [pc, #368]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_RCC_OscConfig+0x152>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d001      	beq.n	8004512 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e1c4      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004512:	4b56      	ldr	r3, [pc, #344]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4952      	ldr	r1, [pc, #328]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004526:	e03a      	b.n	800459e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d020      	beq.n	8004572 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004530:	4b4f      	ldr	r3, [pc, #316]	; (8004670 <HAL_RCC_OscConfig+0x2b0>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fe facb 	bl	8002ad0 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800453e:	f7fe fac7 	bl	8002ad0 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e1a5      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004550:	4b46      	ldr	r3, [pc, #280]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455c:	4b43      	ldr	r3, [pc, #268]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	4940      	ldr	r1, [pc, #256]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]
 8004570:	e015      	b.n	800459e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004572:	4b3f      	ldr	r3, [pc, #252]	; (8004670 <HAL_RCC_OscConfig+0x2b0>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7fe faaa 	bl	8002ad0 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004580:	f7fe faa6 	bl	8002ad0 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e184      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004592:	4b36      	ldr	r3, [pc, #216]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d030      	beq.n	800460c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b2:	4b30      	ldr	r3, [pc, #192]	; (8004674 <HAL_RCC_OscConfig+0x2b4>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fe fa8a 	bl	8002ad0 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c0:	f7fe fa86 	bl	8002ad0 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e164      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d2:	4b26      	ldr	r3, [pc, #152]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0x200>
 80045de:	e015      	b.n	800460c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e0:	4b24      	ldr	r3, [pc, #144]	; (8004674 <HAL_RCC_OscConfig+0x2b4>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e6:	f7fe fa73 	bl	8002ad0 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ee:	f7fe fa6f 	bl	8002ad0 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e14d      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004600:	4b1a      	ldr	r3, [pc, #104]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f0      	bne.n	80045ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80a0 	beq.w	800475a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461a:	2300      	movs	r3, #0
 800461c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800461e:	4b13      	ldr	r3, [pc, #76]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10f      	bne.n	800464a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	60bb      	str	r3, [r7, #8]
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	4a0e      	ldr	r2, [pc, #56]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 8004634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004638:	6413      	str	r3, [r2, #64]	; 0x40
 800463a:	4b0c      	ldr	r3, [pc, #48]	; (800466c <HAL_RCC_OscConfig+0x2ac>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004646:	2301      	movs	r3, #1
 8004648:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_OscConfig+0x2b8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d121      	bne.n	800469a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004656:	4b08      	ldr	r3, [pc, #32]	; (8004678 <HAL_RCC_OscConfig+0x2b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a07      	ldr	r2, [pc, #28]	; (8004678 <HAL_RCC_OscConfig+0x2b8>)
 800465c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004662:	f7fe fa35 	bl	8002ad0 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004668:	e011      	b.n	800468e <HAL_RCC_OscConfig+0x2ce>
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800
 8004670:	42470000 	.word	0x42470000
 8004674:	42470e80 	.word	0x42470e80
 8004678:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467c:	f7fe fa28 	bl	8002ad0 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e106      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468e:	4b85      	ldr	r3, [pc, #532]	; (80048a4 <HAL_RCC_OscConfig+0x4e4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d106      	bne.n	80046b0 <HAL_RCC_OscConfig+0x2f0>
 80046a2:	4b81      	ldr	r3, [pc, #516]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	4a80      	ldr	r2, [pc, #512]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6713      	str	r3, [r2, #112]	; 0x70
 80046ae:	e01c      	b.n	80046ea <HAL_RCC_OscConfig+0x32a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b05      	cmp	r3, #5
 80046b6:	d10c      	bne.n	80046d2 <HAL_RCC_OscConfig+0x312>
 80046b8:	4b7b      	ldr	r3, [pc, #492]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	4a7a      	ldr	r2, [pc, #488]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 80046be:	f043 0304 	orr.w	r3, r3, #4
 80046c2:	6713      	str	r3, [r2, #112]	; 0x70
 80046c4:	4b78      	ldr	r3, [pc, #480]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	4a77      	ldr	r2, [pc, #476]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	6713      	str	r3, [r2, #112]	; 0x70
 80046d0:	e00b      	b.n	80046ea <HAL_RCC_OscConfig+0x32a>
 80046d2:	4b75      	ldr	r3, [pc, #468]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	4a74      	ldr	r2, [pc, #464]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	6713      	str	r3, [r2, #112]	; 0x70
 80046de:	4b72      	ldr	r3, [pc, #456]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	4a71      	ldr	r2, [pc, #452]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 80046e4:	f023 0304 	bic.w	r3, r3, #4
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d015      	beq.n	800471e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f2:	f7fe f9ed 	bl	8002ad0 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	e00a      	b.n	8004710 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fe f9e9 	bl	8002ad0 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f241 3288 	movw	r2, #5000	; 0x1388
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e0c5      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004710:	4b65      	ldr	r3, [pc, #404]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ee      	beq.n	80046fa <HAL_RCC_OscConfig+0x33a>
 800471c:	e014      	b.n	8004748 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800471e:	f7fe f9d7 	bl	8002ad0 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004724:	e00a      	b.n	800473c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004726:	f7fe f9d3 	bl	8002ad0 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f241 3288 	movw	r2, #5000	; 0x1388
 8004734:	4293      	cmp	r3, r2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e0af      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473c:	4b5a      	ldr	r3, [pc, #360]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1ee      	bne.n	8004726 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d105      	bne.n	800475a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474e:	4b56      	ldr	r3, [pc, #344]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a55      	ldr	r2, [pc, #340]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 8004754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 809b 	beq.w	800489a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004764:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b08      	cmp	r3, #8
 800476e:	d05c      	beq.n	800482a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d141      	bne.n	80047fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004778:	4b4c      	ldr	r3, [pc, #304]	; (80048ac <HAL_RCC_OscConfig+0x4ec>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fe f9a7 	bl	8002ad0 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004786:	f7fe f9a3 	bl	8002ad0 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e081      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004798:	4b43      	ldr	r3, [pc, #268]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f0      	bne.n	8004786 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	019b      	lsls	r3, r3, #6
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	3b01      	subs	r3, #1
 80047be:	041b      	lsls	r3, r3, #16
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	061b      	lsls	r3, r3, #24
 80047c8:	4937      	ldr	r1, [pc, #220]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ce:	4b37      	ldr	r3, [pc, #220]	; (80048ac <HAL_RCC_OscConfig+0x4ec>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fe f97c 	bl	8002ad0 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fe f978 	bl	8002ad0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e056      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ee:	4b2e      	ldr	r3, [pc, #184]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0x41c>
 80047fa:	e04e      	b.n	800489a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fc:	4b2b      	ldr	r3, [pc, #172]	; (80048ac <HAL_RCC_OscConfig+0x4ec>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fe f965 	bl	8002ad0 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480a:	f7fe f961 	bl	8002ad0 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e03f      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481c:	4b22      	ldr	r3, [pc, #136]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f0      	bne.n	800480a <HAL_RCC_OscConfig+0x44a>
 8004828:	e037      	b.n	800489a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e032      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004836:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d028      	beq.n	8004896 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d121      	bne.n	8004896 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d11a      	bne.n	8004896 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004866:	4013      	ands	r3, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800486c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800486e:	4293      	cmp	r3, r2
 8004870:	d111      	bne.n	8004896 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	3b01      	subs	r3, #1
 8004880:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004882:	429a      	cmp	r2, r3
 8004884:	d107      	bne.n	8004896 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d001      	beq.n	800489a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40007000 	.word	0x40007000
 80048a8:	40023800 	.word	0x40023800
 80048ac:	42470060 	.word	0x42470060

080048b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0cc      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048c4:	4b68      	ldr	r3, [pc, #416]	; (8004a68 <HAL_RCC_ClockConfig+0x1b8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d90c      	bls.n	80048ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b65      	ldr	r3, [pc, #404]	; (8004a68 <HAL_RCC_ClockConfig+0x1b8>)
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b63      	ldr	r3, [pc, #396]	; (8004a68 <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0b8      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d020      	beq.n	800493a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004904:	4b59      	ldr	r3, [pc, #356]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4a58      	ldr	r2, [pc, #352]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800490e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800491c:	4b53      	ldr	r3, [pc, #332]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4a52      	ldr	r2, [pc, #328]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004926:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004928:	4b50      	ldr	r3, [pc, #320]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	494d      	ldr	r1, [pc, #308]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	4313      	orrs	r3, r2
 8004938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d044      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d107      	bne.n	800495e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494e:	4b47      	ldr	r3, [pc, #284]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d119      	bne.n	800498e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e07f      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d003      	beq.n	800496e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800496a:	2b03      	cmp	r3, #3
 800496c:	d107      	bne.n	800497e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496e:	4b3f      	ldr	r3, [pc, #252]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d109      	bne.n	800498e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e06f      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497e:	4b3b      	ldr	r3, [pc, #236]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e067      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800498e:	4b37      	ldr	r3, [pc, #220]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f023 0203 	bic.w	r2, r3, #3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4934      	ldr	r1, [pc, #208]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	4313      	orrs	r3, r2
 800499e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049a0:	f7fe f896 	bl	8002ad0 <HAL_GetTick>
 80049a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a6:	e00a      	b.n	80049be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a8:	f7fe f892 	bl	8002ad0 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e04f      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049be:	4b2b      	ldr	r3, [pc, #172]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 020c 	and.w	r2, r3, #12
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d1eb      	bne.n	80049a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049d0:	4b25      	ldr	r3, [pc, #148]	; (8004a68 <HAL_RCC_ClockConfig+0x1b8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d20c      	bcs.n	80049f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049de:	4b22      	ldr	r3, [pc, #136]	; (8004a68 <HAL_RCC_ClockConfig+0x1b8>)
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <HAL_RCC_ClockConfig+0x1b8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e032      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a04:	4b19      	ldr	r3, [pc, #100]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4916      	ldr	r1, [pc, #88]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a22:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	490e      	ldr	r1, [pc, #56]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a36:	f000 f821 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	091b      	lsrs	r3, r3, #4
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	490a      	ldr	r1, [pc, #40]	; (8004a70 <HAL_RCC_ClockConfig+0x1c0>)
 8004a48:	5ccb      	ldrb	r3, [r1, r3]
 8004a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4e:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 8004a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a52:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fd fff6 	bl	8002a48 <HAL_InitTick>

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40023c00 	.word	0x40023c00
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	0800a37c 	.word	0x0800a37c
 8004a74:	2000000c 	.word	0x2000000c
 8004a78:	20000010 	.word	0x20000010

08004a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	607b      	str	r3, [r7, #4]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a94:	4b67      	ldr	r3, [pc, #412]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 030c 	and.w	r3, r3, #12
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d00d      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x40>
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	f200 80bd 	bhi.w	8004c20 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d003      	beq.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aae:	e0b7      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ab0:	4b61      	ldr	r3, [pc, #388]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ab2:	60bb      	str	r3, [r7, #8]
       break;
 8004ab4:	e0b7      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ab6:	4b61      	ldr	r3, [pc, #388]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ab8:	60bb      	str	r3, [r7, #8]
      break;
 8004aba:	e0b4      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004abc:	4b5d      	ldr	r3, [pc, #372]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ac6:	4b5b      	ldr	r3, [pc, #364]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d04d      	beq.n	8004b6e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad2:	4b58      	ldr	r3, [pc, #352]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	099b      	lsrs	r3, r3, #6
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ae2:	f04f 0100 	mov.w	r1, #0
 8004ae6:	ea02 0800 	and.w	r8, r2, r0
 8004aea:	ea03 0901 	and.w	r9, r3, r1
 8004aee:	4640      	mov	r0, r8
 8004af0:	4649      	mov	r1, r9
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	014b      	lsls	r3, r1, #5
 8004afc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b00:	0142      	lsls	r2, r0, #5
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	ebb0 0008 	subs.w	r0, r0, r8
 8004b0a:	eb61 0109 	sbc.w	r1, r1, r9
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	018b      	lsls	r3, r1, #6
 8004b18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b1c:	0182      	lsls	r2, r0, #6
 8004b1e:	1a12      	subs	r2, r2, r0
 8004b20:	eb63 0301 	sbc.w	r3, r3, r1
 8004b24:	f04f 0000 	mov.w	r0, #0
 8004b28:	f04f 0100 	mov.w	r1, #0
 8004b2c:	00d9      	lsls	r1, r3, #3
 8004b2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b32:	00d0      	lsls	r0, r2, #3
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	eb12 0208 	adds.w	r2, r2, r8
 8004b3c:	eb43 0309 	adc.w	r3, r3, r9
 8004b40:	f04f 0000 	mov.w	r0, #0
 8004b44:	f04f 0100 	mov.w	r1, #0
 8004b48:	0259      	lsls	r1, r3, #9
 8004b4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b4e:	0250      	lsls	r0, r2, #9
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4610      	mov	r0, r2
 8004b56:	4619      	mov	r1, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	f7fb fb3a 	bl	80001d8 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4613      	mov	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	e04a      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b6e:	4b31      	ldr	r3, [pc, #196]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	099b      	lsrs	r3, r3, #6
 8004b74:	461a      	mov	r2, r3
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b7e:	f04f 0100 	mov.w	r1, #0
 8004b82:	ea02 0400 	and.w	r4, r2, r0
 8004b86:	ea03 0501 	and.w	r5, r3, r1
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	014b      	lsls	r3, r1, #5
 8004b98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b9c:	0142      	lsls	r2, r0, #5
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	1b00      	subs	r0, r0, r4
 8004ba4:	eb61 0105 	sbc.w	r1, r1, r5
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	018b      	lsls	r3, r1, #6
 8004bb2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bb6:	0182      	lsls	r2, r0, #6
 8004bb8:	1a12      	subs	r2, r2, r0
 8004bba:	eb63 0301 	sbc.w	r3, r3, r1
 8004bbe:	f04f 0000 	mov.w	r0, #0
 8004bc2:	f04f 0100 	mov.w	r1, #0
 8004bc6:	00d9      	lsls	r1, r3, #3
 8004bc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bcc:	00d0      	lsls	r0, r2, #3
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	1912      	adds	r2, r2, r4
 8004bd4:	eb45 0303 	adc.w	r3, r5, r3
 8004bd8:	f04f 0000 	mov.w	r0, #0
 8004bdc:	f04f 0100 	mov.w	r1, #0
 8004be0:	0299      	lsls	r1, r3, #10
 8004be2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004be6:	0290      	lsls	r0, r2, #10
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4610      	mov	r0, r2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	f7fb faee 	bl	80001d8 <__aeabi_uldivmod>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4613      	mov	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c04:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	0c1b      	lsrs	r3, r3, #16
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1c:	60bb      	str	r3, [r7, #8]
      break;
 8004c1e:	e002      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c22:	60bb      	str	r3, [r7, #8]
      break;
 8004c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c26:	68bb      	ldr	r3, [r7, #8]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c32:	bf00      	nop
 8004c34:	40023800 	.word	0x40023800
 8004c38:	00f42400 	.word	0x00f42400
 8004c3c:	007a1200 	.word	0x007a1200

08004c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c46:	681b      	ldr	r3, [r3, #0]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	2000000c 	.word	0x2000000c

08004c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c5c:	f7ff fff0 	bl	8004c40 <HAL_RCC_GetHCLKFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	0a9b      	lsrs	r3, r3, #10
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	4903      	ldr	r1, [pc, #12]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	0800a38c 	.word	0x0800a38c

08004c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c84:	f7ff ffdc 	bl	8004c40 <HAL_RCC_GetHCLKFreq>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	0b5b      	lsrs	r3, r3, #13
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	4903      	ldr	r1, [pc, #12]	; (8004ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c96:	5ccb      	ldrb	r3, [r1, r3]
 8004c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	0800a38c 	.word	0x0800a38c

08004ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07b      	b.n	8004db2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d108      	bne.n	8004cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cca:	d009      	beq.n	8004ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	61da      	str	r2, [r3, #28]
 8004cd2:	e005      	b.n	8004ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fd fc0c 	bl	8002518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d64:	ea42 0103 	orr.w	r1, r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	0c1b      	lsrs	r3, r3, #16
 8004d7e:	f003 0104 	and.w	r1, r3, #4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	f003 0210 	and.w	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b088      	sub	sp, #32
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	603b      	str	r3, [r7, #0]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_SPI_Transmit+0x22>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e126      	b.n	800502a <HAL_SPI_Transmit+0x270>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004de4:	f7fd fe74 	bl	8002ad0 <HAL_GetTick>
 8004de8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dea:	88fb      	ldrh	r3, [r7, #6]
 8004dec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dfe:	e10b      	b.n	8005018 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_SPI_Transmit+0x52>
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d102      	bne.n	8004e12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e10:	e102      	b.n	8005018 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2203      	movs	r2, #3
 8004e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e58:	d10f      	bne.n	8004e7a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e84:	2b40      	cmp	r3, #64	; 0x40
 8004e86:	d007      	beq.n	8004e98 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea0:	d14b      	bne.n	8004f3a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_SPI_Transmit+0xf6>
 8004eaa:	8afb      	ldrh	r3, [r7, #22]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d13e      	bne.n	8004f2e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	881a      	ldrh	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	1c9a      	adds	r2, r3, #2
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ed4:	e02b      	b.n	8004f2e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d112      	bne.n	8004f0a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	881a      	ldrh	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	1c9a      	adds	r2, r3, #2
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f08:	e011      	b.n	8004f2e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f0a:	f7fd fde1 	bl	8002ad0 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d803      	bhi.n	8004f22 <HAL_SPI_Transmit+0x168>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d102      	bne.n	8004f28 <HAL_SPI_Transmit+0x16e>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d102      	bne.n	8004f2e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f2c:	e074      	b.n	8005018 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1ce      	bne.n	8004ed6 <HAL_SPI_Transmit+0x11c>
 8004f38:	e04c      	b.n	8004fd4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_Transmit+0x18e>
 8004f42:	8afb      	ldrh	r3, [r7, #22]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d140      	bne.n	8004fca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	7812      	ldrb	r2, [r2, #0]
 8004f54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f6e:	e02c      	b.n	8004fca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d113      	bne.n	8004fa6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	7812      	ldrb	r2, [r2, #0]
 8004f8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fa4:	e011      	b.n	8004fca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fa6:	f7fd fd93 	bl	8002ad0 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d803      	bhi.n	8004fbe <HAL_SPI_Transmit+0x204>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d102      	bne.n	8004fc4 <HAL_SPI_Transmit+0x20a>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d102      	bne.n	8004fca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fc8:	e026      	b.n	8005018 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1cd      	bne.n	8004f70 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 fbcb 	bl	8005774 <SPI_EndRxTxTransaction>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e000      	b.n	8005018 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005016:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005028:	7ffb      	ldrb	r3, [r7, #31]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b088      	sub	sp, #32
 8005036:	af02      	add	r7, sp, #8
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	4613      	mov	r3, r2
 8005040:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800504e:	d112      	bne.n	8005076 <HAL_SPI_Receive+0x44>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10e      	bne.n	8005076 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2204      	movs	r2, #4
 800505c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005060:	88fa      	ldrh	r2, [r7, #6]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	4613      	mov	r3, r2
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f8f1 	bl	8005254 <HAL_SPI_TransmitReceive>
 8005072:	4603      	mov	r3, r0
 8005074:	e0ea      	b.n	800524c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_SPI_Receive+0x52>
 8005080:	2302      	movs	r3, #2
 8005082:	e0e3      	b.n	800524c <HAL_SPI_Receive+0x21a>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800508c:	f7fd fd20 	bl	8002ad0 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d002      	beq.n	80050a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800509e:	2302      	movs	r3, #2
 80050a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050a2:	e0ca      	b.n	800523a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <HAL_SPI_Receive+0x7e>
 80050aa:	88fb      	ldrh	r3, [r7, #6]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d102      	bne.n	80050b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050b4:	e0c1      	b.n	800523a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2204      	movs	r2, #4
 80050ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	88fa      	ldrh	r2, [r7, #6]
 80050ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	88fa      	ldrh	r2, [r7, #6]
 80050d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050fc:	d10f      	bne.n	800511e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800510c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800511c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	2b40      	cmp	r3, #64	; 0x40
 800512a:	d007      	beq.n	800513c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800513a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d162      	bne.n	800520a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005144:	e02e      	b.n	80051a4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b01      	cmp	r3, #1
 8005152:	d115      	bne.n	8005180 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f103 020c 	add.w	r2, r3, #12
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800517e:	e011      	b.n	80051a4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005180:	f7fd fca6 	bl	8002ad0 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d803      	bhi.n	8005198 <HAL_SPI_Receive+0x166>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005196:	d102      	bne.n	800519e <HAL_SPI_Receive+0x16c>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80051a2:	e04a      	b.n	800523a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1cb      	bne.n	8005146 <HAL_SPI_Receive+0x114>
 80051ae:	e031      	b.n	8005214 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d113      	bne.n	80051e6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	b292      	uxth	r2, r2
 80051ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	1c9a      	adds	r2, r3, #2
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051e4:	e011      	b.n	800520a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051e6:	f7fd fc73 	bl	8002ad0 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d803      	bhi.n	80051fe <HAL_SPI_Receive+0x1cc>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d102      	bne.n	8005204 <HAL_SPI_Receive+0x1d2>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d102      	bne.n	800520a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005208:	e017      	b.n	800523a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1cd      	bne.n	80051b0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	6839      	ldr	r1, [r7, #0]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fa45 	bl	80056a8 <SPI_EndRxTransaction>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	75fb      	strb	r3, [r7, #23]
 8005236:	e000      	b.n	800523a <HAL_SPI_Receive+0x208>
  }

error :
 8005238:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08c      	sub	sp, #48	; 0x30
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005262:	2301      	movs	r3, #1
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_SPI_TransmitReceive+0x26>
 8005276:	2302      	movs	r3, #2
 8005278:	e18a      	b.n	8005590 <HAL_SPI_TransmitReceive+0x33c>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005282:	f7fd fc25 	bl	8002ad0 <HAL_GetTick>
 8005286:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005298:	887b      	ldrh	r3, [r7, #2]
 800529a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800529c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d00f      	beq.n	80052c4 <HAL_SPI_TransmitReceive+0x70>
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052aa:	d107      	bne.n	80052bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d103      	bne.n	80052bc <HAL_SPI_TransmitReceive+0x68>
 80052b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d003      	beq.n	80052c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052c2:	e15b      	b.n	800557c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <HAL_SPI_TransmitReceive+0x82>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <HAL_SPI_TransmitReceive+0x82>
 80052d0:	887b      	ldrh	r3, [r7, #2]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d103      	bne.n	80052de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052dc:	e14e      	b.n	800557c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d003      	beq.n	80052f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2205      	movs	r2, #5
 80052ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	887a      	ldrh	r2, [r7, #2]
 8005302:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	887a      	ldrh	r2, [r7, #2]
 8005308:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	887a      	ldrh	r2, [r7, #2]
 8005314:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	887a      	ldrh	r2, [r7, #2]
 800531a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d007      	beq.n	8005346 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005344:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800534e:	d178      	bne.n	8005442 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_SPI_TransmitReceive+0x10a>
 8005358:	8b7b      	ldrh	r3, [r7, #26]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d166      	bne.n	800542c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	881a      	ldrh	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	1c9a      	adds	r2, r3, #2
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005382:	e053      	b.n	800542c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b02      	cmp	r3, #2
 8005390:	d11b      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x176>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d016      	beq.n	80053ca <HAL_SPI_TransmitReceive+0x176>
 800539c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d113      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	881a      	ldrh	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	1c9a      	adds	r2, r3, #2
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d119      	bne.n	800540c <HAL_SPI_TransmitReceive+0x1b8>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d014      	beq.n	800540c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	b292      	uxth	r2, r2
 80053ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	1c9a      	adds	r2, r3, #2
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005408:	2301      	movs	r3, #1
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800540c:	f7fd fb60 	bl	8002ad0 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005418:	429a      	cmp	r2, r3
 800541a:	d807      	bhi.n	800542c <HAL_SPI_TransmitReceive+0x1d8>
 800541c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d003      	beq.n	800542c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800542a:	e0a7      	b.n	800557c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1a6      	bne.n	8005384 <HAL_SPI_TransmitReceive+0x130>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1a1      	bne.n	8005384 <HAL_SPI_TransmitReceive+0x130>
 8005440:	e07c      	b.n	800553c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_SPI_TransmitReceive+0x1fc>
 800544a:	8b7b      	ldrh	r3, [r7, #26]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d16b      	bne.n	8005528 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	7812      	ldrb	r2, [r2, #0]
 800545c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005476:	e057      	b.n	8005528 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b02      	cmp	r3, #2
 8005484:	d11c      	bne.n	80054c0 <HAL_SPI_TransmitReceive+0x26c>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d017      	beq.n	80054c0 <HAL_SPI_TransmitReceive+0x26c>
 8005490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005492:	2b01      	cmp	r3, #1
 8005494:	d114      	bne.n	80054c0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d119      	bne.n	8005502 <HAL_SPI_TransmitReceive+0x2ae>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d014      	beq.n	8005502 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054fe:	2301      	movs	r3, #1
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005502:	f7fd fae5 	bl	8002ad0 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800550e:	429a      	cmp	r2, r3
 8005510:	d803      	bhi.n	800551a <HAL_SPI_TransmitReceive+0x2c6>
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005518:	d102      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x2cc>
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	2b00      	cmp	r3, #0
 800551e:	d103      	bne.n	8005528 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005526:	e029      	b.n	800557c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1a2      	bne.n	8005478 <HAL_SPI_TransmitReceive+0x224>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d19d      	bne.n	8005478 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800553c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f917 	bl	8005774 <SPI_EndRxTxTransaction>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d006      	beq.n	800555a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005558:	e010      	b.n	800557c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	e000      	b.n	800557c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800557a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800558c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005590:	4618      	mov	r0, r3
 8005592:	3730      	adds	r7, #48	; 0x30
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	4613      	mov	r3, r2
 80055a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055a8:	f7fd fa92 	bl	8002ad0 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	4413      	add	r3, r2
 80055b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055b8:	f7fd fa8a 	bl	8002ad0 <HAL_GetTick>
 80055bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055be:	4b39      	ldr	r3, [pc, #228]	; (80056a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	015b      	lsls	r3, r3, #5
 80055c4:	0d1b      	lsrs	r3, r3, #20
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	fb02 f303 	mul.w	r3, r2, r3
 80055cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055ce:	e054      	b.n	800567a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d6:	d050      	beq.n	800567a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055d8:	f7fd fa7a 	bl	8002ad0 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d902      	bls.n	80055ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d13d      	bne.n	800566a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005606:	d111      	bne.n	800562c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005610:	d004      	beq.n	800561c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561a:	d107      	bne.n	800562c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005634:	d10f      	bne.n	8005656 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005654:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e017      	b.n	800569a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	3b01      	subs	r3, #1
 8005678:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4013      	ands	r3, r2
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	429a      	cmp	r2, r3
 8005688:	bf0c      	ite	eq
 800568a:	2301      	moveq	r3, #1
 800568c:	2300      	movne	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	429a      	cmp	r2, r3
 8005696:	d19b      	bne.n	80055d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3720      	adds	r7, #32
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	2000000c 	.word	0x2000000c

080056a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056bc:	d111      	bne.n	80056e2 <SPI_EndRxTransaction+0x3a>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c6:	d004      	beq.n	80056d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d0:	d107      	bne.n	80056e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ea:	d12a      	bne.n	8005742 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f4:	d012      	beq.n	800571c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2200      	movs	r2, #0
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff ff49 	bl	8005598 <SPI_WaitFlagStateUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d02d      	beq.n	8005768 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005710:	f043 0220 	orr.w	r2, r3, #32
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e026      	b.n	800576a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2200      	movs	r2, #0
 8005724:	2101      	movs	r1, #1
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7ff ff36 	bl	8005598 <SPI_WaitFlagStateUntilTimeout>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01a      	beq.n	8005768 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	f043 0220 	orr.w	r2, r3, #32
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e013      	b.n	800576a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2200      	movs	r2, #0
 800574a:	2101      	movs	r1, #1
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff ff23 	bl	8005598 <SPI_WaitFlagStateUntilTimeout>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575c:	f043 0220 	orr.w	r2, r3, #32
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e000      	b.n	800576a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af02      	add	r7, sp, #8
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005780:	4b1b      	ldr	r3, [pc, #108]	; (80057f0 <SPI_EndRxTxTransaction+0x7c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1b      	ldr	r2, [pc, #108]	; (80057f4 <SPI_EndRxTxTransaction+0x80>)
 8005786:	fba2 2303 	umull	r2, r3, r2, r3
 800578a:	0d5b      	lsrs	r3, r3, #21
 800578c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005790:	fb02 f303 	mul.w	r3, r2, r3
 8005794:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800579e:	d112      	bne.n	80057c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2200      	movs	r2, #0
 80057a8:	2180      	movs	r1, #128	; 0x80
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f7ff fef4 	bl	8005598 <SPI_WaitFlagStateUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d016      	beq.n	80057e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	f043 0220 	orr.w	r2, r3, #32
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e00f      	b.n	80057e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057dc:	2b80      	cmp	r3, #128	; 0x80
 80057de:	d0f2      	beq.n	80057c6 <SPI_EndRxTxTransaction+0x52>
 80057e0:	e000      	b.n	80057e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80057e2:	bf00      	nop
  }

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	2000000c 	.word	0x2000000c
 80057f4:	165e9f81 	.word	0x165e9f81

080057f8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e034      	b.n	8005878 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7fb f85c 	bl	80008e0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3308      	adds	r3, #8
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f001 fc6e 	bl	8007114 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	461a      	mov	r2, r3
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	f001 fcb8 	bl	80071b8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6858      	ldr	r0, [r3, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	f001 fced 	bl	8007234 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	6892      	ldr	r2, [r2, #8]
 8005862:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	6892      	ldr	r2, [r2, #8]
 800586e:	f041 0101 	orr.w	r1, r1, #1
 8005872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e041      	b.n	8005916 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc ff42 	bl	8002730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f000 fa96 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d001      	beq.n	8005938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e04e      	b.n	80059d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d022      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005962:	d01d      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d018      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1e      	ldr	r2, [pc, #120]	; (80059ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00e      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1b      	ldr	r2, [pc, #108]	; (80059f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d009      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a19      	ldr	r2, [pc, #100]	; (80059f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <HAL_TIM_Base_Start_IT+0xdc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d111      	bne.n	80059c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b06      	cmp	r3, #6
 80059b0:	d010      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0201 	orr.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c2:	e007      	b.n	80059d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40010400 	.word	0x40010400
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40001800 	.word	0x40001800

08005a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d122      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d11b      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0202 	mvn.w	r2, #2
 8005a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f9b5 	bl	8005db2 <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9a7 	bl	8005d9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f9b8 	bl	8005dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d122      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d11b      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0204 	mvn.w	r2, #4
 8005a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f98b 	bl	8005db2 <HAL_TIM_IC_CaptureCallback>
 8005a9c:	e005      	b.n	8005aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f97d 	bl	8005d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f98e 	bl	8005dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d122      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d11b      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0208 	mvn.w	r2, #8
 8005ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2204      	movs	r2, #4
 8005ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f961 	bl	8005db2 <HAL_TIM_IC_CaptureCallback>
 8005af0:	e005      	b.n	8005afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f953 	bl	8005d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f964 	bl	8005dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d122      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d11b      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f06f 0210 	mvn.w	r2, #16
 8005b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f937 	bl	8005db2 <HAL_TIM_IC_CaptureCallback>
 8005b44:	e005      	b.n	8005b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f929 	bl	8005d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f93a 	bl	8005dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d10e      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d107      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0201 	mvn.w	r2, #1
 8005b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fc fc6a 	bl	8002458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b80      	cmp	r3, #128	; 0x80
 8005b90:	d10e      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9c:	2b80      	cmp	r3, #128	; 0x80
 8005b9e:	d107      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fae0 	bl	8006170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b40      	cmp	r3, #64	; 0x40
 8005bbc:	d10e      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc8:	2b40      	cmp	r3, #64	; 0x40
 8005bca:	d107      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f8ff 	bl	8005dda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d10e      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d107      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0220 	mvn.w	r2, #32
 8005c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 faaa 	bl	800615c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c08:	bf00      	nop
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_TIM_ConfigClockSource+0x1c>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e0b4      	b.n	8005d96 <HAL_TIM_ConfigClockSource+0x186>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c64:	d03e      	beq.n	8005ce4 <HAL_TIM_ConfigClockSource+0xd4>
 8005c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6a:	f200 8087 	bhi.w	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c72:	f000 8086 	beq.w	8005d82 <HAL_TIM_ConfigClockSource+0x172>
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7a:	d87f      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c7c:	2b70      	cmp	r3, #112	; 0x70
 8005c7e:	d01a      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0xa6>
 8005c80:	2b70      	cmp	r3, #112	; 0x70
 8005c82:	d87b      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b60      	cmp	r3, #96	; 0x60
 8005c86:	d050      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x11a>
 8005c88:	2b60      	cmp	r3, #96	; 0x60
 8005c8a:	d877      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b50      	cmp	r3, #80	; 0x50
 8005c8e:	d03c      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0xfa>
 8005c90:	2b50      	cmp	r3, #80	; 0x50
 8005c92:	d873      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	d058      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x13a>
 8005c98:	2b40      	cmp	r3, #64	; 0x40
 8005c9a:	d86f      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b30      	cmp	r3, #48	; 0x30
 8005c9e:	d064      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ca0:	2b30      	cmp	r3, #48	; 0x30
 8005ca2:	d86b      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d060      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d867      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d05c      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15a>
 8005cb0:	2b10      	cmp	r3, #16
 8005cb2:	d05a      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15a>
 8005cb4:	e062      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6899      	ldr	r1, [r3, #8]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f000 f9ad 	bl	8006024 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	609a      	str	r2, [r3, #8]
      break;
 8005ce2:	e04f      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	6899      	ldr	r1, [r3, #8]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f000 f996 	bl	8006024 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d06:	609a      	str	r2, [r3, #8]
      break;
 8005d08:	e03c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6859      	ldr	r1, [r3, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f000 f90a 	bl	8005f30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2150      	movs	r1, #80	; 0x50
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 f963 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 8005d28:	e02c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6818      	ldr	r0, [r3, #0]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6859      	ldr	r1, [r3, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	461a      	mov	r2, r3
 8005d38:	f000 f929 	bl	8005f8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2160      	movs	r1, #96	; 0x60
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 f953 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 8005d48:	e01c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6859      	ldr	r1, [r3, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	461a      	mov	r2, r3
 8005d58:	f000 f8ea 	bl	8005f30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2140      	movs	r1, #64	; 0x40
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 f943 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 8005d68:	e00c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f000 f93a 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 8005d7a:	e003      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d80:	e000      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a40      	ldr	r2, [pc, #256]	; (8005f04 <TIM_Base_SetConfig+0x114>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d013      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0e:	d00f      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a3d      	ldr	r2, [pc, #244]	; (8005f08 <TIM_Base_SetConfig+0x118>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00b      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a3c      	ldr	r2, [pc, #240]	; (8005f0c <TIM_Base_SetConfig+0x11c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d007      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a3b      	ldr	r2, [pc, #236]	; (8005f10 <TIM_Base_SetConfig+0x120>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d003      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a3a      	ldr	r2, [pc, #232]	; (8005f14 <TIM_Base_SetConfig+0x124>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d108      	bne.n	8005e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a2f      	ldr	r2, [pc, #188]	; (8005f04 <TIM_Base_SetConfig+0x114>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d02b      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e50:	d027      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a2c      	ldr	r2, [pc, #176]	; (8005f08 <TIM_Base_SetConfig+0x118>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d023      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2b      	ldr	r2, [pc, #172]	; (8005f0c <TIM_Base_SetConfig+0x11c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01f      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a2a      	ldr	r2, [pc, #168]	; (8005f10 <TIM_Base_SetConfig+0x120>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d01b      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a29      	ldr	r2, [pc, #164]	; (8005f14 <TIM_Base_SetConfig+0x124>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d017      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a28      	ldr	r2, [pc, #160]	; (8005f18 <TIM_Base_SetConfig+0x128>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a27      	ldr	r2, [pc, #156]	; (8005f1c <TIM_Base_SetConfig+0x12c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00f      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a26      	ldr	r2, [pc, #152]	; (8005f20 <TIM_Base_SetConfig+0x130>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00b      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a25      	ldr	r2, [pc, #148]	; (8005f24 <TIM_Base_SetConfig+0x134>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d007      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a24      	ldr	r2, [pc, #144]	; (8005f28 <TIM_Base_SetConfig+0x138>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d003      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a23      	ldr	r2, [pc, #140]	; (8005f2c <TIM_Base_SetConfig+0x13c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d108      	bne.n	8005eb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a0a      	ldr	r2, [pc, #40]	; (8005f04 <TIM_Base_SetConfig+0x114>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d003      	beq.n	8005ee8 <TIM_Base_SetConfig+0xf8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a0c      	ldr	r2, [pc, #48]	; (8005f14 <TIM_Base_SetConfig+0x124>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d103      	bne.n	8005ef0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	615a      	str	r2, [r3, #20]
}
 8005ef6:	bf00      	nop
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40010000 	.word	0x40010000
 8005f08:	40000400 	.word	0x40000400
 8005f0c:	40000800 	.word	0x40000800
 8005f10:	40000c00 	.word	0x40000c00
 8005f14:	40010400 	.word	0x40010400
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	40014400 	.word	0x40014400
 8005f20:	40014800 	.word	0x40014800
 8005f24:	40001800 	.word	0x40001800
 8005f28:	40001c00 	.word	0x40001c00
 8005f2c:	40002000 	.word	0x40002000

08005f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f023 0201 	bic.w	r2, r3, #1
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f023 030a 	bic.w	r3, r3, #10
 8005f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b087      	sub	sp, #28
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f023 0210 	bic.w	r2, r3, #16
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	031b      	lsls	r3, r3, #12
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	621a      	str	r2, [r3, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006004:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	f043 0307 	orr.w	r3, r3, #7
 8006010:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	609a      	str	r2, [r3, #8]
}
 8006018:	bf00      	nop
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800603e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	021a      	lsls	r2, r3, #8
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	431a      	orrs	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4313      	orrs	r3, r2
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	609a      	str	r2, [r3, #8]
}
 8006058:	bf00      	nop
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006078:	2302      	movs	r3, #2
 800607a:	e05a      	b.n	8006132 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a21      	ldr	r2, [pc, #132]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d022      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c8:	d01d      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1d      	ldr	r2, [pc, #116]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d018      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1b      	ldr	r2, [pc, #108]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d013      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1a      	ldr	r2, [pc, #104]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00e      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a18      	ldr	r2, [pc, #96]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d009      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a17      	ldr	r2, [pc, #92]	; (8006154 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d004      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a15      	ldr	r2, [pc, #84]	; (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d10c      	bne.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800610c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	4313      	orrs	r3, r2
 8006116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40010000 	.word	0x40010000
 8006144:	40000400 	.word	0x40000400
 8006148:	40000800 	.word	0x40000800
 800614c:	40000c00 	.word	0x40000c00
 8006150:	40010400 	.word	0x40010400
 8006154:	40014000 	.word	0x40014000
 8006158:	40001800 	.word	0x40001800

0800615c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e03f      	b.n	8006216 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fc fb72 	bl	8002894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2224      	movs	r2, #36	; 0x24
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fddb 	bl	8006d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695a      	ldr	r2, [r3, #20]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b08a      	sub	sp, #40	; 0x28
 8006222:	af02      	add	r7, sp, #8
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	603b      	str	r3, [r7, #0]
 800622a:	4613      	mov	r3, r2
 800622c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b20      	cmp	r3, #32
 800623c:	d17c      	bne.n	8006338 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <HAL_UART_Transmit+0x2c>
 8006244:	88fb      	ldrh	r3, [r7, #6]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e075      	b.n	800633a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_UART_Transmit+0x3e>
 8006258:	2302      	movs	r3, #2
 800625a:	e06e      	b.n	800633a <HAL_UART_Transmit+0x11c>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2221      	movs	r2, #33	; 0x21
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006272:	f7fc fc2d 	bl	8002ad0 <HAL_GetTick>
 8006276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628c:	d108      	bne.n	80062a0 <HAL_UART_Transmit+0x82>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d104      	bne.n	80062a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	61bb      	str	r3, [r7, #24]
 800629e:	e003      	b.n	80062a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062a4:	2300      	movs	r3, #0
 80062a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80062b0:	e02a      	b.n	8006308 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2200      	movs	r2, #0
 80062ba:	2180      	movs	r1, #128	; 0x80
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 fb1f 	bl	8006900 <UART_WaitOnFlagUntilTimeout>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e036      	b.n	800633a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10b      	bne.n	80062ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	3302      	adds	r3, #2
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	e007      	b.n	80062fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	781a      	ldrb	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	3301      	adds	r3, #1
 80062f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1cf      	bne.n	80062b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2200      	movs	r2, #0
 800631a:	2140      	movs	r1, #64	; 0x40
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 faef 	bl	8006900 <UART_WaitOnFlagUntilTimeout>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e006      	b.n	800633a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	e000      	b.n	800633a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006338:	2302      	movs	r3, #2
  }
}
 800633a:	4618      	mov	r0, r3
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	60f8      	str	r0, [r7, #12]
 800634a:	60b9      	str	r1, [r7, #8]
 800634c:	4613      	mov	r3, r2
 800634e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b20      	cmp	r3, #32
 800635a:	d11d      	bne.n	8006398 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <HAL_UART_Receive_IT+0x26>
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e016      	b.n	800639a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <HAL_UART_Receive_IT+0x38>
 8006376:	2302      	movs	r3, #2
 8006378:	e00f      	b.n	800639a <HAL_UART_Receive_IT+0x58>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	461a      	mov	r2, r3
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 fb24 	bl	80069dc <UART_Start_Receive_IT>
 8006394:	4603      	mov	r3, r0
 8006396:	e000      	b.n	800639a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006398:	2302      	movs	r3, #2
  }
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b0ba      	sub	sp, #232	; 0xe8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80063e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10f      	bne.n	800640a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <HAL_UART_IRQHandler+0x66>
 80063f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fc03 	bl	8006c0e <UART_Receive_IT>
      return;
 8006408:	e256      	b.n	80068b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800640a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 80de 	beq.w	80065d0 <HAL_UART_IRQHandler+0x22c>
 8006414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d106      	bne.n	800642e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006424:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80d1 	beq.w	80065d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <HAL_UART_IRQHandler+0xae>
 800643a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800643e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f043 0201 	orr.w	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00b      	beq.n	8006476 <HAL_UART_IRQHandler+0xd2>
 800645e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	f043 0202 	orr.w	r2, r3, #2
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00b      	beq.n	800649a <HAL_UART_IRQHandler+0xf6>
 8006482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	f043 0204 	orr.w	r2, r3, #4
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d011      	beq.n	80064ca <HAL_UART_IRQHandler+0x126>
 80064a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d105      	bne.n	80064be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80064b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	f043 0208 	orr.w	r2, r3, #8
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 81ed 	beq.w	80068ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_UART_IRQHandler+0x14e>
 80064e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fb8e 	bl	8006c0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fc:	2b40      	cmp	r3, #64	; 0x40
 80064fe:	bf0c      	ite	eq
 8006500:	2301      	moveq	r3, #1
 8006502:	2300      	movne	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d103      	bne.n	800651e <HAL_UART_IRQHandler+0x17a>
 8006516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d04f      	beq.n	80065be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fa96 	bl	8006a50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652e:	2b40      	cmp	r3, #64	; 0x40
 8006530:	d141      	bne.n	80065b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3314      	adds	r3, #20
 8006538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800654c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3314      	adds	r3, #20
 800655a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800655e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800656a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1d9      	bne.n	8006532 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	2b00      	cmp	r3, #0
 8006584:	d013      	beq.n	80065ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658a:	4a7d      	ldr	r2, [pc, #500]	; (8006780 <HAL_UART_IRQHandler+0x3dc>)
 800658c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	4618      	mov	r0, r3
 8006594:	f7fc fc4d 	bl	8002e32 <HAL_DMA_Abort_IT>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d016      	beq.n	80065cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065a8:	4610      	mov	r0, r2
 80065aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ac:	e00e      	b.n	80065cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f990 	bl	80068d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b4:	e00a      	b.n	80065cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f98c 	bl	80068d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065bc:	e006      	b.n	80065cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f988 	bl	80068d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80065ca:	e170      	b.n	80068ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065cc:	bf00      	nop
    return;
 80065ce:	e16e      	b.n	80068ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	f040 814a 	bne.w	800686e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80065da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065de:	f003 0310 	and.w	r3, r3, #16
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 8143 	beq.w	800686e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80065e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 813c 	beq.w	800686e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065f6:	2300      	movs	r3, #0
 80065f8:	60bb      	str	r3, [r7, #8]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	f040 80b4 	bne.w	8006784 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 8140 	beq.w	80068b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800663a:	429a      	cmp	r2, r3
 800663c:	f080 8139 	bcs.w	80068b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006646:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006652:	f000 8088 	beq.w	8006766 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	330c      	adds	r3, #12
 800665c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800666c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800668e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800669a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1d9      	bne.n	8006656 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3314      	adds	r3, #20
 80066a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066b4:	f023 0301 	bic.w	r3, r3, #1
 80066b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3314      	adds	r3, #20
 80066c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e1      	bne.n	80066a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3314      	adds	r3, #20
 80066e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3314      	adds	r3, #20
 80066fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006702:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006704:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e3      	bne.n	80066de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	330c      	adds	r3, #12
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006736:	f023 0310 	bic.w	r3, r3, #16
 800673a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	330c      	adds	r3, #12
 8006744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006748:	65ba      	str	r2, [r7, #88]	; 0x58
 800674a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800674e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e3      	bne.n	8006724 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	4618      	mov	r0, r3
 8006762:	f7fc faf6 	bl	8002d52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800676e:	b29b      	uxth	r3, r3
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	b29b      	uxth	r3, r3
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f8b6 	bl	80068e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800677c:	e099      	b.n	80068b2 <HAL_UART_IRQHandler+0x50e>
 800677e:	bf00      	nop
 8006780:	08006b17 	.word	0x08006b17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800678c:	b29b      	uxth	r3, r3
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 808b 	beq.w	80068b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80067a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8086 	beq.w	80068b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	330c      	adds	r3, #12
 80067ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80067ce:	647a      	str	r2, [r7, #68]	; 0x44
 80067d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1e3      	bne.n	80067aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3314      	adds	r3, #20
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	e853 3f00 	ldrex	r3, [r3]
 80067f0:	623b      	str	r3, [r7, #32]
   return(result);
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	f023 0301 	bic.w	r3, r3, #1
 80067f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3314      	adds	r3, #20
 8006802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006806:	633a      	str	r2, [r7, #48]	; 0x30
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800680c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e3      	bne.n	80067e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	330c      	adds	r3, #12
 800682e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	60fb      	str	r3, [r7, #12]
   return(result);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0310 	bic.w	r3, r3, #16
 800683e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	330c      	adds	r3, #12
 8006848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800684c:	61fa      	str	r2, [r7, #28]
 800684e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	69b9      	ldr	r1, [r7, #24]
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	617b      	str	r3, [r7, #20]
   return(result);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e3      	bne.n	8006828 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f83e 	bl	80068e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800686c:	e023      	b.n	80068b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <HAL_UART_IRQHandler+0x4ea>
 800687a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f959 	bl	8006b3e <UART_Transmit_IT>
    return;
 800688c:	e014      	b.n	80068b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00e      	beq.n	80068b8 <HAL_UART_IRQHandler+0x514>
 800689a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f999 	bl	8006bde <UART_EndTransmit_IT>
    return;
 80068ac:	e004      	b.n	80068b8 <HAL_UART_IRQHandler+0x514>
    return;
 80068ae:	bf00      	nop
 80068b0:	e002      	b.n	80068b8 <HAL_UART_IRQHandler+0x514>
      return;
 80068b2:	bf00      	nop
 80068b4:	e000      	b.n	80068b8 <HAL_UART_IRQHandler+0x514>
      return;
 80068b6:	bf00      	nop
  }
}
 80068b8:	37e8      	adds	r7, #232	; 0xe8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop

080068c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b090      	sub	sp, #64	; 0x40
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	4613      	mov	r3, r2
 800690e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006910:	e050      	b.n	80069b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d04c      	beq.n	80069b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800691a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <UART_WaitOnFlagUntilTimeout+0x30>
 8006920:	f7fc f8d6 	bl	8002ad0 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800692c:	429a      	cmp	r2, r3
 800692e:	d241      	bcs.n	80069b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006950:	637a      	str	r2, [r7, #52]	; 0x34
 8006952:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e5      	bne.n	8006930 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3314      	adds	r3, #20
 800696a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	613b      	str	r3, [r7, #16]
   return(result);
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f023 0301 	bic.w	r3, r3, #1
 800697a:	63bb      	str	r3, [r7, #56]	; 0x38
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3314      	adds	r3, #20
 8006982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006984:	623a      	str	r2, [r7, #32]
 8006986:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	69f9      	ldr	r1, [r7, #28]
 800698a:	6a3a      	ldr	r2, [r7, #32]
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	61bb      	str	r3, [r7, #24]
   return(result);
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e5      	bne.n	8006964 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2220      	movs	r2, #32
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e00f      	b.n	80069d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	4013      	ands	r3, r2
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	bf0c      	ite	eq
 80069c4:	2301      	moveq	r3, #1
 80069c6:	2300      	movne	r3, #0
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d09f      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3740      	adds	r7, #64	; 0x40
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	4613      	mov	r3, r2
 80069e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	88fa      	ldrh	r2, [r7, #6]
 80069f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	88fa      	ldrh	r2, [r7, #6]
 80069fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2222      	movs	r2, #34	; 0x22
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a20:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	695a      	ldr	r2, [r3, #20]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f042 0201 	orr.w	r2, r2, #1
 8006a30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 0220 	orr.w	r2, r2, #32
 8006a40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b095      	sub	sp, #84	; 0x54
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	330c      	adds	r3, #12
 8006a5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	330c      	adds	r3, #12
 8006a76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a78:	643a      	str	r2, [r7, #64]	; 0x40
 8006a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e5      	bne.n	8006a58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3314      	adds	r3, #20
 8006a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	f023 0301 	bic.w	r3, r3, #1
 8006aa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3314      	adds	r3, #20
 8006aaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e5      	bne.n	8006a8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d119      	bne.n	8006afc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	330c      	adds	r3, #12
 8006ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f023 0310 	bic.w	r3, r3, #16
 8006ade:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	330c      	adds	r3, #12
 8006ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ae8:	61ba      	str	r2, [r7, #24]
 8006aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6979      	ldr	r1, [r7, #20]
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	613b      	str	r3, [r7, #16]
   return(result);
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e5      	bne.n	8006ac8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b0a:	bf00      	nop
 8006b0c:	3754      	adds	r7, #84	; 0x54
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f7ff fecf 	bl	80068d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b36:	bf00      	nop
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b21      	cmp	r3, #33	; 0x21
 8006b50:	d13e      	bne.n	8006bd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b5a:	d114      	bne.n	8006b86 <UART_Transmit_IT+0x48>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d110      	bne.n	8006b86 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	1c9a      	adds	r2, r3, #2
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	621a      	str	r2, [r3, #32]
 8006b84:	e008      	b.n	8006b98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	1c59      	adds	r1, r3, #1
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6211      	str	r1, [r2, #32]
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10f      	bne.n	8006bcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e000      	b.n	8006bd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bd0:	2302      	movs	r3, #2
  }
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff fe5e 	bl	80068c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b08c      	sub	sp, #48	; 0x30
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b22      	cmp	r3, #34	; 0x22
 8006c20:	f040 80ab 	bne.w	8006d7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c2c:	d117      	bne.n	8006c5e <UART_Receive_IT+0x50>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d113      	bne.n	8006c5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c56:	1c9a      	adds	r2, r3, #2
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c5c:	e026      	b.n	8006cac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c70:	d007      	beq.n	8006c82 <UART_Receive_IT+0x74>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10a      	bne.n	8006c90 <UART_Receive_IT+0x82>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d106      	bne.n	8006c90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	e008      	b.n	8006ca2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d15a      	bne.n	8006d76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0220 	bic.w	r2, r2, #32
 8006cce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695a      	ldr	r2, [r3, #20]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0201 	bic.w	r2, r2, #1
 8006cee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d135      	bne.n	8006d6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	330c      	adds	r3, #12
 8006d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	613b      	str	r3, [r7, #16]
   return(result);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f023 0310 	bic.w	r3, r3, #16
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	330c      	adds	r3, #12
 8006d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d26:	623a      	str	r2, [r7, #32]
 8006d28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	69f9      	ldr	r1, [r7, #28]
 8006d2c:	6a3a      	ldr	r2, [r7, #32]
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e5      	bne.n	8006d06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0310 	and.w	r3, r3, #16
 8006d44:	2b10      	cmp	r3, #16
 8006d46:	d10a      	bne.n	8006d5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff fdbf 	bl	80068e8 <HAL_UARTEx_RxEventCallback>
 8006d6a:	e002      	b.n	8006d72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7fb fd13 	bl	8002798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	e002      	b.n	8006d7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	e000      	b.n	8006d7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d7a:	2302      	movs	r3, #2
  }
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3730      	adds	r7, #48	; 0x30
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d88:	b09f      	sub	sp, #124	; 0x7c
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9a:	68d9      	ldr	r1, [r3, #12]
 8006d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	ea40 0301 	orr.w	r3, r0, r1
 8006da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	431a      	orrs	r2, r3
 8006db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	431a      	orrs	r2, r3
 8006db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006dc8:	f021 010c 	bic.w	r1, r1, #12
 8006dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dd2:	430b      	orrs	r3, r1
 8006dd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de2:	6999      	ldr	r1, [r3, #24]
 8006de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	ea40 0301 	orr.w	r3, r0, r1
 8006dec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	4bc5      	ldr	r3, [pc, #788]	; (8007108 <UART_SetConfig+0x384>)
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d004      	beq.n	8006e02 <UART_SetConfig+0x7e>
 8006df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	4bc3      	ldr	r3, [pc, #780]	; (800710c <UART_SetConfig+0x388>)
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d103      	bne.n	8006e0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e02:	f7fd ff3d 	bl	8004c80 <HAL_RCC_GetPCLK2Freq>
 8006e06:	6778      	str	r0, [r7, #116]	; 0x74
 8006e08:	e002      	b.n	8006e10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e0a:	f7fd ff25 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 8006e0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e18:	f040 80b6 	bne.w	8006f88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e1e:	461c      	mov	r4, r3
 8006e20:	f04f 0500 	mov.w	r5, #0
 8006e24:	4622      	mov	r2, r4
 8006e26:	462b      	mov	r3, r5
 8006e28:	1891      	adds	r1, r2, r2
 8006e2a:	6439      	str	r1, [r7, #64]	; 0x40
 8006e2c:	415b      	adcs	r3, r3
 8006e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e34:	1912      	adds	r2, r2, r4
 8006e36:	eb45 0303 	adc.w	r3, r5, r3
 8006e3a:	f04f 0000 	mov.w	r0, #0
 8006e3e:	f04f 0100 	mov.w	r1, #0
 8006e42:	00d9      	lsls	r1, r3, #3
 8006e44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e48:	00d0      	lsls	r0, r2, #3
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	1911      	adds	r1, r2, r4
 8006e50:	6639      	str	r1, [r7, #96]	; 0x60
 8006e52:	416b      	adcs	r3, r5
 8006e54:	667b      	str	r3, [r7, #100]	; 0x64
 8006e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	1891      	adds	r1, r2, r2
 8006e62:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e64:	415b      	adcs	r3, r3
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006e70:	f7f9 f9b2 	bl	80001d8 <__aeabi_uldivmod>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4ba5      	ldr	r3, [pc, #660]	; (8007110 <UART_SetConfig+0x38c>)
 8006e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e7e:	095b      	lsrs	r3, r3, #5
 8006e80:	011e      	lsls	r6, r3, #4
 8006e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e84:	461c      	mov	r4, r3
 8006e86:	f04f 0500 	mov.w	r5, #0
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	1891      	adds	r1, r2, r2
 8006e90:	6339      	str	r1, [r7, #48]	; 0x30
 8006e92:	415b      	adcs	r3, r3
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
 8006e96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e9a:	1912      	adds	r2, r2, r4
 8006e9c:	eb45 0303 	adc.w	r3, r5, r3
 8006ea0:	f04f 0000 	mov.w	r0, #0
 8006ea4:	f04f 0100 	mov.w	r1, #0
 8006ea8:	00d9      	lsls	r1, r3, #3
 8006eaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006eae:	00d0      	lsls	r0, r2, #3
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	1911      	adds	r1, r2, r4
 8006eb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8006eb8:	416b      	adcs	r3, r5
 8006eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f04f 0300 	mov.w	r3, #0
 8006ec6:	1891      	adds	r1, r2, r2
 8006ec8:	62b9      	str	r1, [r7, #40]	; 0x28
 8006eca:	415b      	adcs	r3, r3
 8006ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ed2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006ed6:	f7f9 f97f 	bl	80001d8 <__aeabi_uldivmod>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4b8c      	ldr	r3, [pc, #560]	; (8007110 <UART_SetConfig+0x38c>)
 8006ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	2164      	movs	r1, #100	; 0x64
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	3332      	adds	r3, #50	; 0x32
 8006ef2:	4a87      	ldr	r2, [pc, #540]	; (8007110 <UART_SetConfig+0x38c>)
 8006ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f00:	441e      	add	r6, r3
 8006f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f04:	4618      	mov	r0, r3
 8006f06:	f04f 0100 	mov.w	r1, #0
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	1894      	adds	r4, r2, r2
 8006f10:	623c      	str	r4, [r7, #32]
 8006f12:	415b      	adcs	r3, r3
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
 8006f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f1a:	1812      	adds	r2, r2, r0
 8006f1c:	eb41 0303 	adc.w	r3, r1, r3
 8006f20:	f04f 0400 	mov.w	r4, #0
 8006f24:	f04f 0500 	mov.w	r5, #0
 8006f28:	00dd      	lsls	r5, r3, #3
 8006f2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f2e:	00d4      	lsls	r4, r2, #3
 8006f30:	4622      	mov	r2, r4
 8006f32:	462b      	mov	r3, r5
 8006f34:	1814      	adds	r4, r2, r0
 8006f36:	653c      	str	r4, [r7, #80]	; 0x50
 8006f38:	414b      	adcs	r3, r1
 8006f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8006f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	461a      	mov	r2, r3
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	1891      	adds	r1, r2, r2
 8006f48:	61b9      	str	r1, [r7, #24]
 8006f4a:	415b      	adcs	r3, r3
 8006f4c:	61fb      	str	r3, [r7, #28]
 8006f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f56:	f7f9 f93f 	bl	80001d8 <__aeabi_uldivmod>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4b6c      	ldr	r3, [pc, #432]	; (8007110 <UART_SetConfig+0x38c>)
 8006f60:	fba3 1302 	umull	r1, r3, r3, r2
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	2164      	movs	r1, #100	; 0x64
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	3332      	adds	r3, #50	; 0x32
 8006f72:	4a67      	ldr	r2, [pc, #412]	; (8007110 <UART_SetConfig+0x38c>)
 8006f74:	fba2 2303 	umull	r2, r3, r2, r3
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	f003 0207 	and.w	r2, r3, #7
 8006f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4432      	add	r2, r6
 8006f84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f86:	e0b9      	b.n	80070fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f8a:	461c      	mov	r4, r3
 8006f8c:	f04f 0500 	mov.w	r5, #0
 8006f90:	4622      	mov	r2, r4
 8006f92:	462b      	mov	r3, r5
 8006f94:	1891      	adds	r1, r2, r2
 8006f96:	6139      	str	r1, [r7, #16]
 8006f98:	415b      	adcs	r3, r3
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006fa0:	1912      	adds	r2, r2, r4
 8006fa2:	eb45 0303 	adc.w	r3, r5, r3
 8006fa6:	f04f 0000 	mov.w	r0, #0
 8006faa:	f04f 0100 	mov.w	r1, #0
 8006fae:	00d9      	lsls	r1, r3, #3
 8006fb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fb4:	00d0      	lsls	r0, r2, #3
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	eb12 0804 	adds.w	r8, r2, r4
 8006fbe:	eb43 0905 	adc.w	r9, r3, r5
 8006fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f04f 0100 	mov.w	r1, #0
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	008b      	lsls	r3, r1, #2
 8006fd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fda:	0082      	lsls	r2, r0, #2
 8006fdc:	4640      	mov	r0, r8
 8006fde:	4649      	mov	r1, r9
 8006fe0:	f7f9 f8fa 	bl	80001d8 <__aeabi_uldivmod>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4b49      	ldr	r3, [pc, #292]	; (8007110 <UART_SetConfig+0x38c>)
 8006fea:	fba3 2302 	umull	r2, r3, r3, r2
 8006fee:	095b      	lsrs	r3, r3, #5
 8006ff0:	011e      	lsls	r6, r3, #4
 8006ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f04f 0100 	mov.w	r1, #0
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	1894      	adds	r4, r2, r2
 8007000:	60bc      	str	r4, [r7, #8]
 8007002:	415b      	adcs	r3, r3
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800700a:	1812      	adds	r2, r2, r0
 800700c:	eb41 0303 	adc.w	r3, r1, r3
 8007010:	f04f 0400 	mov.w	r4, #0
 8007014:	f04f 0500 	mov.w	r5, #0
 8007018:	00dd      	lsls	r5, r3, #3
 800701a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800701e:	00d4      	lsls	r4, r2, #3
 8007020:	4622      	mov	r2, r4
 8007022:	462b      	mov	r3, r5
 8007024:	1814      	adds	r4, r2, r0
 8007026:	64bc      	str	r4, [r7, #72]	; 0x48
 8007028:	414b      	adcs	r3, r1
 800702a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800702c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	4618      	mov	r0, r3
 8007032:	f04f 0100 	mov.w	r1, #0
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	008b      	lsls	r3, r1, #2
 8007040:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007044:	0082      	lsls	r2, r0, #2
 8007046:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800704a:	f7f9 f8c5 	bl	80001d8 <__aeabi_uldivmod>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4b2f      	ldr	r3, [pc, #188]	; (8007110 <UART_SetConfig+0x38c>)
 8007054:	fba3 1302 	umull	r1, r3, r3, r2
 8007058:	095b      	lsrs	r3, r3, #5
 800705a:	2164      	movs	r1, #100	; 0x64
 800705c:	fb01 f303 	mul.w	r3, r1, r3
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	011b      	lsls	r3, r3, #4
 8007064:	3332      	adds	r3, #50	; 0x32
 8007066:	4a2a      	ldr	r2, [pc, #168]	; (8007110 <UART_SetConfig+0x38c>)
 8007068:	fba2 2303 	umull	r2, r3, r2, r3
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007072:	441e      	add	r6, r3
 8007074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007076:	4618      	mov	r0, r3
 8007078:	f04f 0100 	mov.w	r1, #0
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	1894      	adds	r4, r2, r2
 8007082:	603c      	str	r4, [r7, #0]
 8007084:	415b      	adcs	r3, r3
 8007086:	607b      	str	r3, [r7, #4]
 8007088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800708c:	1812      	adds	r2, r2, r0
 800708e:	eb41 0303 	adc.w	r3, r1, r3
 8007092:	f04f 0400 	mov.w	r4, #0
 8007096:	f04f 0500 	mov.w	r5, #0
 800709a:	00dd      	lsls	r5, r3, #3
 800709c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80070a0:	00d4      	lsls	r4, r2, #3
 80070a2:	4622      	mov	r2, r4
 80070a4:	462b      	mov	r3, r5
 80070a6:	eb12 0a00 	adds.w	sl, r2, r0
 80070aa:	eb43 0b01 	adc.w	fp, r3, r1
 80070ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f04f 0100 	mov.w	r1, #0
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	f04f 0300 	mov.w	r3, #0
 80070c0:	008b      	lsls	r3, r1, #2
 80070c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070c6:	0082      	lsls	r2, r0, #2
 80070c8:	4650      	mov	r0, sl
 80070ca:	4659      	mov	r1, fp
 80070cc:	f7f9 f884 	bl	80001d8 <__aeabi_uldivmod>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <UART_SetConfig+0x38c>)
 80070d6:	fba3 1302 	umull	r1, r3, r3, r2
 80070da:	095b      	lsrs	r3, r3, #5
 80070dc:	2164      	movs	r1, #100	; 0x64
 80070de:	fb01 f303 	mul.w	r3, r1, r3
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	3332      	adds	r3, #50	; 0x32
 80070e8:	4a09      	ldr	r2, [pc, #36]	; (8007110 <UART_SetConfig+0x38c>)
 80070ea:	fba2 2303 	umull	r2, r3, r2, r3
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	f003 020f 	and.w	r2, r3, #15
 80070f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4432      	add	r2, r6
 80070fa:	609a      	str	r2, [r3, #8]
}
 80070fc:	bf00      	nop
 80070fe:	377c      	adds	r7, #124	; 0x7c
 8007100:	46bd      	mov	sp, r7
 8007102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	bf00      	nop
 8007108:	40011000 	.word	0x40011000
 800710c:	40011400 	.word	0x40011400
 8007110:	51eb851f 	.word	0x51eb851f

08007114 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4b20      	ldr	r3, [pc, #128]	; (80071b4 <FSMC_NORSRAM_Init+0xa0>)
 8007132:	4013      	ands	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800713e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007144:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800714a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007150:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007156:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800715c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007162:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007168:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800716e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007174:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800717a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007180:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4313      	orrs	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2b08      	cmp	r3, #8
 800718e:	d103      	bne.n	8007198 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007196:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68f9      	ldr	r1, [r7, #12]
 80071a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	fff00080 	.word	0xfff00080

080071b8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80071da:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80071e6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80071ee:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80071f6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007200:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	3b02      	subs	r3, #2
 8007208:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800720a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007210:	4313      	orrs	r3, r2
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6979      	ldr	r1, [r7, #20]
 8007220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800724c:	d122      	bne.n	8007294 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007256:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	4b15      	ldr	r3, [pc, #84]	; (80072b0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800725c:	4013      	ands	r3, r2
 800725e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800726a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007272:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800727a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007280:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6979      	ldr	r1, [r7, #20]
 800728e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007292:	e005      	b.n	80072a0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800729c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	cff00000 	.word	0xcff00000

080072b4 <__libc_init_array>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	4d0d      	ldr	r5, [pc, #52]	; (80072ec <__libc_init_array+0x38>)
 80072b8:	4c0d      	ldr	r4, [pc, #52]	; (80072f0 <__libc_init_array+0x3c>)
 80072ba:	1b64      	subs	r4, r4, r5
 80072bc:	10a4      	asrs	r4, r4, #2
 80072be:	2600      	movs	r6, #0
 80072c0:	42a6      	cmp	r6, r4
 80072c2:	d109      	bne.n	80072d8 <__libc_init_array+0x24>
 80072c4:	4d0b      	ldr	r5, [pc, #44]	; (80072f4 <__libc_init_array+0x40>)
 80072c6:	4c0c      	ldr	r4, [pc, #48]	; (80072f8 <__libc_init_array+0x44>)
 80072c8:	f000 f820 	bl	800730c <_init>
 80072cc:	1b64      	subs	r4, r4, r5
 80072ce:	10a4      	asrs	r4, r4, #2
 80072d0:	2600      	movs	r6, #0
 80072d2:	42a6      	cmp	r6, r4
 80072d4:	d105      	bne.n	80072e2 <__libc_init_array+0x2e>
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
 80072d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072dc:	4798      	blx	r3
 80072de:	3601      	adds	r6, #1
 80072e0:	e7ee      	b.n	80072c0 <__libc_init_array+0xc>
 80072e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e6:	4798      	blx	r3
 80072e8:	3601      	adds	r6, #1
 80072ea:	e7f2      	b.n	80072d2 <__libc_init_array+0x1e>
 80072ec:	0800a39c 	.word	0x0800a39c
 80072f0:	0800a39c 	.word	0x0800a39c
 80072f4:	0800a39c 	.word	0x0800a39c
 80072f8:	0800a3a0 	.word	0x0800a3a0

080072fc <memset>:
 80072fc:	4402      	add	r2, r0
 80072fe:	4603      	mov	r3, r0
 8007300:	4293      	cmp	r3, r2
 8007302:	d100      	bne.n	8007306 <memset+0xa>
 8007304:	4770      	bx	lr
 8007306:	f803 1b01 	strb.w	r1, [r3], #1
 800730a:	e7f9      	b.n	8007300 <memset+0x4>

0800730c <_init>:
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	bf00      	nop
 8007310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007312:	bc08      	pop	{r3}
 8007314:	469e      	mov	lr, r3
 8007316:	4770      	bx	lr

08007318 <_fini>:
 8007318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731a:	bf00      	nop
 800731c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731e:	bc08      	pop	{r3}
 8007320:	469e      	mov	lr, r3
 8007322:	4770      	bx	lr
